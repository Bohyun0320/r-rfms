2023-09-21 09:14:15 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:15 [DEBUG] - { text: "select current_setting('timezone'), now()", values: [] }
2023-09-21 09:14:15 [INFO] - Argos Platform : win32
2023-09-21 09:14:15 [INFO] - config.server_port : 3001
2023-09-21 09:14:15 [DEBUG] - route_loader.init called.
2023-09-21 09:14:15 [INFO] - Routing Moudle count : 71
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : / -- method : ./page/route_root:getRoot
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /login -- method : ./page/route_root:getLogin
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /signup -- method : ./page/route_account:getSignup
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /account/list -- method : ./page/route_account:getAccountList
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /account/my -- method : ./page/route_account:getAccountMy
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /account/view/:email -- method : ./page/route_account:getAccountView
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /equip/list/vehicle -- method : ./page/route_equip:getListVh
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /equip/list/sensor -- method : ./page/route_equip:getListSens
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /equip/add/vehicle -- method : ./page/route_equip:getAddVehicle
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /equip/add/sensor -- method : ./page/route_equip:getAddSensor
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /equip/vehicle/:vhid -- method : ./page/route_equip:getViewVh
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /equip/sens/:sensid -- method : ./page/route_equip:getViewSens
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /map/list/map -- method : ./page/route_map:getListMap
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /data/list/prj -- method : ./page/route_data:getListPrj
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /data/add/prj -- method : ./page/route_data:getAddPrj
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /data/list/cam -- method : ./page/route_data:getListDataCam
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /data/list/lidar -- method : ./page/route_data:getListDataLidar
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /data/list/obj -- method : ./page/route_data:getListObj
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /data/view/prj/:prjid -- method : ./page/route_data:getViewPrj
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /data/view/data/:dataid -- method : ./page/route_data:getViewData
2023-09-21 09:14:15 [DEBUG] - Router setted - type : get -- path : /stat/dashboard -- method : ./page/route_stat:getDashboard
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /doc/:docname -- method : ./page/route_docs:getDocuemnt
2023-09-21 09:14:16 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/account/read -- method : ./api/api_account:readUserList
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:uploadUserPhoto
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:postUpdateUser
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/account/changepw -- method : ./api/api_account:postChangePw
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/account/reset -- method : ./api/api_account:postUserReset
2023-09-21 09:14:16 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 09:14:16 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object] , targetPath : , originalName : false
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:postAddVehicle
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:postUpdateVehicle
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/equip/read/vh -- method : ./api/api_equip:readVhList
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:postAddSens
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/equip/read/sens -- method : ./api/api_equip:readSensList
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:postUpdateSens
2023-09-21 09:14:16 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object],[object Object] , targetPath : , originalName : true
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/data/add/prj -- method : ./api/api_data:postAddPrj
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/data/delete/prj -- method : ./api/api_data:postDelPrj
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/data/update/prj -- method : ./api/api_data:postUpdatePrj
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:uploadPrjData
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:postUploadPrjDataProc
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/data/read/prj -- method : ./api/api_data:readPrjList
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/data/read/cam -- method : ./api/api_data:readDataCamList
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/data/read/lidar -- method : ./api/api_data:readDataLidarList
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/data/read/obj -- method : ./api/api_obj:readObjList
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/data/package/:prjid/:dataty -- method : ./api/api_data:getDataPackage
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/data/down/:dataty/:dataid -- method : ./api/api_data:getDataDownload
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/data/path/:prjid -- method : ./api/api_data:getDataPath
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/data/lidar/img -- method : ./api/api_data:getLidarImg
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/data/proc/start -- method : ./api/api_data:startDataProc
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/map/sig -- method : ./api/api_map:postSigBySido
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapPrj -- method : ./api/api_map:postSearchMapByPrj
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapRegion -- method : ./api/api_map:postSearchMapByRegion
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/stat/data-total -- method : ./api/api_stat:getTotalData
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/stat/prj-status -- method : ./api/api_stat:getProjectStauts
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/stat/data-period -- method : ./api/api_stat:getDataPeriod
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/stat/equip -- method : ./api/api_stat:getDataEquipStatus
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/stat/object -- method : ./api/api_stat:getObjStatus
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/auth/token -- method : ./api/api_rest:postAuthTokken
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/equip/list -- method : ./api/api_rest:getEquipList
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/project/add -- method : ./api/api_rest:postPrjAdd
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/data/meta -- method : ./api/api_rest:postMetaData
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/project/scan/:prjid -- method : ./api/api_rest:getPrjScan
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/project/data/:prjid -- method : ./api/api_rest:getPrjData
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/project/sync -- method : ./api/api_rest:postPrjSync
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/project/clone -- method : ./api/api_rest:postClonePrj
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/data/finish -- method : ./api/api_rest:postFinishData
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/data/prc-finish -- method : ./api/api_rest:postFinishPrcData
2023-09-21 09:14:16 [DEBUG] - Router setted - type : get -- path : /api/debug/token -- method : ./api/api_debug:getDebugToken
2023-09-21 09:14:16 [DEBUG] - Router setted - type : post -- path : /api/debug/update-pnu -- method : ./api/api_debug:postUpdatePnu
2023-09-21 09:14:16 [DEBUG] - config/passport called.
2023-09-21 09:14:16 [DEBUG] - local passport setted.
2023-09-21 09:14:16 [DEBUG] - init user_passport
2023-09-21 09:14:16 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 09:14:16 [DEBUG] - [func]codeUtil.init()
2023-09-21 09:14:16 [DEBUG] - [msg] loadUserType...
2023-09-21 09:14:16 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:16 [DEBUG] - { text: 'SELECT *  FROM tc_user_ty ORDER BY user_ty_id' }
2023-09-21 09:14:16 [DEBUG] - [msg] loadUserStatus...
2023-09-21 09:14:16 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:16 [DEBUG] - { text: 'SELECT *  FROM tc_user_cond ORDER BY user_cond_id' }
2023-09-21 09:14:16 [DEBUG] - [msg] loadPnuCode...
2023-09-21 09:14:16 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:16 [DEBUG] - { text: 'SELECT *  FROM tc_pnu_sigungu ORDER BY sido_cd, sigungu_cd' }
2023-09-21 09:14:16 [DEBUG] - [msg] loadCondCode...
2023-09-21 09:14:16 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:16 [DEBUG] - { text: 'SELECT *  FROM tc_vh_cond' }
2023-09-21 09:14:16 [DEBUG] - [msg] loadSensCode...
2023-09-21 09:14:16 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:16 [DEBUG] - { text: 'SELECT *  FROM tc_sens_ty' }
2023-09-21 09:14:16 [DEBUG] - [msg] loadWeatherCode...
2023-09-21 09:14:16 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:16 [DEBUG] - { text: 'SELECT *  FROM tc_weather order by weather_cd' }
2023-09-21 09:14:16 [DEBUG] - updateUtil.checkUpdate
2023-09-21 09:14:16 [INFO] - Express SSL server listening on port 443
2023-09-21 09:14:16 [INFO] - Express server listening on port 3001
2023-09-21 09:14:16 [DEBUG] - [ { current_setting: 'Asia/Seoul', now: 2023-09-21T00:14:17.310Z } ]
2023-09-21 09:14:21 [DEBUG] - GET : /
2023-09-21 09:14:21 [DEBUG] - GET : /login
2023-09-21 09:14:21 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 09:14:21 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 09:14:21 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:21 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 09:14:21 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 09:14:28 [DEBUG] - [func]local_login.LocalStrategy() - id : etoile0320@geostory.co.kr, pw:Fleur0302!@#
2023-09-21 09:14:28 [DEBUG] - [func]userDB.authUser - id : etoile0320@geostory.co.kr, pw : Fleur0302!@#
2023-09-21 09:14:28 [DEBUG] - [func]  : userDB.findOne : etoile0320@geostory.co.kr
2023-09-21 09:14:28 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:28 [DEBUG] - {
  text: 'SELECT * FROM sv_user_mng WHERE sv_user_id = $1',
  values: [ 'etoile0320@geostory.co.kr' ]
}
2023-09-21 09:14:28 [DEBUG] - encptUtil.encryptPassword - password : Fleur0302!@#
2023-09-21 09:14:28 [DEBUG] - codeUtil.getUserStatusName - code :1
2023-09-21 09:14:28 [DEBUG] - user status : [
  { user_cond_id: 1, user_cond_nm: '사용중' },
  { user_cond_id: 2, user_cond_nm: '승인대기' },
  { user_cond_id: 3, user_cond_nm: '사용정지' },
  { user_cond_id: 4, user_cond_nm: '사용종료' }
]
2023-09-21 09:14:28 [DEBUG] - code found : 사용중
2023-09-21 09:14:28 [INFO] - 계정과 비밀번호가 일치함.
2023-09-21 09:14:28 [DEBUG] - {
  sv_user_id: 'etoile0320@geostory.co.kr',
  divis: 10,
  flnm: '최보현',
  brdt: null,
  telno: '070-5228-1272',
  ogdp: '(주)지오스토리',
  join_ymd: 2023-07-05T15:00:00.000Z,
  pw_no: 'cNJSIWsnyth68rOH+Ri9yGmo0bYhMSx3OOaHoWggDBkHIcHMTYz6TWInYZFZ+fff7hGfZ3S22Lc5fReibJZR5Q==',
  pw_no_salt: 'DuznV18i/EDdO3ejZZDHeVK8zxGKhqQgPEKcaShZqYan8fk9wmvofozMo+n7R3x0mKyf42nSoU03jwZYnT/bfg==',
  user_cond_cd: 1,
  user_img_file_path: '/profile/photo/1688607543433.jpg',
  login_failr_co: 0,
  sttus_ty_name: '사용중'
}
2023-09-21 09:14:28 [DEBUG] - [func]userDB.resetLoginCount - id : etoile0320@geostory.co.kr
2023-09-21 09:14:28 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:28 [DEBUG] - {
  text: 'UPDATE sv_user_mng          SET login_failr_co = 0          WHERE sv_user_id = $1          RETURNING login_failr_co',
  values: [ 'etoile0320@geostory.co.kr' ]
}
2023-09-21 09:14:28 [DEBUG] - serializeUser() 호출됨.
2023-09-21 09:14:28 [DEBUG] - {
  conectIp: '127.0.0.1',
  userId: undefined,
  conectDt: 2023-09-21T00:14:28.438Z
}
2023-09-21 09:14:28 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:28 [DEBUG] - GET : /
2023-09-21 09:14:28 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:28 [DEBUG] - GET : /stat/dashboard
2023-09-21 09:14:28 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:28 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:28 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 09:14:28 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 09:14:28 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:28 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 09:14:28 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:28 [DEBUG] - GET : /api/stat/data-total?_=1695255268605
2023-09-21 09:14:28 [DEBUG] - [func]dataCamDB.getTotalData()
2023-09-21 09:14:28 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:28 [DEBUG] - {
  text: 'select count(*)::int\n              from photo_mng',
  values: []
}
2023-09-21 09:14:28 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:28 [DEBUG] - GET : /api/stat/prj-status?_=1695255268606
2023-09-21 09:14:28 [DEBUG] - [func] getProjectStauts()
2023-09-21 09:14:28 [DEBUG] - [func]prjDB.getPrjStatusCount
2023-09-21 09:14:28 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:28 [DEBUG] - {
  text: 'select p.prj_stts_cd, s.prj_stts_nm, count(*)::int\n' +
    '            from project_mng p\n' +
    '            join tc_prj_status s on p.prj_stts_cd = s.prj_stts_cd  \n' +
    '            group by p.prj_stts_cd, s.prj_stts_nm \n' +
    '            order by p.prj_stts_cd ',
  values: []
}
2023-09-21 09:14:28 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:28 [DEBUG] - GET : /api/stat/data-period?startDt=2022-09-21&endDt=2023-09-21&setp=month&_=1695255268607
2023-09-21 09:14:28 [DEBUG] - [func] getDataPeriod()
2023-09-21 09:14:28 [DEBUG] - [func]dataCamDB.getStatPeriod()
2023-09-21 09:14:28 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:28 [DEBUG] - {
  text: 'select t.tDate, p.count::int\n' +
    '              from ( \n' +
    '                select ( \n' +
    '                    to_char(generate_series($1::date, $2::date, $3::interval)::date, $4)\n' +
    '                  )::text as tDate \n' +
    '                ) t \n' +
    '              left outer join ( \n' +
    '                  select to_char(data_reg_dt, $4) as data_reg_dt, count(*) as count\n' +
    '                  from photo_mng dt \n' +
    '                  where data_reg_dt >=$1 and data_reg_dt <=$5\n' +
    '                  group by to_char(data_reg_dt, $4)\t\n' +
    '                ) p \n' +
    '                on t.tDate = p.data_reg_dt \n' +
    '              order by t.tDate ',
  values: [
    '2022-09-21',
    '2023-09-21',
    '1 month',
    'YYYY년 MM월',
    '2023-09-21 24:00'
  ]
}
2023-09-21 09:14:28 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 09:14:28 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:28 [DEBUG] - GET : /api/stat/equip?_=1695255268608
2023-09-21 09:14:28 [DEBUG] - [func] getDataEquipStatus()
2023-09-21 09:14:28 [DEBUG] - [func]vehicleDB.getTotalData()
2023-09-21 09:14:28 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:28 [DEBUG] - {
  text: 'select count(*)::int\n' +
    '              from vh_mng \n' +
    '              where cond_cd = 1',
  values: []
}
2023-09-21 09:14:28 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:28 [DEBUG] - GET : /api/stat/object?_=1695255268609
2023-09-21 09:14:28 [DEBUG] - [func] getObjStatus()
2023-09-21 09:14:28 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:28 [DEBUG] - {
  text: 'select ts.sign_nm, count(*)::int\n' +
    '            from obj_rs o\n' +
    '            left join tc_trffc_sign ts on o.cd = ts.sign_id \n' +
    '            group by ts.sign_nm ',
  values: []
}
2023-09-21 09:14:28 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:28 [DEBUG] - {
  text: 'select count(*)::int\n              from las_mng',
  values: []
}
2023-09-21 09:14:28 [DEBUG] - [func]sensDB.getTotalCount()
2023-09-21 09:14:28 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:28 [DEBUG] - {
  text: 'select count(*)::int\n' +
    '              from sens_mng \n' +
    '              where cond_cd = 1\n' +
    '              and sens_ty = 3',
  values: []
}
2023-09-21 09:14:28 [DEBUG] - { vehicle: 2, sensor: 1 }
2023-09-21 09:14:28 [DEBUG] - [
  { sign_nm: '야생동물보호', count: 35 },
  { sign_nm: '4색등(종형)', count: 19 },
  { sign_nm: '좌측면통행', count: 44 },
  { sign_nm: '+자형교차로', count: 1 },
  { sign_nm: '회전형교차로', count: 21 },
  { sign_nm: '자전거전용차로', count: 341 },
  { sign_nm: '자전거전용도로', count: 66 },
  { sign_nm: '유턴금지', count: 113 },
  { sign_nm: '낙석도로', count: 62 },
  { sign_nm: '직진 및 우회전', count: 259 },
  { sign_nm: '위험', count: 123 },
  { sign_nm: '자전거 및 보행자 통행구분', count: 280 },
  { sign_nm: '일시정지', count: 55 },
  { sign_nm: '우측방통행', count: 3 },
  { sign_nm: 'ㅓ자형교차로', count: 41 },
  { sign_nm: '좌회전 및 유턴', count: 117 },
  { sign_nm: '보행자보행금지', count: 15 },
  { sign_nm: '4색등(횡형)', count: 5774 },
  { sign_nm: '좌우회전', count: 57 },
  { sign_nm: '강변도로', count: 73 },
  { sign_nm: '어린이보호(어린이보호구역안)', count: 308 },
  { sign_nm: '우측면통행', count: 663 },
  { sign_nm: '이륜자동차및원동기장치자전거통행금지', count: 3 },
  { sign_nm: '라바콘', count: 54 },
  { sign_nm: 'PE펜스', count: 6 },
  { sign_nm: '자전거 및 보행자 겸용도로', count: 308 },
  { sign_nm: '기타중장비', count: 11 },
  { sign_nm: '앞지르기금지', count: 36 },
  { sign_nm: '터널', count: 39 },
  { sign_nm: '양측방통행', count: 66 },
  { sign_nm: '유턴', count: 1472 },
  { sign_nm: '우회전', count: 42 },
  { sign_nm: '자동차전용도로', count: 3 },
  { sign_nm: '어린이보호', count: 139 },
  { sign_nm: '가림막펜스', count: 13 },
  { sign_nm: '정차·주차금지', count: 269 },
  { sign_nm: '보행자전용도로', count: 17 },
  { sign_nm: '신호기', count: 17 },
  { sign_nm: '노면고르지못함', count: 21 },
  { sign_nm: '사각표지판', count: 18 },
  { sign_nm: '우회로', count: 136 },
  { sign_nm: '드럼', count: 3 },
  { sign_nm: '자전거횡단도', count: 748 },
  { sign_nm: '2방향통행', count: 2 },
  { sign_nm: '직진', count: 53 },
  { sign_nm: '최고속도제한', count: 1988 },
  { sign_nm: '일방통행', count: 42 },
  { sign_nm: '좌회전', count: 131 },
  { sign_nm: '미끄러운도로', count: 82 },
  { sign_nm: '양보', count: 111 },
  { sign_nm: '3색등(종형)', count: 79 },
  { sign_nm: '횡풍', count: 10 },
  { sign_nm: '주차장', count: 64 },
  { sign_nm: '차높이제한', count: 243 },
  { sign_nm: '차중량제한', count: 108 },
  { sign_nm: '자전거', count: 118 },
  { sign_nm: '서행', count: 136 },
  { sign_nm: '도로공사중', count: 22 },
  { sign_nm: '우합류도로', count: 70 },
  { sign_nm: '철길건널목', count: 14 },
  { sign_nm: '자전거통행금지', count: 17 },
  { sign_nm: '직진 및 좌회전', count: 588 },
  { sign_nm: '적색점멸등', count: 2 },
  { sign_nm: '우회전금지', count: 49 },
  { sign_nm: 'Y자형교차로', count: 6 },
  { sign_nm: '우측차로없어짐', count: 253 },
  { sign_nm: '중앙분리대끝남', count: 1 },
  { sign_nm: '황색점멸등', count: 3 },
  { sign_nm: '우로굽은도로', count: 31 },
  { sign_nm: '노인보호(노인보호구역안)', count: 32 },
  { sign_nm: '3색등(횡형)', count: 3786 },
  { sign_nm: 'PE울타리', count: 14 },
  { sign_nm: '화물자동차통행금지', count: 8 },
  { sign_nm: 'ㅏ자형교차로', count: 93 },
  { sign_nm: '진행방향통행구분', count: 161 },
  { sign_nm: '최저속도제한', count: 16 },
  { sign_nm: '좌회전금지', count: 61 },
  { sign_nm: '차간거리확보', count: 46 },
  { sign_nm: '좌로굽은도로', count: 84 },
  { sign_nm: '주차금지', count: 681 },
  { sign_nm: '진입금지', count: 21 },
  { sign_nm: '횡단보도', count: 1247 },
  { sign_nm: '과속방지턱', count: 295 },
  { sign_nm: '내리막경사', count: 5 },
  { sign_nm: '중앙분리대시작', count: 41 },
  { sign_nm: '좌우로이중굽은도로', count: 2 },
  { sign_nm: '자전거주차장', count: 51 },
  { sign_nm: '직진금지', count: 74 },
  { sign_nm: '회전 교차로', count: 27 },
  { sign_nm: '상습정체구간', count: 3 },
  { sign_nm: '버스전용차로', count: 21 },
  { sign_nm: '신호차량', count: 11 },
  { sign_nm: '위험물적재차량통행금지', count: 27 },
  { sign_nm: '오르막경사', count: 1 },
  { sign_nm: '비보호좌회전', count: 735 }
]
2023-09-21 09:14:28 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:28 [DEBUG] - { text: 'select count(*)::int\n              from obj_rs', values: [] }
2023-09-21 09:14:30 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:30 [DEBUG] - GET : /account/list
2023-09-21 09:14:30 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:30 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:30 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 09:14:30 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 09:14:30 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:30 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 09:14:30 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 09:14:30 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:30 [DEBUG] - GET : /api/account/read?filter_type=flnm&filter_value=&page=1&perPage=14&_=1695255270833
2023-09-21 09:14:30 [DEBUG] - [func]gridUtil.getDefaultInfo()
2023-09-21 09:14:30 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'join_ymd',
  sortAscending: undefined,
  filter_type: 'flnm',
  filter_value: ''
}
2023-09-21 09:14:30 [DEBUG] - [func]userDB.getReadUserList()
2023-09-21 09:14:30 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'join_ymd',
  sortAscending: undefined,
  filter_type: 'flnm',
  filter_value: ''
}
2023-09-21 09:14:30 [DEBUG] - undefined
2023-09-21 09:14:30 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:30 [DEBUG] - {
  text: 'SELECT u.*, t.user_ty_nm, c.user_cond_nm,           count(*) OVER() total           FROM sv_user_mng u LEFT JOIN tc_user_ty t  ON u.divis = t.user_ty_id LEFT JOIN tc_user_cond c  ON u.user_cond_cd = c.user_cond_id  ORDER BY join_ymd DESC  LIMIT $1 OFFSET $2',
  values: [ 14, 0 ]
}
2023-09-21 09:14:30 [DEBUG] - [func]gridUtil.convertGridData()
2023-09-21 09:14:33 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:33 [DEBUG] - GET : /data/list/prj
2023-09-21 09:14:33 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:33 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:33 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 09:14:33 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 09:14:33 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:33 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 09:14:33 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 09:14:33 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:33 [DEBUG] - GET : /api/data/read/prj?filter_type=p.prj_id&filter_value=&page=1&perPage=14&_=1695255273163
2023-09-21 09:14:33 [DEBUG] - [func]gridUtil.getDefaultInfo()
2023-09-21 09:14:33 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'prj_id',
  sortAscending: undefined,
  filter_type: 'p.prj_id',
  filter_value: ''
}
2023-09-21 09:14:33 [DEBUG] - [func]prjDB.getReadPrjList()
2023-09-21 09:14:33 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'prj_id',
  sortAscending: undefined,
  filter_type: 'p.prj_id',
  filter_value: ''
}
2023-09-21 09:14:33 [DEBUG] - undefined
2023-09-21 09:14:33 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:33 [DEBUG] - {
  text: 'SELECT p.*, v.vh_nm, s.sens_nm cam_sens_nm, s2.sens_nm lidar_sens_nm, s3.sens_nm sens_set_nm, u.flnm, t.prj_stts_nm, pnu.sido_nm, pnu.sigungu_nm,             count(*) OVER() total             FROM project_mng p LEFT JOIN vh_mng v  ON p.vh_id = v.vh_id LEFT JOIN sens_mng s  ON p.cam_sens_id = s.sens_id LEFT JOIN sens_mng s2  ON p.lidar_sens_id = s2.sens_id LEFT JOIN sens_mng s3  ON p.sens_set_id = s3.sens_id LEFT JOIN sv_user_mng u  ON p.sv_user_id = u.sv_user_id LEFT JOIN  tc_prj_status t ON p.prj_stts_cd = t.prj_stts_cd LEFT JOIN  tc_pnu_sigungu pnu ON p.pnu_cd = pnu.pnu_cd ORDER BY prj_id DESC  LIMIT $1 OFFSET $2',
  values: [ 14, 0 ]
}
2023-09-21 09:14:33 [DEBUG] - [func]gridUtil.convertGridData()
2023-09-21 09:14:36 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:36 [DEBUG] - GET : /data/view/prj/97
2023-09-21 09:14:36 [DEBUG] - [func]vehicleDB.getSimpleList
2023-09-21 09:14:36 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:36 [DEBUG] - {
  text: 'SELECT vh_id, vh_nm, vh_no, cond_cd           FROM vh_mng\n' +
    '          ORDER BY vh_nm'
}
2023-09-21 09:14:36 [DEBUG] - [func]sensDB.getSimpleList
2023-09-21 09:14:36 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:36 [DEBUG] - {
  text: 'SELECT *           FROM sens_mng WHERE sens_id > 0 ORDER BY sens_nm'
}
2023-09-21 09:14:36 [DEBUG] - [func]userDB.getSimplist()
2023-09-21 09:14:36 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:36 [DEBUG] - {
  text: 'SELECT *           FROM sv_user_mng\n          ORDER BY flnm',
  values: []
}
2023-09-21 09:14:36 [DEBUG] - [func]prjDB.getPrjInfo() - prjId : 97
2023-09-21 09:14:36 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:36 [DEBUG] - {
  text: 'SELECT *           FROM project_mng WHERE prj_id = $1',
  values: [ 97 ]
}
2023-09-21 09:14:36 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:36 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:36 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 09:14:36 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 09:14:36 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:36 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 09:14:36 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:36 [DEBUG] - GET : /api/data/package/97/cam_file?page=1&perPage=10&_=1695255276763
2023-09-21 09:14:36 [DEBUG] - [func]dataCamDB.getPrjDataPkg() - prjId : 97
2023-09-21 09:14:36 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:36 [DEBUG] - {
  text: 'SELECT *, count(*) OVER() total, sum(file_len) OVER() sum\n' +
    '          FROM photo_mng\n' +
    '          WHERE prj_id = $1\n' +
    '          ORDER BY photo_id\n' +
    '          LIMIT $2 OFFSET $3',
  values: [ 97, '10', 0 ]
}
2023-09-21 09:14:36 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:36 [DEBUG] - GET : /api/data/package/97/lidar_file?page=1&perPage=10&_=1695255276764
2023-09-21 09:14:36 [DEBUG] - [func]dataLidarDB.getPrjDataPkg() - prjId : 97
2023-09-21 09:14:36 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:36 [DEBUG] - {
  text: 'SELECT *, count(*) OVER() total, sum(file_len) OVER() sum\n' +
    '          FROM las_mng \n' +
    '          WHERE prj_id = $1\n' +
    '          ORDER BY las_id\n' +
    '          LIMIT $2 OFFSET $3',
  values: [ 97, '10', 0 ]
}
2023-09-21 09:14:36 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:36 [DEBUG] - GET : /api/data/package/97/meta_file?page=1&perPage=10&_=1695255276765
2023-09-21 09:14:36 [DEBUG] - [func]dataMetaDB.getPrjDataPkg() - prjId : 97
2023-09-21 09:14:36 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:36 [DEBUG] - {
  text: 'SELECT *, count(*) OVER() total, sum(file_len) OVER() sum\n' +
    '          FROM meta_mng \n' +
    '          WHERE prj_id = $1\n' +
    '          ORDER BY meta_id\n' +
    '          LIMIT $2 OFFSET $3',
  values: [ 97, '10', 0 ]
}
2023-09-21 09:14:36 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 09:14:39 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:39 [DEBUG] - GET : /data/list/obj
2023-09-21 09:14:39 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:39 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:39 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 09:14:39 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 09:14:39 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:39 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 09:14:39 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 09:14:39 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:39 [DEBUG] - GET : /api/data/read/obj?filter_type=o.obj_rs_id&filter_value=&page=1&perPage=14&_=1695255279155
2023-09-21 09:14:39 [DEBUG] - [func]gridUtil.getDefaultInfo()
2023-09-21 09:14:39 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: 'o.obj_rs_id',
  filter_value: ''
}
2023-09-21 09:14:39 [DEBUG] - [func]prjDB.getReadDataList()
2023-09-21 09:14:39 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: 'o.obj_rs_id',
  filter_value: ''
}
2023-09-21 09:14:39 [DEBUG] - 'obj_rs_id'
2023-09-21 09:14:39 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:39 [DEBUG] - {
  text: 'SELECT o.*, s.sign_nm, o.updt_yn, ph.org_file_nm, ph.data_file_path,\n' +
    '              ph.longtitude, ph.latitude, s.sign_img_file_path, pm.prj_nm, \n' +
    '              ST_AsText(ST_transform(ST_SetSRID(point, 32652), 4326)) point, count(*) OVER() total \n' +
    '            FROM obj_rs o\n' +
    '            LEFT JOIN tc_trffc_sign s ON o.cd = s.sign_id \n' +
    '            left join photo_mng ph on o.photo_id = ph.photo_id \n' +
    '            left join project_mng pm on o.prj_id = pm.prj_id  ORDER BY o.obj_rs_id DESC , obj_rs_id  LIMIT $1 OFFSET $2',
  values: [ 14, 0 ]
}
2023-09-21 09:14:39 [DEBUG] - [func]gridUtil.convertGridData()
2023-09-21 09:14:41 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:41 [DEBUG] - GET : /api/data/read/obj?filter_type=prj_nm&filter_value=2023_Geo148_%EC%96%91%EC%A3%BC%EC%8B%9C%20%EC%9E%A5%ED%9D%A5%EB%A9%B4-1_20230712&perPage=14&page=1&_=1695255279156
2023-09-21 09:14:41 [DEBUG] - [func]gridUtil.getDefaultInfo()
2023-09-21 09:14:41 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: 'prj_nm',
  filter_value: '2023_Geo148_양주시 장흥면-1_20230712'
}
2023-09-21 09:14:41 [DEBUG] - [func]prjDB.getReadDataList()
2023-09-21 09:14:41 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: 'prj_nm',
  filter_value: '2023_Geo148_양주시 장흥면-1_20230712'
}
2023-09-21 09:14:41 [DEBUG] - 'obj_rs_id'
2023-09-21 09:14:41 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:41 [DEBUG] - {
  text: 'SELECT o.*, s.sign_nm, o.updt_yn, ph.org_file_nm, ph.data_file_path,\n' +
    '              ph.longtitude, ph.latitude, s.sign_img_file_path, pm.prj_nm, \n' +
    '              ST_AsText(ST_transform(ST_SetSRID(point, 32652), 4326)) point, count(*) OVER() total \n' +
    '            FROM obj_rs o\n' +
    '            LEFT JOIN tc_trffc_sign s ON o.cd = s.sign_id \n' +
    '            left join photo_mng ph on o.photo_id = ph.photo_id \n' +
    '            left join project_mng pm on o.prj_id = pm.prj_id  WHERE prj_nm ILIKE $1 ORDER BY o.obj_rs_id DESC , obj_rs_id  LIMIT $2 OFFSET $3',
  values: [ '%2023_Geo148_양주시 장흥면-1_20230712%', 14, 0 ]
}
2023-09-21 09:14:41 [DEBUG] - [func]gridUtil.convertGridData()
2023-09-21 09:14:43 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:45 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:14:45 [DEBUG] - GET : /api/data/read/obj?page=1&perPage=14&filter_type=prj_nm&filter_value=2023_Geo148_%EC%96%91%EC%A3%BC%EC%8B%9C%20%EC%9E%A5%ED%9D%A5%EB%A9%B4-1_20230712&curItemId=34522&_=1695255279157
2023-09-21 09:14:45 [DEBUG] - [func]gridUtil.getDefaultInfo()
2023-09-21 09:14:45 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: 'prj_nm',
  filter_value: '2023_Geo148_양주시 장흥면-1_20230712'
}
2023-09-21 09:14:45 [DEBUG] - [func]prjDB.getReadDataList()
2023-09-21 09:14:45 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: 'prj_nm',
  filter_value: '2023_Geo148_양주시 장흥면-1_20230712'
}
2023-09-21 09:14:45 [DEBUG] - 'obj_rs_id'
2023-09-21 09:14:45 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:14:45 [DEBUG] - {
  text: 'SELECT o.*, s.sign_nm, o.updt_yn, ph.org_file_nm, ph.data_file_path,\n' +
    '              ph.longtitude, ph.latitude, s.sign_img_file_path, pm.prj_nm, \n' +
    '              ST_AsText(ST_transform(ST_SetSRID(point, 32652), 4326)) point, count(*) OVER() total \n' +
    '            FROM obj_rs o\n' +
    '            LEFT JOIN tc_trffc_sign s ON o.cd = s.sign_id \n' +
    '            left join photo_mng ph on o.photo_id = ph.photo_id \n' +
    '            left join project_mng pm on o.prj_id = pm.prj_id  WHERE prj_nm ILIKE $1 ORDER BY o.obj_rs_id DESC , obj_rs_id  LIMIT $2 OFFSET $3',
  values: [ '%2023_Geo148_양주시 장흥면-1_20230712%', 14, 0 ]
}
2023-09-21 09:14:45 [DEBUG] - [func]gridUtil.convertGridData()
2023-09-21 09:22:56 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:22:56 [DEBUG] - GET : /map/list/map
2023-09-21 09:22:56 [DEBUG] - [func]prjDB.getPrjList()
2023-09-21 09:22:56 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:22:56 [DEBUG] - { text: 'SELECT * FROM project_mng p ORDER BY p.prj_id', values: [] }
2023-09-21 09:22:56 [DEBUG] - [func]sidoDB.getSidoList()
2023-09-21 09:22:56 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:22:56 [DEBUG] - {
  text: 'SELECT id, ctprvn_cd, ctp_eng_nm, ctp_kor_nm FROM korea_map_sido sido ORDER BY sido.id',
  values: []
}
2023-09-21 09:22:56 [DEBUG] - [func]sigDB.getSigList()
2023-09-21 09:22:56 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:22:56 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig ORDER BY sig.id',
  values: []
}
2023-09-21 09:22:56 [DEBUG] - [func]trffcSignTyDB.getTrffcSignTyList()
2023-09-21 09:22:56 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:22:56 [DEBUG] - {
  text: 'SELECT * FROM tc_trffc_sign_ty ttst WHERE ttst.trffc_sign_ty_id not in ($1, $2, $3) ORDER BY ttst.trffc_sign_ty_id',
  values: [ '4', '5', '6' ]
}
2023-09-21 09:22:56 [DEBUG] - [func]trffcSignDB.getTrffcSignList()
2023-09-21 09:22:56 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:22:56 [DEBUG] - {
  text: 'SELECT * FROM tc_trffc_sign tts ORDER BY tts.sign_ty_id',
  values: []
}
2023-09-21 09:22:57 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:22:57 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:22:57 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:22:57 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 09:22:57 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 09:22:57 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:22:57 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 09:22:57 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 09:23:04 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:23:04 [DEBUG] - GET : /map/list/map
2023-09-21 09:23:04 [DEBUG] - [func]prjDB.getPrjList()
2023-09-21 09:23:04 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:23:04 [DEBUG] - { text: 'SELECT * FROM project_mng p ORDER BY p.prj_id', values: [] }
2023-09-21 09:23:04 [DEBUG] - [func]sidoDB.getSidoList()
2023-09-21 09:23:04 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:23:04 [DEBUG] - {
  text: 'SELECT id, ctprvn_cd, ctp_eng_nm, ctp_kor_nm FROM korea_map_sido sido ORDER BY sido.id',
  values: []
}
2023-09-21 09:23:04 [DEBUG] - [func]sigDB.getSigList()
2023-09-21 09:23:04 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:23:04 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig ORDER BY sig.id',
  values: []
}
2023-09-21 09:23:04 [DEBUG] - [func]trffcSignTyDB.getTrffcSignTyList()
2023-09-21 09:23:04 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:23:04 [DEBUG] - {
  text: 'SELECT * FROM tc_trffc_sign_ty ttst WHERE ttst.trffc_sign_ty_id not in ($1, $2, $3) ORDER BY ttst.trffc_sign_ty_id',
  values: [ '4', '5', '6' ]
}
2023-09-21 09:23:04 [DEBUG] - [func]trffcSignDB.getTrffcSignList()
2023-09-21 09:23:04 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:23:04 [DEBUG] - {
  text: 'SELECT * FROM tc_trffc_sign tts ORDER BY tts.sign_ty_id',
  values: []
}
2023-09-21 09:23:04 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:23:04 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:23:04 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:23:04 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 09:23:04 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 09:23:04 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:23:04 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 09:23:04 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 09:23:38 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:23:38 [DEBUG] - { text: "select current_setting('timezone'), now()", values: [] }
2023-09-21 09:23:38 [INFO] - Argos Platform : win32
2023-09-21 09:23:38 [INFO] - config.server_port : 3001
2023-09-21 09:23:38 [DEBUG] - route_loader.init called.
2023-09-21 09:23:38 [INFO] - Routing Moudle count : 71
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : / -- method : ./page/route_root:getRoot
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /login -- method : ./page/route_root:getLogin
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /signup -- method : ./page/route_account:getSignup
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /account/list -- method : ./page/route_account:getAccountList
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /account/my -- method : ./page/route_account:getAccountMy
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /account/view/:email -- method : ./page/route_account:getAccountView
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /equip/list/vehicle -- method : ./page/route_equip:getListVh
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /equip/list/sensor -- method : ./page/route_equip:getListSens
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /equip/add/vehicle -- method : ./page/route_equip:getAddVehicle
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /equip/add/sensor -- method : ./page/route_equip:getAddSensor
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /equip/vehicle/:vhid -- method : ./page/route_equip:getViewVh
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /equip/sens/:sensid -- method : ./page/route_equip:getViewSens
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /map/list/map -- method : ./page/route_map:getListMap
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /data/list/prj -- method : ./page/route_data:getListPrj
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /data/add/prj -- method : ./page/route_data:getAddPrj
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /data/list/cam -- method : ./page/route_data:getListDataCam
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /data/list/lidar -- method : ./page/route_data:getListDataLidar
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /data/list/obj -- method : ./page/route_data:getListObj
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /data/view/prj/:prjid -- method : ./page/route_data:getViewPrj
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /data/view/data/:dataid -- method : ./page/route_data:getViewData
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /stat/dashboard -- method : ./page/route_stat:getDashboard
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /doc/:docname -- method : ./page/route_docs:getDocuemnt
2023-09-21 09:23:38 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/account/read -- method : ./api/api_account:readUserList
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:uploadUserPhoto
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:postUpdateUser
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/account/changepw -- method : ./api/api_account:postChangePw
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/account/reset -- method : ./api/api_account:postUserReset
2023-09-21 09:23:38 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 09:23:38 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object] , targetPath : , originalName : false
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:postAddVehicle
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:postUpdateVehicle
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/equip/read/vh -- method : ./api/api_equip:readVhList
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:postAddSens
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/equip/read/sens -- method : ./api/api_equip:readSensList
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:postUpdateSens
2023-09-21 09:23:38 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object],[object Object] , targetPath : , originalName : true
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/data/add/prj -- method : ./api/api_data:postAddPrj
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/data/delete/prj -- method : ./api/api_data:postDelPrj
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/data/update/prj -- method : ./api/api_data:postUpdatePrj
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:uploadPrjData
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:postUploadPrjDataProc
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/data/read/prj -- method : ./api/api_data:readPrjList
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/data/read/cam -- method : ./api/api_data:readDataCamList
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/data/read/lidar -- method : ./api/api_data:readDataLidarList
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/data/read/obj -- method : ./api/api_obj:readObjList
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/data/package/:prjid/:dataty -- method : ./api/api_data:getDataPackage
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/data/down/:dataty/:dataid -- method : ./api/api_data:getDataDownload
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/data/path/:prjid -- method : ./api/api_data:getDataPath
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/data/lidar/img -- method : ./api/api_data:getLidarImg
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/data/proc/start -- method : ./api/api_data:startDataProc
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/map/sig -- method : ./api/api_map:postSigBySido
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapPrj -- method : ./api/api_map:postSearchMapByPrj
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapRegion -- method : ./api/api_map:postSearchMapByRegion
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/stat/data-total -- method : ./api/api_stat:getTotalData
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/stat/prj-status -- method : ./api/api_stat:getProjectStauts
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/stat/data-period -- method : ./api/api_stat:getDataPeriod
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/stat/equip -- method : ./api/api_stat:getDataEquipStatus
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/stat/object -- method : ./api/api_stat:getObjStatus
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/auth/token -- method : ./api/api_rest:postAuthTokken
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/equip/list -- method : ./api/api_rest:getEquipList
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/project/add -- method : ./api/api_rest:postPrjAdd
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/data/meta -- method : ./api/api_rest:postMetaData
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/project/scan/:prjid -- method : ./api/api_rest:getPrjScan
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/project/data/:prjid -- method : ./api/api_rest:getPrjData
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/project/sync -- method : ./api/api_rest:postPrjSync
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/project/clone -- method : ./api/api_rest:postClonePrj
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/data/finish -- method : ./api/api_rest:postFinishData
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/data/prc-finish -- method : ./api/api_rest:postFinishPrcData
2023-09-21 09:23:38 [DEBUG] - Router setted - type : get -- path : /api/debug/token -- method : ./api/api_debug:getDebugToken
2023-09-21 09:23:38 [DEBUG] - Router setted - type : post -- path : /api/debug/update-pnu -- method : ./api/api_debug:postUpdatePnu
2023-09-21 09:23:38 [DEBUG] - config/passport called.
2023-09-21 09:23:38 [DEBUG] - local passport setted.
2023-09-21 09:23:38 [DEBUG] - init user_passport
2023-09-21 09:23:38 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 09:23:38 [DEBUG] - [func]codeUtil.init()
2023-09-21 09:23:38 [DEBUG] - [msg] loadUserType...
2023-09-21 09:23:38 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:23:38 [DEBUG] - { text: 'SELECT *  FROM tc_user_ty ORDER BY user_ty_id' }
2023-09-21 09:23:38 [DEBUG] - [msg] loadUserStatus...
2023-09-21 09:23:38 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:23:38 [DEBUG] - { text: 'SELECT *  FROM tc_user_cond ORDER BY user_cond_id' }
2023-09-21 09:23:38 [DEBUG] - [msg] loadPnuCode...
2023-09-21 09:23:38 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:23:38 [DEBUG] - { text: 'SELECT *  FROM tc_pnu_sigungu ORDER BY sido_cd, sigungu_cd' }
2023-09-21 09:23:38 [DEBUG] - [msg] loadCondCode...
2023-09-21 09:23:38 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:23:38 [DEBUG] - { text: 'SELECT *  FROM tc_vh_cond' }
2023-09-21 09:23:38 [DEBUG] - [msg] loadSensCode...
2023-09-21 09:23:38 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:23:38 [DEBUG] - { text: 'SELECT *  FROM tc_sens_ty' }
2023-09-21 09:23:38 [DEBUG] - [msg] loadWeatherCode...
2023-09-21 09:23:38 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:23:38 [DEBUG] - { text: 'SELECT *  FROM tc_weather order by weather_cd' }
2023-09-21 09:23:38 [DEBUG] - updateUtil.checkUpdate
2023-09-21 09:23:38 [INFO] - Express SSL server listening on port 443
2023-09-21 09:23:38 [INFO] - Express server listening on port 3001
2023-09-21 09:23:38 [DEBUG] - [ { current_setting: 'Asia/Seoul', now: 2023-09-21T00:23:39.156Z } ]
2023-09-21 09:26:02 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:26:02 [DEBUG] - GET : /map/list/map
2023-09-21 09:26:02 [DEBUG] - [func]prjDB.getPrjList()
2023-09-21 09:26:02 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:26:02 [DEBUG] - { text: 'SELECT * FROM project_mng p ORDER BY p.prj_id', values: [] }
2023-09-21 09:26:02 [DEBUG] - [func]sidoDB.getSidoList()
2023-09-21 09:26:02 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:26:02 [DEBUG] - {
  text: 'SELECT id, ctprvn_cd, ctp_eng_nm, ctp_kor_nm FROM korea_map_sido sido ORDER BY sido.id',
  values: []
}
2023-09-21 09:26:02 [DEBUG] - [func]sigDB.getSigList()
2023-09-21 09:26:02 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:26:02 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig ORDER BY sig.id',
  values: []
}
2023-09-21 09:26:02 [DEBUG] - [func]trffcSignTyDB.getTrffcSignTyList()
2023-09-21 09:26:02 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:26:02 [DEBUG] - {
  text: 'SELECT * FROM tc_trffc_sign_ty ttst WHERE ttst.trffc_sign_ty_id not in ($1, $2, $3) ORDER BY ttst.trffc_sign_ty_id',
  values: [ '4', '5', '6' ]
}
2023-09-21 09:26:02 [DEBUG] - [func]trffcSignDB.getTrffcSignList()
2023-09-21 09:26:02 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:26:02 [DEBUG] - {
  text: 'SELECT * FROM tc_trffc_sign tts ORDER BY tts.sign_ty_id',
  values: []
}
2023-09-21 09:26:02 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:26:02 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:26:02 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:26:02 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 09:26:02 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 09:26:02 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:26:02 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 09:26:02 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 09:27:36 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:27:36 [DEBUG] - POST : /api/map/searchMapPrj : - postSearchMapByPrj()
2023-09-21 09:27:36 [DEBUG] - [func]objDB.getObjListByPrj()
2023-09-21 09:27:36 [DEBUG] - [
  '1',   '2',  '3',  '4',  '5',  '6',  '7',   '8',   '9',
  '10',  '11', '12', '13', '14', '15', '16',  '17',  '18',
  '19',  '20', '21', '22', '24', '25', '26',  '27',  '28',
  '29',  '30', '31', '32', '33', '34', '35',  '36',  '37',
  '38',  '39', '40', '41', '42', '43', '44',  '45',  '46',
  '47',  '48', '49', '50', '51', '52', '53',  '54',  '55',
  '56',  '57', '58', '59', '60', '61', '62',  '63',  '64',
  '65',  '66', '67', '68', '69', '70', '71',  '73',  '74',
  '75',  '76', '77', '78', '79', '80', '81',  '82',  '83',
  '84',  '85', '87', '88', '89', '90', '91',  '92',  '93',
  '94',  '95', '96', '97', '98', '99', '100', '101', '102',
  '103',
  ... 2 more items
]
2023-09-21 09:27:36 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:27:36 [DEBUG] - {
  text: "SELECT obj.obj_rs_id, obj.photo_id, obj.cd, obj.point, obj.prj_id, obj.check_yn, obj.updt_yn, st_x(st_transform(point, 4326)) naverX, st_y(st_transform(point, 4326)) naverY, tts.sign_ty_id, prj.prj_nm, tts.sign_nm, ttst.trffc_sign_ty_nm FROM obj_rs obj  LEFT jOIN tc_trffc_sign tts ON obj.cd = tts.sign_id LEFT JOIN project_mng prj ON obj.prj_id = prj.prj_id LEFT JOIN tc_trffc_sign_ty ttst ON tts.sign_ty_id = ttst.trffc_sign_ty_id  WHERE obj.updt_yn in (1,2,3,4) and obj.prj_id in (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105) and obj.cd in ('119', '101', '102', '104', '105', '139', '138', '135', '133', '129', '126', '123', '117', '114', '111', '108', '109', '120', '118', '116', '113', '110', '107', '103', '106', '141', '140', '136', '134', '1382', '137', '132', '115', '130', '112', '128', '127', '125', '124', '122', '121');",
  values: []
}
2023-09-21 09:37:07 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:37:07 [DEBUG] - GET : /data/list/prj
2023-09-21 09:37:07 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:37:07 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:37:07 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 09:37:07 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 09:37:07 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:37:07 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 09:37:07 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 09:37:07 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:37:07 [DEBUG] - GET : /api/data/read/prj?filter_type=p.prj_id&filter_value=&page=1&perPage=14&_=1695256627594
2023-09-21 09:37:07 [DEBUG] - [func]gridUtil.getDefaultInfo()
2023-09-21 09:37:07 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'prj_id',
  sortAscending: undefined,
  filter_type: 'p.prj_id',
  filter_value: ''
}
2023-09-21 09:37:07 [DEBUG] - [func]prjDB.getReadPrjList()
2023-09-21 09:37:07 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'prj_id',
  sortAscending: undefined,
  filter_type: 'p.prj_id',
  filter_value: ''
}
2023-09-21 09:37:07 [DEBUG] - undefined
2023-09-21 09:37:07 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:37:07 [DEBUG] - {
  text: 'SELECT p.*, v.vh_nm, s.sens_nm cam_sens_nm, s2.sens_nm lidar_sens_nm, s3.sens_nm sens_set_nm, u.flnm, t.prj_stts_nm, pnu.sido_nm, pnu.sigungu_nm,             count(*) OVER() total             FROM project_mng p LEFT JOIN vh_mng v  ON p.vh_id = v.vh_id LEFT JOIN sens_mng s  ON p.cam_sens_id = s.sens_id LEFT JOIN sens_mng s2  ON p.lidar_sens_id = s2.sens_id LEFT JOIN sens_mng s3  ON p.sens_set_id = s3.sens_id LEFT JOIN sv_user_mng u  ON p.sv_user_id = u.sv_user_id LEFT JOIN  tc_prj_status t ON p.prj_stts_cd = t.prj_stts_cd LEFT JOIN  tc_pnu_sigungu pnu ON p.pnu_cd = pnu.pnu_cd ORDER BY prj_id DESC  LIMIT $1 OFFSET $2',
  values: [ 14, 0 ]
}
2023-09-21 09:37:07 [DEBUG] - [func]gridUtil.convertGridData()
2023-09-21 09:37:09 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:37:09 [DEBUG] - GET : /data/list/cam
2023-09-21 09:37:09 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:37:09 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:37:09 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 09:37:09 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 09:37:09 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:37:09 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 09:37:09 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 09:37:09 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:37:09 [DEBUG] - GET : /api/data/read/cam?filter_type=p.prj_id&filter_value=&page=1&perPage=14&_=1695256629160
2023-09-21 09:37:09 [DEBUG] - [func]gridUtil.getDefaultInfo()
2023-09-21 09:37:09 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'photo_id',
  sortAscending: undefined,
  filter_type: 'p.prj_id',
  filter_value: ''
}
2023-09-21 09:37:09 [DEBUG] - [func]dataCamDB.getReadDataList()
2023-09-21 09:37:09 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'photo_id',
  sortAscending: undefined,
  filter_type: 'p.prj_id',
  filter_value: ''
}
2023-09-21 09:37:09 [DEBUG] - 'photo_id'
2023-09-21 09:37:09 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:37:09 [DEBUG] - {
  text: 'SELECT d.*, p.prj_nm, r.data_reg_ty_nm,              count(*) OVER() total             FROM photo_mng d LEFT JOIN project_mng p  ON d.prj_id = p.prj_id LEFT JOIN tc_data_reg_ty r  ON d.data_reg_ty_id = r.data_reg_ty_id  ORDER BY photo_id DESC  LIMIT $1 OFFSET $2',
  values: [ 14, 0 ]
}
2023-09-21 09:37:09 [DEBUG] - [func]gridUtil.convertGridData()
2023-09-21 09:37:10 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:37:12 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 09:37:12 [DEBUG] - GET : /api/data/read/cam?page=1&perPage=14&curItemId=219222&_=1695256629161
2023-09-21 09:37:12 [DEBUG] - [func]gridUtil.getDefaultInfo()
2023-09-21 09:37:12 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'photo_id',
  sortAscending: undefined,
  filter_type: undefined,
  filter_value: undefined
}
2023-09-21 09:37:12 [DEBUG] - [func]dataCamDB.getReadDataList()
2023-09-21 09:37:12 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'photo_id',
  sortAscending: undefined,
  filter_type: undefined,
  filter_value: undefined
}
2023-09-21 09:37:12 [DEBUG] - 'photo_id'
2023-09-21 09:37:12 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 09:37:12 [DEBUG] - {
  text: 'SELECT d.*, p.prj_nm, r.data_reg_ty_nm,              count(*) OVER() total             FROM photo_mng d LEFT JOIN project_mng p  ON d.prj_id = p.prj_id LEFT JOIN tc_data_reg_ty r  ON d.data_reg_ty_id = r.data_reg_ty_id  ORDER BY photo_id DESC  LIMIT $1 OFFSET $2',
  values: [ 14, 0 ]
}
2023-09-21 09:37:13 [DEBUG] - [func]gridUtil.convertGridData()
2023-09-21 11:07:18 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 11:07:18 [DEBUG] - GET : /map/list/map
2023-09-21 11:07:18 [DEBUG] - [func]prjDB.getPrjList()
2023-09-21 11:07:18 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:07:18 [DEBUG] - { text: 'SELECT * FROM project_mng p ORDER BY p.prj_id', values: [] }
2023-09-21 11:07:18 [DEBUG] - [func]sidoDB.getSidoList()
2023-09-21 11:07:18 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:07:18 [DEBUG] - {
  text: 'SELECT id, ctprvn_cd, ctp_eng_nm, ctp_kor_nm FROM korea_map_sido sido ORDER BY sido.id',
  values: []
}
2023-09-21 11:07:18 [DEBUG] - [func]sigDB.getSigList()
2023-09-21 11:07:18 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:07:18 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig ORDER BY sig.id',
  values: []
}
2023-09-21 11:07:18 [DEBUG] - [func]trffcSignTyDB.getTrffcSignTyList()
2023-09-21 11:07:18 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:07:18 [DEBUG] - {
  text: 'SELECT * FROM tc_trffc_sign_ty ttst WHERE ttst.trffc_sign_ty_id not in ($1, $2, $3) ORDER BY ttst.trffc_sign_ty_id',
  values: [ '4', '5', '6' ]
}
2023-09-21 11:07:18 [DEBUG] - [func]trffcSignDB.getTrffcSignList()
2023-09-21 11:07:18 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:07:18 [DEBUG] - {
  text: 'SELECT * FROM tc_trffc_sign tts ORDER BY tts.sign_ty_id',
  values: []
}
2023-09-21 11:07:18 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 11:07:18 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 11:07:18 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 11:07:18 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 11:07:18 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 11:07:18 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:07:18 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 11:07:18 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 11:31:00 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:31:00 [DEBUG] - { text: "select current_setting('timezone'), now()", values: [] }
2023-09-21 11:31:00 [INFO] - Argos Platform : win32
2023-09-21 11:31:00 [INFO] - config.server_port : 3001
2023-09-21 11:31:00 [DEBUG] - route_loader.init called.
2023-09-21 11:31:00 [INFO] - Routing Moudle count : 71
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : / -- method : ./page/route_root:getRoot
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /login -- method : ./page/route_root:getLogin
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /signup -- method : ./page/route_account:getSignup
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /account/list -- method : ./page/route_account:getAccountList
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /account/my -- method : ./page/route_account:getAccountMy
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /account/view/:email -- method : ./page/route_account:getAccountView
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /equip/list/vehicle -- method : ./page/route_equip:getListVh
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /equip/list/sensor -- method : ./page/route_equip:getListSens
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /equip/add/vehicle -- method : ./page/route_equip:getAddVehicle
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /equip/add/sensor -- method : ./page/route_equip:getAddSensor
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /equip/vehicle/:vhid -- method : ./page/route_equip:getViewVh
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /equip/sens/:sensid -- method : ./page/route_equip:getViewSens
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /map/list/map -- method : ./page/route_map:getListMap
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /data/list/prj -- method : ./page/route_data:getListPrj
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /data/add/prj -- method : ./page/route_data:getAddPrj
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /data/list/cam -- method : ./page/route_data:getListDataCam
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /data/list/lidar -- method : ./page/route_data:getListDataLidar
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /data/list/obj -- method : ./page/route_data:getListObj
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /data/view/prj/:prjid -- method : ./page/route_data:getViewPrj
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /data/view/data/:dataid -- method : ./page/route_data:getViewData
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /stat/dashboard -- method : ./page/route_stat:getDashboard
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /doc/:docname -- method : ./page/route_docs:getDocuemnt
2023-09-21 11:31:00 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/account/read -- method : ./api/api_account:readUserList
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:uploadUserPhoto
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:postUpdateUser
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/account/changepw -- method : ./api/api_account:postChangePw
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/account/reset -- method : ./api/api_account:postUserReset
2023-09-21 11:31:00 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 11:31:00 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object] , targetPath : , originalName : false
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:postAddVehicle
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:postUpdateVehicle
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/equip/read/vh -- method : ./api/api_equip:readVhList
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:postAddSens
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/equip/read/sens -- method : ./api/api_equip:readSensList
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:postUpdateSens
2023-09-21 11:31:00 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object],[object Object] , targetPath : , originalName : true
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/data/add/prj -- method : ./api/api_data:postAddPrj
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/data/delete/prj -- method : ./api/api_data:postDelPrj
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/data/update/prj -- method : ./api/api_data:postUpdatePrj
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:uploadPrjData
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:postUploadPrjDataProc
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/data/read/prj -- method : ./api/api_data:readPrjList
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/data/read/cam -- method : ./api/api_data:readDataCamList
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/data/read/lidar -- method : ./api/api_data:readDataLidarList
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/data/read/obj -- method : ./api/api_obj:readObjList
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/data/package/:prjid/:dataty -- method : ./api/api_data:getDataPackage
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/data/down/:dataty/:dataid -- method : ./api/api_data:getDataDownload
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/data/path/:prjid -- method : ./api/api_data:getDataPath
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/data/lidar/img -- method : ./api/api_data:getLidarImg
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/data/proc/start -- method : ./api/api_data:startDataProc
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/map/sig -- method : ./api/api_map:postSigBySido
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapPrj -- method : ./api/api_map:postSearchMapByPrj
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapRegion -- method : ./api/api_map:postSearchMapByRegion
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/stat/data-total -- method : ./api/api_stat:getTotalData
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/stat/prj-status -- method : ./api/api_stat:getProjectStauts
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/stat/data-period -- method : ./api/api_stat:getDataPeriod
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/stat/equip -- method : ./api/api_stat:getDataEquipStatus
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/stat/object -- method : ./api/api_stat:getObjStatus
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/auth/token -- method : ./api/api_rest:postAuthTokken
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/equip/list -- method : ./api/api_rest:getEquipList
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/project/add -- method : ./api/api_rest:postPrjAdd
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/data/meta -- method : ./api/api_rest:postMetaData
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/project/scan/:prjid -- method : ./api/api_rest:getPrjScan
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/project/data/:prjid -- method : ./api/api_rest:getPrjData
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/project/sync -- method : ./api/api_rest:postPrjSync
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/project/clone -- method : ./api/api_rest:postClonePrj
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/data/finish -- method : ./api/api_rest:postFinishData
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/data/prc-finish -- method : ./api/api_rest:postFinishPrcData
2023-09-21 11:31:00 [DEBUG] - Router setted - type : get -- path : /api/debug/token -- method : ./api/api_debug:getDebugToken
2023-09-21 11:31:00 [DEBUG] - Router setted - type : post -- path : /api/debug/update-pnu -- method : ./api/api_debug:postUpdatePnu
2023-09-21 11:31:00 [DEBUG] - config/passport called.
2023-09-21 11:31:00 [DEBUG] - local passport setted.
2023-09-21 11:31:00 [DEBUG] - init user_passport
2023-09-21 11:31:00 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 11:31:00 [DEBUG] - [func]codeUtil.init()
2023-09-21 11:31:00 [DEBUG] - [msg] loadUserType...
2023-09-21 11:31:00 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:31:00 [DEBUG] - { text: 'SELECT *  FROM tc_user_ty ORDER BY user_ty_id' }
2023-09-21 11:31:00 [DEBUG] - [msg] loadUserStatus...
2023-09-21 11:31:00 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:31:00 [DEBUG] - { text: 'SELECT *  FROM tc_user_cond ORDER BY user_cond_id' }
2023-09-21 11:31:00 [DEBUG] - [msg] loadPnuCode...
2023-09-21 11:31:00 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:31:00 [DEBUG] - { text: 'SELECT *  FROM tc_pnu_sigungu ORDER BY sido_cd, sigungu_cd' }
2023-09-21 11:31:00 [DEBUG] - [msg] loadCondCode...
2023-09-21 11:31:00 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:31:00 [DEBUG] - { text: 'SELECT *  FROM tc_vh_cond' }
2023-09-21 11:31:00 [DEBUG] - [msg] loadSensCode...
2023-09-21 11:31:00 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:31:00 [DEBUG] - { text: 'SELECT *  FROM tc_sens_ty' }
2023-09-21 11:31:00 [DEBUG] - [msg] loadWeatherCode...
2023-09-21 11:31:00 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:31:00 [DEBUG] - { text: 'SELECT *  FROM tc_weather order by weather_cd' }
2023-09-21 11:31:00 [DEBUG] - updateUtil.checkUpdate
2023-09-21 11:31:00 [INFO] - Express SSL server listening on port 443
2023-09-21 11:31:00 [INFO] - Express server listening on port 3001
2023-09-21 11:31:00 [DEBUG] - [ { current_setting: 'Asia/Seoul', now: 2023-09-21T02:31:01.395Z } ]
2023-09-21 11:31:02 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 11:31:02 [DEBUG] - GET : /map/list/map
2023-09-21 11:31:02 [DEBUG] - [func]prjDB.getPrjList()
2023-09-21 11:31:02 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:31:02 [DEBUG] - { text: 'SELECT * FROM project_mng p ORDER BY p.prj_id', values: [] }
2023-09-21 11:31:02 [DEBUG] - [func]sidoDB.getSidoList()
2023-09-21 11:31:02 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:31:02 [DEBUG] - {
  text: 'SELECT id, ctprvn_cd, ctp_eng_nm, ctp_kor_nm FROM korea_map_sido sido ORDER BY sido.id',
  values: []
}
2023-09-21 11:31:02 [DEBUG] - [func]sigDB.getSigList()
2023-09-21 11:31:02 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:31:02 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig ORDER BY sig.id',
  values: []
}
2023-09-21 11:31:02 [DEBUG] - [func]trffcSignTyDB.getTrffcSignTyList()
2023-09-21 11:31:02 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:31:02 [DEBUG] - {
  text: 'SELECT * FROM tc_trffc_sign_ty ttst WHERE ttst.trffc_sign_ty_id not in ($1, $2, $3) ORDER BY ttst.trffc_sign_ty_id',
  values: [ '4', '5', '6' ]
}
2023-09-21 11:31:02 [DEBUG] - [func]trffcSignDB.getTrffcSignList()
2023-09-21 11:31:02 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:31:02 [DEBUG] - {
  text: 'SELECT * FROM tc_trffc_sign tts ORDER BY tts.sign_ty_id',
  values: []
}
2023-09-21 11:31:02 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 11:31:02 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 11:31:02 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 11:31:02 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 11:31:02 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 11:31:02 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:31:02 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 11:31:02 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 11:31:05 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 11:31:05 [DEBUG] - POST : /api/map/searchMapPrj : - postSearchMapByPrj()
2023-09-21 11:31:05 [DEBUG] - [func]objDB.getObjListByPrj()
2023-09-21 11:31:05 [DEBUG] - [
  '1',   '2',  '3',  '4',  '5',  '6',  '7',   '8',   '9',
  '10',  '11', '12', '13', '14', '15', '16',  '17',  '18',
  '19',  '20', '21', '22', '24', '25', '26',  '27',  '28',
  '29',  '30', '31', '32', '33', '34', '35',  '36',  '37',
  '38',  '39', '40', '41', '42', '43', '44',  '45',  '46',
  '47',  '48', '49', '50', '51', '52', '53',  '54',  '55',
  '56',  '57', '58', '59', '60', '61', '62',  '63',  '64',
  '65',  '66', '67', '68', '69', '70', '71',  '73',  '74',
  '75',  '76', '77', '78', '79', '80', '81',  '82',  '83',
  '84',  '85', '87', '88', '89', '90', '91',  '92',  '93',
  '94',  '95', '96', '97', '98', '99', '100', '101', '102',
  '103',
  ... 2 more items
]
2023-09-21 11:31:05 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 11:31:05 [DEBUG] - {
  text: "SELECT obj.obj_rs_id, obj.photo_id, obj.cd, obj.point, obj.prj_id, obj.check_yn, obj.updt_yn, st_x(st_transform(point, 4326)) naverX, st_y(st_transform(point, 4326)) naverY, tts.sign_ty_id, prj.prj_nm, tts.sign_nm, ttst.trffc_sign_ty_nm FROM obj_rs obj  LEFT jOIN tc_trffc_sign tts ON obj.cd = tts.sign_id LEFT JOIN project_mng prj ON obj.prj_id = prj.prj_id LEFT JOIN tc_trffc_sign_ty ttst ON tts.sign_ty_id = ttst.trffc_sign_ty_id  WHERE obj.updt_yn in (1,2,3,4) and obj.prj_id in (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105) and obj.cd in ('119', '101', '102', '104', '105', '139', '138', '135', '133', '129', '126', '123', '117', '114', '111', '108', '109', '120', '118', '116', '113', '110', '107', '103', '106', '141', '140', '136', '134', '1382', '137', '132', '115', '130', '112', '128', '127', '125', '124', '122', '121');",
  values: []
}
2023-09-21 13:08:58 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:08:58 [DEBUG] - GET : /data/list/prj
2023-09-21 13:08:58 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:08:58 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:08:58 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 13:08:58 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 13:08:58 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:08:58 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 13:08:58 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 13:08:58 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:08:58 [DEBUG] - GET : /api/data/read/prj?filter_type=p.prj_id&filter_value=&page=1&perPage=14&_=1695269338187
2023-09-21 13:08:58 [DEBUG] - [func]gridUtil.getDefaultInfo()
2023-09-21 13:08:58 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'prj_id',
  sortAscending: undefined,
  filter_type: 'p.prj_id',
  filter_value: ''
}
2023-09-21 13:08:58 [DEBUG] - [func]prjDB.getReadPrjList()
2023-09-21 13:08:58 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'prj_id',
  sortAscending: undefined,
  filter_type: 'p.prj_id',
  filter_value: ''
}
2023-09-21 13:08:58 [DEBUG] - undefined
2023-09-21 13:08:58 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:08:58 [DEBUG] - {
  text: 'SELECT p.*, v.vh_nm, s.sens_nm cam_sens_nm, s2.sens_nm lidar_sens_nm, s3.sens_nm sens_set_nm, u.flnm, t.prj_stts_nm, pnu.sido_nm, pnu.sigungu_nm,             count(*) OVER() total             FROM project_mng p LEFT JOIN vh_mng v  ON p.vh_id = v.vh_id LEFT JOIN sens_mng s  ON p.cam_sens_id = s.sens_id LEFT JOIN sens_mng s2  ON p.lidar_sens_id = s2.sens_id LEFT JOIN sens_mng s3  ON p.sens_set_id = s3.sens_id LEFT JOIN sv_user_mng u  ON p.sv_user_id = u.sv_user_id LEFT JOIN  tc_prj_status t ON p.prj_stts_cd = t.prj_stts_cd LEFT JOIN  tc_pnu_sigungu pnu ON p.pnu_cd = pnu.pnu_cd ORDER BY prj_id DESC  LIMIT $1 OFFSET $2',
  values: [ 14, 0 ]
}
2023-09-21 13:08:58 [DEBUG] - [func]gridUtil.convertGridData()
2023-09-21 13:08:59 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:08:59 [DEBUG] - GET : /data/list/obj
2023-09-21 13:08:59 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:08:59 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:08:59 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 13:08:59 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 13:08:59 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:08:59 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 13:08:59 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 13:08:59 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:08:59 [DEBUG] - GET : /api/data/read/obj?filter_type=o.obj_rs_id&filter_value=&page=1&perPage=14&_=1695269339135
2023-09-21 13:08:59 [DEBUG] - [func]gridUtil.getDefaultInfo()
2023-09-21 13:08:59 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: 'o.obj_rs_id',
  filter_value: ''
}
2023-09-21 13:08:59 [DEBUG] - [func]prjDB.getReadDataList()
2023-09-21 13:08:59 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: 'o.obj_rs_id',
  filter_value: ''
}
2023-09-21 13:08:59 [DEBUG] - 'obj_rs_id'
2023-09-21 13:08:59 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:08:59 [DEBUG] - {
  text: 'SELECT o.*, s.sign_nm, o.updt_yn, ph.org_file_nm, ph.data_file_path,\n' +
    '              ph.longtitude, ph.latitude, s.sign_img_file_path, pm.prj_nm, \n' +
    '              ST_AsText(ST_transform(ST_SetSRID(point, 32652), 4326)) point, count(*) OVER() total \n' +
    '            FROM obj_rs o\n' +
    '            LEFT JOIN tc_trffc_sign s ON o.cd = s.sign_id \n' +
    '            left join photo_mng ph on o.photo_id = ph.photo_id \n' +
    '            left join project_mng pm on o.prj_id = pm.prj_id  ORDER BY o.obj_rs_id DESC , obj_rs_id  LIMIT $1 OFFSET $2',
  values: [ 14, 0 ]
}
2023-09-21 13:08:59 [DEBUG] - [func]gridUtil.convertGridData()
2023-09-21 13:09:00 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:12:18 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:12:18 [DEBUG] - GET : /api/data/read/obj?page=1&perPage=14&curItemId=34519&_=1695269339136
2023-09-21 13:12:18 [DEBUG] - [func]gridUtil.getDefaultInfo()
2023-09-21 13:12:18 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: undefined,
  filter_value: undefined
}
2023-09-21 13:12:18 [DEBUG] - [func]prjDB.getReadDataList()
2023-09-21 13:12:18 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: undefined,
  filter_value: undefined
}
2023-09-21 13:12:18 [DEBUG] - 'obj_rs_id'
2023-09-21 13:12:18 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:12:18 [DEBUG] - {
  text: 'SELECT o.*, s.sign_nm, o.updt_yn, ph.org_file_nm, ph.data_file_path,\n' +
    '              ph.longtitude, ph.latitude, s.sign_img_file_path, pm.prj_nm, \n' +
    '              ST_AsText(ST_transform(ST_SetSRID(point, 32652), 4326)) point, count(*) OVER() total \n' +
    '            FROM obj_rs o\n' +
    '            LEFT JOIN tc_trffc_sign s ON o.cd = s.sign_id \n' +
    '            left join photo_mng ph on o.photo_id = ph.photo_id \n' +
    '            left join project_mng pm on o.prj_id = pm.prj_id  ORDER BY o.obj_rs_id DESC , obj_rs_id  LIMIT $1 OFFSET $2',
  values: [ 14, 0 ]
}
2023-09-21 13:12:18 [DEBUG] - [func]gridUtil.convertGridData()
2023-09-21 13:12:19 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:12:21 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:12:21 [DEBUG] - GET : /api/data/read/obj?page=1&perPage=14&curItemId=34514&_=1695269339137
2023-09-21 13:12:21 [DEBUG] - [func]gridUtil.getDefaultInfo()
2023-09-21 13:12:21 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: undefined,
  filter_value: undefined
}
2023-09-21 13:12:21 [DEBUG] - [func]prjDB.getReadDataList()
2023-09-21 13:12:21 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: undefined,
  filter_value: undefined
}
2023-09-21 13:12:21 [DEBUG] - 'obj_rs_id'
2023-09-21 13:12:21 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:12:21 [DEBUG] - {
  text: 'SELECT o.*, s.sign_nm, o.updt_yn, ph.org_file_nm, ph.data_file_path,\n' +
    '              ph.longtitude, ph.latitude, s.sign_img_file_path, pm.prj_nm, \n' +
    '              ST_AsText(ST_transform(ST_SetSRID(point, 32652), 4326)) point, count(*) OVER() total \n' +
    '            FROM obj_rs o\n' +
    '            LEFT JOIN tc_trffc_sign s ON o.cd = s.sign_id \n' +
    '            left join photo_mng ph on o.photo_id = ph.photo_id \n' +
    '            left join project_mng pm on o.prj_id = pm.prj_id  ORDER BY o.obj_rs_id DESC , obj_rs_id  LIMIT $1 OFFSET $2',
  values: [ 14, 0 ]
}
2023-09-21 13:12:22 [DEBUG] - [func]gridUtil.convertGridData()
2023-09-21 13:12:56 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:13:17 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:13:17 [DEBUG] - GET : /api/data/read/obj?page=1&perPage=14&curItemId=34516&_=1695269339138
2023-09-21 13:13:17 [DEBUG] - [func]gridUtil.getDefaultInfo()
2023-09-21 13:13:17 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: undefined,
  filter_value: undefined
}
2023-09-21 13:13:17 [DEBUG] - [func]prjDB.getReadDataList()
2023-09-21 13:13:17 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: undefined,
  filter_value: undefined
}
2023-09-21 13:13:17 [DEBUG] - 'obj_rs_id'
2023-09-21 13:13:17 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:13:17 [DEBUG] - {
  text: 'SELECT o.*, s.sign_nm, o.updt_yn, ph.org_file_nm, ph.data_file_path,\n' +
    '              ph.longtitude, ph.latitude, s.sign_img_file_path, pm.prj_nm, \n' +
    '              ST_AsText(ST_transform(ST_SetSRID(point, 32652), 4326)) point, count(*) OVER() total \n' +
    '            FROM obj_rs o\n' +
    '            LEFT JOIN tc_trffc_sign s ON o.cd = s.sign_id \n' +
    '            left join photo_mng ph on o.photo_id = ph.photo_id \n' +
    '            left join project_mng pm on o.prj_id = pm.prj_id  ORDER BY o.obj_rs_id DESC , obj_rs_id  LIMIT $1 OFFSET $2',
  values: [ 14, 0 ]
}
2023-09-21 13:13:18 [DEBUG] - [func]gridUtil.convertGridData()
2023-09-21 13:47:34 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:47:34 [DEBUG] - GET : /data/list/cam
2023-09-21 13:47:34 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:47:34 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:47:34 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 13:47:34 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 13:47:34 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:47:34 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 13:47:34 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 13:47:34 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:47:34 [DEBUG] - GET : /api/data/read/cam?filter_type=p.prj_id&filter_value=&page=1&perPage=14&_=1695271654700
2023-09-21 13:47:34 [DEBUG] - [func]gridUtil.getDefaultInfo()
2023-09-21 13:47:34 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'photo_id',
  sortAscending: undefined,
  filter_type: 'p.prj_id',
  filter_value: ''
}
2023-09-21 13:47:34 [DEBUG] - [func]dataCamDB.getReadDataList()
2023-09-21 13:47:34 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'photo_id',
  sortAscending: undefined,
  filter_type: 'p.prj_id',
  filter_value: ''
}
2023-09-21 13:47:34 [DEBUG] - 'photo_id'
2023-09-21 13:47:34 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:47:34 [DEBUG] - {
  text: 'SELECT d.*, p.prj_nm, r.data_reg_ty_nm,              count(*) OVER() total             FROM photo_mng d LEFT JOIN project_mng p  ON d.prj_id = p.prj_id LEFT JOIN tc_data_reg_ty r  ON d.data_reg_ty_id = r.data_reg_ty_id  ORDER BY photo_id DESC  LIMIT $1 OFFSET $2',
  values: [ 14, 0 ]
}
2023-09-21 13:47:35 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:47:35 [DEBUG] - GET : /data/list/obj
2023-09-21 13:47:35 [DEBUG] - [func]gridUtil.convertGridData()
2023-09-21 13:47:35 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:47:35 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:47:35 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 13:47:35 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 13:47:35 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:47:35 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 13:47:35 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 13:47:35 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:47:35 [DEBUG] - GET : /api/data/read/obj?filter_type=o.obj_rs_id&filter_value=&page=1&perPage=14&_=1695271655323
2023-09-21 13:47:35 [DEBUG] - [func]gridUtil.getDefaultInfo()
2023-09-21 13:47:35 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: 'o.obj_rs_id',
  filter_value: ''
}
2023-09-21 13:47:35 [DEBUG] - [func]prjDB.getReadDataList()
2023-09-21 13:47:35 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: 'o.obj_rs_id',
  filter_value: ''
}
2023-09-21 13:47:35 [DEBUG] - 'obj_rs_id'
2023-09-21 13:47:35 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:47:35 [DEBUG] - {
  text: 'SELECT o.*, s.sign_nm, o.updt_yn, ph.org_file_nm, ph.data_file_path,\n' +
    '              ph.longtitude, ph.latitude, s.sign_img_file_path, pm.prj_nm, \n' +
    '              ST_AsText(ST_transform(ST_SetSRID(point, 32652), 4326)) point, count(*) OVER() total \n' +
    '            FROM obj_rs o\n' +
    '            LEFT JOIN tc_trffc_sign s ON o.cd = s.sign_id \n' +
    '            left join photo_mng ph on o.photo_id = ph.photo_id \n' +
    '            left join project_mng pm on o.prj_id = pm.prj_id  ORDER BY o.obj_rs_id DESC , obj_rs_id  LIMIT $1 OFFSET $2',
  values: [ 14, 0 ]
}
2023-09-21 13:47:35 [DEBUG] - [func]gridUtil.convertGridData()
2023-09-21 13:47:35 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:48:22 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 13:48:22 [DEBUG] - GET : /api/data/read/obj?page=1&perPage=14&curItemId=34520&_=1695271655324
2023-09-21 13:48:22 [DEBUG] - [func]gridUtil.getDefaultInfo()
2023-09-21 13:48:22 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: undefined,
  filter_value: undefined
}
2023-09-21 13:48:22 [DEBUG] - [func]prjDB.getReadDataList()
2023-09-21 13:48:22 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: undefined,
  filter_value: undefined
}
2023-09-21 13:48:22 [DEBUG] - 'obj_rs_id'
2023-09-21 13:48:22 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:48:22 [DEBUG] - {
  text: 'SELECT o.*, s.sign_nm, o.updt_yn, ph.org_file_nm, ph.data_file_path,\n' +
    '              ph.longtitude, ph.latitude, s.sign_img_file_path, pm.prj_nm, \n' +
    '              ST_AsText(ST_transform(ST_SetSRID(point, 32652), 4326)) point, count(*) OVER() total \n' +
    '            FROM obj_rs o\n' +
    '            LEFT JOIN tc_trffc_sign s ON o.cd = s.sign_id \n' +
    '            left join photo_mng ph on o.photo_id = ph.photo_id \n' +
    '            left join project_mng pm on o.prj_id = pm.prj_id  ORDER BY o.obj_rs_id DESC , obj_rs_id  LIMIT $1 OFFSET $2',
  values: [ 14, 0 ]
}
2023-09-21 13:48:22 [DEBUG] - [func]gridUtil.convertGridData()
2023-09-21 13:52:30 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:52:30 [DEBUG] - { text: "select current_setting('timezone'), now()", values: [] }
2023-09-21 13:52:30 [INFO] - Argos Platform : win32
2023-09-21 13:52:30 [INFO] - config.server_port : 3001
2023-09-21 13:52:30 [DEBUG] - route_loader.init called.
2023-09-21 13:52:30 [INFO] - Routing Moudle count : 72
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : / -- method : ./page/route_root:getRoot
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /login -- method : ./page/route_root:getLogin
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /signup -- method : ./page/route_account:getSignup
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /account/list -- method : ./page/route_account:getAccountList
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /account/my -- method : ./page/route_account:getAccountMy
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /account/view/:email -- method : ./page/route_account:getAccountView
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /equip/list/vehicle -- method : ./page/route_equip:getListVh
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /equip/list/sensor -- method : ./page/route_equip:getListSens
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /equip/add/vehicle -- method : ./page/route_equip:getAddVehicle
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /equip/add/sensor -- method : ./page/route_equip:getAddSensor
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /equip/vehicle/:vhid -- method : ./page/route_equip:getViewVh
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /equip/sens/:sensid -- method : ./page/route_equip:getViewSens
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /map/list/map -- method : ./page/route_map:getListMap
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /data/list/prj -- method : ./page/route_data:getListPrj
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /data/add/prj -- method : ./page/route_data:getAddPrj
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /data/list/cam -- method : ./page/route_data:getListDataCam
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /data/list/lidar -- method : ./page/route_data:getListDataLidar
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /data/list/obj -- method : ./page/route_data:getListObj
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /data/view/prj/:prjid -- method : ./page/route_data:getViewPrj
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /data/view/data/:dataid -- method : ./page/route_data:getViewData
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /stat/dashboard -- method : ./page/route_stat:getDashboard
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /doc/:docname -- method : ./page/route_docs:getDocuemnt
2023-09-21 13:52:30 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/account/read -- method : ./api/api_account:readUserList
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:uploadUserPhoto
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:postUpdateUser
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/account/changepw -- method : ./api/api_account:postChangePw
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/account/reset -- method : ./api/api_account:postUserReset
2023-09-21 13:52:30 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 13:52:30 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object] , targetPath : , originalName : false
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:postAddVehicle
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:postUpdateVehicle
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/equip/read/vh -- method : ./api/api_equip:readVhList
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:postAddSens
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/equip/read/sens -- method : ./api/api_equip:readSensList
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:postUpdateSens
2023-09-21 13:52:30 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object],[object Object] , targetPath : , originalName : true
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/data/add/prj -- method : ./api/api_data:postAddPrj
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/data/delete/prj -- method : ./api/api_data:postDelPrj
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/data/update/prj -- method : ./api/api_data:postUpdatePrj
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:uploadPrjData
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:postUploadPrjDataProc
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/data/read/prj -- method : ./api/api_data:readPrjList
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/data/read/cam -- method : ./api/api_data:readDataCamList
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/data/read/lidar -- method : ./api/api_data:readDataLidarList
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/data/read/obj -- method : ./api/api_obj:readObjList
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/data/package/:prjid/:dataty -- method : ./api/api_data:getDataPackage
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/data/down/:dataty/:dataid -- method : ./api/api_data:getDataDownload
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/data/path/:prjid -- method : ./api/api_data:getDataPath
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/data/lidar/img -- method : ./api/api_data:getLidarImg
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/data/proc/start -- method : ./api/api_data:startDataProc
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/map/sig -- method : ./api/api_map:postSigBySido
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapPrj -- method : ./api/api_map:postSearchMapByPrj
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapRegion -- method : ./api/api_map:postSearchMapByRegion
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/map/read/obj -- method : ./api/api_obj:readObj
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/stat/data-total -- method : ./api/api_stat:getTotalData
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/stat/prj-status -- method : ./api/api_stat:getProjectStauts
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/stat/data-period -- method : ./api/api_stat:getDataPeriod
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/stat/equip -- method : ./api/api_stat:getDataEquipStatus
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/stat/object -- method : ./api/api_stat:getObjStatus
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/auth/token -- method : ./api/api_rest:postAuthTokken
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/equip/list -- method : ./api/api_rest:getEquipList
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/project/add -- method : ./api/api_rest:postPrjAdd
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/data/meta -- method : ./api/api_rest:postMetaData
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/project/scan/:prjid -- method : ./api/api_rest:getPrjScan
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/project/data/:prjid -- method : ./api/api_rest:getPrjData
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/project/sync -- method : ./api/api_rest:postPrjSync
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/project/clone -- method : ./api/api_rest:postClonePrj
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/data/finish -- method : ./api/api_rest:postFinishData
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/data/prc-finish -- method : ./api/api_rest:postFinishPrcData
2023-09-21 13:52:30 [DEBUG] - Router setted - type : get -- path : /api/debug/token -- method : ./api/api_debug:getDebugToken
2023-09-21 13:52:30 [DEBUG] - Router setted - type : post -- path : /api/debug/update-pnu -- method : ./api/api_debug:postUpdatePnu
2023-09-21 13:52:30 [DEBUG] - config/passport called.
2023-09-21 13:52:30 [DEBUG] - local passport setted.
2023-09-21 13:52:30 [DEBUG] - init user_passport
2023-09-21 13:52:30 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 13:52:30 [DEBUG] - [func]codeUtil.init()
2023-09-21 13:52:30 [DEBUG] - [msg] loadUserType...
2023-09-21 13:52:30 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:52:30 [DEBUG] - { text: 'SELECT *  FROM tc_user_ty ORDER BY user_ty_id' }
2023-09-21 13:52:30 [DEBUG] - [msg] loadUserStatus...
2023-09-21 13:52:30 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:52:30 [DEBUG] - { text: 'SELECT *  FROM tc_user_cond ORDER BY user_cond_id' }
2023-09-21 13:52:30 [DEBUG] - [msg] loadPnuCode...
2023-09-21 13:52:30 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:52:30 [DEBUG] - { text: 'SELECT *  FROM tc_pnu_sigungu ORDER BY sido_cd, sigungu_cd' }
2023-09-21 13:52:30 [DEBUG] - [msg] loadCondCode...
2023-09-21 13:52:30 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:52:30 [DEBUG] - { text: 'SELECT *  FROM tc_vh_cond' }
2023-09-21 13:52:30 [DEBUG] - [msg] loadSensCode...
2023-09-21 13:52:30 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:52:30 [DEBUG] - { text: 'SELECT *  FROM tc_sens_ty' }
2023-09-21 13:52:30 [DEBUG] - [msg] loadWeatherCode...
2023-09-21 13:52:30 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:52:30 [DEBUG] - { text: 'SELECT *  FROM tc_weather order by weather_cd' }
2023-09-21 13:52:30 [DEBUG] - updateUtil.checkUpdate
2023-09-21 13:52:30 [INFO] - Express SSL server listening on port 443
2023-09-21 13:52:30 [INFO] - Express server listening on port 3001
2023-09-21 13:52:31 [DEBUG] - [ { current_setting: 'Asia/Seoul', now: 2023-09-21T04:52:32.018Z } ]
2023-09-21 13:52:32 [DEBUG] - GET : /api/map/read/obj?obj_rs_id=18552
2023-09-21 13:53:55 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:53:55 [DEBUG] - { text: "select current_setting('timezone'), now()", values: [] }
2023-09-21 13:53:55 [INFO] - Argos Platform : win32
2023-09-21 13:53:55 [INFO] - config.server_port : 3001
2023-09-21 13:53:55 [DEBUG] - route_loader.init called.
2023-09-21 13:53:55 [INFO] - Routing Moudle count : 72
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : / -- method : ./page/route_root:getRoot
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /login -- method : ./page/route_root:getLogin
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /signup -- method : ./page/route_account:getSignup
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /account/list -- method : ./page/route_account:getAccountList
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /account/my -- method : ./page/route_account:getAccountMy
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /account/view/:email -- method : ./page/route_account:getAccountView
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /equip/list/vehicle -- method : ./page/route_equip:getListVh
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /equip/list/sensor -- method : ./page/route_equip:getListSens
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /equip/add/vehicle -- method : ./page/route_equip:getAddVehicle
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /equip/add/sensor -- method : ./page/route_equip:getAddSensor
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /equip/vehicle/:vhid -- method : ./page/route_equip:getViewVh
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /equip/sens/:sensid -- method : ./page/route_equip:getViewSens
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /map/list/map -- method : ./page/route_map:getListMap
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /data/list/prj -- method : ./page/route_data:getListPrj
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /data/add/prj -- method : ./page/route_data:getAddPrj
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /data/list/cam -- method : ./page/route_data:getListDataCam
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /data/list/lidar -- method : ./page/route_data:getListDataLidar
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /data/list/obj -- method : ./page/route_data:getListObj
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /data/view/prj/:prjid -- method : ./page/route_data:getViewPrj
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /data/view/data/:dataid -- method : ./page/route_data:getViewData
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /stat/dashboard -- method : ./page/route_stat:getDashboard
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /doc/:docname -- method : ./page/route_docs:getDocuemnt
2023-09-21 13:53:55 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/account/read -- method : ./api/api_account:readUserList
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:uploadUserPhoto
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:postUpdateUser
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/account/changepw -- method : ./api/api_account:postChangePw
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/account/reset -- method : ./api/api_account:postUserReset
2023-09-21 13:53:55 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 13:53:55 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object] , targetPath : , originalName : false
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:postAddVehicle
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:postUpdateVehicle
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/equip/read/vh -- method : ./api/api_equip:readVhList
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:postAddSens
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/equip/read/sens -- method : ./api/api_equip:readSensList
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:postUpdateSens
2023-09-21 13:53:55 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object],[object Object] , targetPath : , originalName : true
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/data/add/prj -- method : ./api/api_data:postAddPrj
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/data/delete/prj -- method : ./api/api_data:postDelPrj
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/data/update/prj -- method : ./api/api_data:postUpdatePrj
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:uploadPrjData
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:postUploadPrjDataProc
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/data/read/prj -- method : ./api/api_data:readPrjList
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/data/read/cam -- method : ./api/api_data:readDataCamList
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/data/read/lidar -- method : ./api/api_data:readDataLidarList
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/data/read/obj -- method : ./api/api_obj:readObjList
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/data/package/:prjid/:dataty -- method : ./api/api_data:getDataPackage
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/data/down/:dataty/:dataid -- method : ./api/api_data:getDataDownload
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/data/path/:prjid -- method : ./api/api_data:getDataPath
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/data/lidar/img -- method : ./api/api_data:getLidarImg
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/data/proc/start -- method : ./api/api_data:startDataProc
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/map/sig -- method : ./api/api_map:postSigBySido
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapPrj -- method : ./api/api_map:postSearchMapByPrj
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapRegion -- method : ./api/api_map:postSearchMapByRegion
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/map/read/obj -- method : ./api/api_obj:readObj
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/stat/data-total -- method : ./api/api_stat:getTotalData
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/stat/prj-status -- method : ./api/api_stat:getProjectStauts
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/stat/data-period -- method : ./api/api_stat:getDataPeriod
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/stat/equip -- method : ./api/api_stat:getDataEquipStatus
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/stat/object -- method : ./api/api_stat:getObjStatus
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/auth/token -- method : ./api/api_rest:postAuthTokken
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/equip/list -- method : ./api/api_rest:getEquipList
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/project/add -- method : ./api/api_rest:postPrjAdd
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/data/meta -- method : ./api/api_rest:postMetaData
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/project/scan/:prjid -- method : ./api/api_rest:getPrjScan
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/project/data/:prjid -- method : ./api/api_rest:getPrjData
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/project/sync -- method : ./api/api_rest:postPrjSync
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/project/clone -- method : ./api/api_rest:postClonePrj
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/data/finish -- method : ./api/api_rest:postFinishData
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/data/prc-finish -- method : ./api/api_rest:postFinishPrcData
2023-09-21 13:53:55 [DEBUG] - Router setted - type : get -- path : /api/debug/token -- method : ./api/api_debug:getDebugToken
2023-09-21 13:53:55 [DEBUG] - Router setted - type : post -- path : /api/debug/update-pnu -- method : ./api/api_debug:postUpdatePnu
2023-09-21 13:53:55 [DEBUG] - config/passport called.
2023-09-21 13:53:55 [DEBUG] - local passport setted.
2023-09-21 13:53:55 [DEBUG] - init user_passport
2023-09-21 13:53:55 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 13:53:55 [DEBUG] - [func]codeUtil.init()
2023-09-21 13:53:55 [DEBUG] - [msg] loadUserType...
2023-09-21 13:53:55 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:53:55 [DEBUG] - { text: 'SELECT *  FROM tc_user_ty ORDER BY user_ty_id' }
2023-09-21 13:53:55 [DEBUG] - [msg] loadUserStatus...
2023-09-21 13:53:55 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:53:55 [DEBUG] - { text: 'SELECT *  FROM tc_user_cond ORDER BY user_cond_id' }
2023-09-21 13:53:55 [DEBUG] - [msg] loadPnuCode...
2023-09-21 13:53:55 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:53:55 [DEBUG] - { text: 'SELECT *  FROM tc_pnu_sigungu ORDER BY sido_cd, sigungu_cd' }
2023-09-21 13:53:55 [DEBUG] - [msg] loadCondCode...
2023-09-21 13:53:55 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:53:55 [DEBUG] - { text: 'SELECT *  FROM tc_vh_cond' }
2023-09-21 13:53:55 [DEBUG] - [msg] loadSensCode...
2023-09-21 13:53:55 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:53:55 [DEBUG] - { text: 'SELECT *  FROM tc_sens_ty' }
2023-09-21 13:53:55 [DEBUG] - [msg] loadWeatherCode...
2023-09-21 13:53:55 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:53:55 [DEBUG] - { text: 'SELECT *  FROM tc_weather order by weather_cd' }
2023-09-21 13:53:55 [DEBUG] - updateUtil.checkUpdate
2023-09-21 13:53:55 [INFO] - Express SSL server listening on port 443
2023-09-21 13:53:55 [INFO] - Express server listening on port 3001
2023-09-21 13:53:56 [DEBUG] - [ { current_setting: 'Asia/Seoul', now: 2023-09-21T04:53:57.036Z } ]
2023-09-21 13:53:57 [DEBUG] - GET : /api/map/read/obj
2023-09-21 13:54:08 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:54:08 [DEBUG] - { text: "select current_setting('timezone'), now()", values: [] }
2023-09-21 13:54:08 [INFO] - Argos Platform : win32
2023-09-21 13:54:08 [INFO] - config.server_port : 3001
2023-09-21 13:54:08 [DEBUG] - route_loader.init called.
2023-09-21 13:54:08 [INFO] - Routing Moudle count : 72
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : / -- method : ./page/route_root:getRoot
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /login -- method : ./page/route_root:getLogin
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /signup -- method : ./page/route_account:getSignup
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /account/list -- method : ./page/route_account:getAccountList
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /account/my -- method : ./page/route_account:getAccountMy
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /account/view/:email -- method : ./page/route_account:getAccountView
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /equip/list/vehicle -- method : ./page/route_equip:getListVh
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /equip/list/sensor -- method : ./page/route_equip:getListSens
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /equip/add/vehicle -- method : ./page/route_equip:getAddVehicle
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /equip/add/sensor -- method : ./page/route_equip:getAddSensor
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /equip/vehicle/:vhid -- method : ./page/route_equip:getViewVh
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /equip/sens/:sensid -- method : ./page/route_equip:getViewSens
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /map/list/map -- method : ./page/route_map:getListMap
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /data/list/prj -- method : ./page/route_data:getListPrj
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /data/add/prj -- method : ./page/route_data:getAddPrj
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /data/list/cam -- method : ./page/route_data:getListDataCam
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /data/list/lidar -- method : ./page/route_data:getListDataLidar
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /data/list/obj -- method : ./page/route_data:getListObj
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /data/view/prj/:prjid -- method : ./page/route_data:getViewPrj
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /data/view/data/:dataid -- method : ./page/route_data:getViewData
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /stat/dashboard -- method : ./page/route_stat:getDashboard
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /doc/:docname -- method : ./page/route_docs:getDocuemnt
2023-09-21 13:54:08 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/account/read -- method : ./api/api_account:readUserList
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:uploadUserPhoto
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:postUpdateUser
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/account/changepw -- method : ./api/api_account:postChangePw
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/account/reset -- method : ./api/api_account:postUserReset
2023-09-21 13:54:08 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 13:54:08 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object] , targetPath : , originalName : false
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:postAddVehicle
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:postUpdateVehicle
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/equip/read/vh -- method : ./api/api_equip:readVhList
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:postAddSens
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/equip/read/sens -- method : ./api/api_equip:readSensList
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:postUpdateSens
2023-09-21 13:54:08 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object],[object Object] , targetPath : , originalName : true
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/data/add/prj -- method : ./api/api_data:postAddPrj
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/data/delete/prj -- method : ./api/api_data:postDelPrj
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/data/update/prj -- method : ./api/api_data:postUpdatePrj
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:uploadPrjData
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:postUploadPrjDataProc
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/data/read/prj -- method : ./api/api_data:readPrjList
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/data/read/cam -- method : ./api/api_data:readDataCamList
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/data/read/lidar -- method : ./api/api_data:readDataLidarList
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/data/read/obj -- method : ./api/api_obj:readObjList
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/data/package/:prjid/:dataty -- method : ./api/api_data:getDataPackage
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/data/down/:dataty/:dataid -- method : ./api/api_data:getDataDownload
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/data/path/:prjid -- method : ./api/api_data:getDataPath
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/data/lidar/img -- method : ./api/api_data:getLidarImg
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/data/proc/start -- method : ./api/api_data:startDataProc
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/map/sig -- method : ./api/api_map:postSigBySido
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapPrj -- method : ./api/api_map:postSearchMapByPrj
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapRegion -- method : ./api/api_map:postSearchMapByRegion
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/map/read/obj -- method : ./api/api_obj:readObj
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/stat/data-total -- method : ./api/api_stat:getTotalData
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/stat/prj-status -- method : ./api/api_stat:getProjectStauts
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/stat/data-period -- method : ./api/api_stat:getDataPeriod
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/stat/equip -- method : ./api/api_stat:getDataEquipStatus
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/stat/object -- method : ./api/api_stat:getObjStatus
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/auth/token -- method : ./api/api_rest:postAuthTokken
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/equip/list -- method : ./api/api_rest:getEquipList
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/project/add -- method : ./api/api_rest:postPrjAdd
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/data/meta -- method : ./api/api_rest:postMetaData
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/project/scan/:prjid -- method : ./api/api_rest:getPrjScan
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/project/data/:prjid -- method : ./api/api_rest:getPrjData
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/project/sync -- method : ./api/api_rest:postPrjSync
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/project/clone -- method : ./api/api_rest:postClonePrj
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/data/finish -- method : ./api/api_rest:postFinishData
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/data/prc-finish -- method : ./api/api_rest:postFinishPrcData
2023-09-21 13:54:08 [DEBUG] - Router setted - type : get -- path : /api/debug/token -- method : ./api/api_debug:getDebugToken
2023-09-21 13:54:08 [DEBUG] - Router setted - type : post -- path : /api/debug/update-pnu -- method : ./api/api_debug:postUpdatePnu
2023-09-21 13:54:08 [DEBUG] - config/passport called.
2023-09-21 13:54:08 [DEBUG] - local passport setted.
2023-09-21 13:54:08 [DEBUG] - init user_passport
2023-09-21 13:54:08 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 13:54:08 [DEBUG] - [func]codeUtil.init()
2023-09-21 13:54:08 [DEBUG] - [msg] loadUserType...
2023-09-21 13:54:08 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:54:08 [DEBUG] - { text: 'SELECT *  FROM tc_user_ty ORDER BY user_ty_id' }
2023-09-21 13:54:08 [DEBUG] - [msg] loadUserStatus...
2023-09-21 13:54:08 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:54:08 [DEBUG] - { text: 'SELECT *  FROM tc_user_cond ORDER BY user_cond_id' }
2023-09-21 13:54:08 [DEBUG] - [msg] loadPnuCode...
2023-09-21 13:54:08 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:54:08 [DEBUG] - { text: 'SELECT *  FROM tc_pnu_sigungu ORDER BY sido_cd, sigungu_cd' }
2023-09-21 13:54:08 [DEBUG] - [msg] loadCondCode...
2023-09-21 13:54:08 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:54:08 [DEBUG] - { text: 'SELECT *  FROM tc_vh_cond' }
2023-09-21 13:54:08 [DEBUG] - [msg] loadSensCode...
2023-09-21 13:54:08 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:54:08 [DEBUG] - { text: 'SELECT *  FROM tc_sens_ty' }
2023-09-21 13:54:08 [DEBUG] - [msg] loadWeatherCode...
2023-09-21 13:54:08 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:54:08 [DEBUG] - { text: 'SELECT *  FROM tc_weather order by weather_cd' }
2023-09-21 13:54:08 [DEBUG] - updateUtil.checkUpdate
2023-09-21 13:54:08 [INFO] - Express SSL server listening on port 443
2023-09-21 13:54:08 [INFO] - Express server listening on port 3001
2023-09-21 13:54:08 [DEBUG] - [ { current_setting: 'Asia/Seoul', now: 2023-09-21T04:54:09.804Z } ]
2023-09-21 13:54:09 [DEBUG] - GET : /api/map/read/obj
2023-09-21 13:55:03 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:55:03 [DEBUG] - { text: "select current_setting('timezone'), now()", values: [] }
2023-09-21 13:55:03 [INFO] - Argos Platform : win32
2023-09-21 13:55:03 [INFO] - config.server_port : 3001
2023-09-21 13:55:03 [DEBUG] - route_loader.init called.
2023-09-21 13:55:03 [INFO] - Routing Moudle count : 72
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : / -- method : ./page/route_root:getRoot
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /login -- method : ./page/route_root:getLogin
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /signup -- method : ./page/route_account:getSignup
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /account/list -- method : ./page/route_account:getAccountList
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /account/my -- method : ./page/route_account:getAccountMy
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /account/view/:email -- method : ./page/route_account:getAccountView
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /equip/list/vehicle -- method : ./page/route_equip:getListVh
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /equip/list/sensor -- method : ./page/route_equip:getListSens
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /equip/add/vehicle -- method : ./page/route_equip:getAddVehicle
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /equip/add/sensor -- method : ./page/route_equip:getAddSensor
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /equip/vehicle/:vhid -- method : ./page/route_equip:getViewVh
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /equip/sens/:sensid -- method : ./page/route_equip:getViewSens
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /map/list/map -- method : ./page/route_map:getListMap
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /data/list/prj -- method : ./page/route_data:getListPrj
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /data/add/prj -- method : ./page/route_data:getAddPrj
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /data/list/cam -- method : ./page/route_data:getListDataCam
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /data/list/lidar -- method : ./page/route_data:getListDataLidar
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /data/list/obj -- method : ./page/route_data:getListObj
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /data/view/prj/:prjid -- method : ./page/route_data:getViewPrj
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /data/view/data/:dataid -- method : ./page/route_data:getViewData
2023-09-21 13:55:03 [DEBUG] - Router setted - type : get -- path : /stat/dashboard -- method : ./page/route_stat:getDashboard
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /doc/:docname -- method : ./page/route_docs:getDocuemnt
2023-09-21 13:55:04 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/account/read -- method : ./api/api_account:readUserList
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:uploadUserPhoto
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:postUpdateUser
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/account/changepw -- method : ./api/api_account:postChangePw
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/account/reset -- method : ./api/api_account:postUserReset
2023-09-21 13:55:04 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 13:55:04 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object] , targetPath : , originalName : false
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:postAddVehicle
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:postUpdateVehicle
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/equip/read/vh -- method : ./api/api_equip:readVhList
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:postAddSens
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/equip/read/sens -- method : ./api/api_equip:readSensList
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:postUpdateSens
2023-09-21 13:55:04 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object],[object Object] , targetPath : , originalName : true
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/data/add/prj -- method : ./api/api_data:postAddPrj
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/data/delete/prj -- method : ./api/api_data:postDelPrj
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/data/update/prj -- method : ./api/api_data:postUpdatePrj
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:uploadPrjData
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:postUploadPrjDataProc
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/data/read/prj -- method : ./api/api_data:readPrjList
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/data/read/cam -- method : ./api/api_data:readDataCamList
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/data/read/lidar -- method : ./api/api_data:readDataLidarList
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/data/read/obj -- method : ./api/api_obj:readObjList
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/data/package/:prjid/:dataty -- method : ./api/api_data:getDataPackage
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/data/down/:dataty/:dataid -- method : ./api/api_data:getDataDownload
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/data/path/:prjid -- method : ./api/api_data:getDataPath
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/data/lidar/img -- method : ./api/api_data:getLidarImg
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/data/proc/start -- method : ./api/api_data:startDataProc
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/map/sig -- method : ./api/api_map:postSigBySido
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapPrj -- method : ./api/api_map:postSearchMapByPrj
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapRegion -- method : ./api/api_map:postSearchMapByRegion
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/map/read/obj -- method : ./api/api_obj:readObj
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/stat/data-total -- method : ./api/api_stat:getTotalData
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/stat/prj-status -- method : ./api/api_stat:getProjectStauts
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/stat/data-period -- method : ./api/api_stat:getDataPeriod
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/stat/equip -- method : ./api/api_stat:getDataEquipStatus
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/stat/object -- method : ./api/api_stat:getObjStatus
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/auth/token -- method : ./api/api_rest:postAuthTokken
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/equip/list -- method : ./api/api_rest:getEquipList
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/project/add -- method : ./api/api_rest:postPrjAdd
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/data/meta -- method : ./api/api_rest:postMetaData
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/project/scan/:prjid -- method : ./api/api_rest:getPrjScan
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/project/data/:prjid -- method : ./api/api_rest:getPrjData
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/project/sync -- method : ./api/api_rest:postPrjSync
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/project/clone -- method : ./api/api_rest:postClonePrj
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/data/finish -- method : ./api/api_rest:postFinishData
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/data/prc-finish -- method : ./api/api_rest:postFinishPrcData
2023-09-21 13:55:04 [DEBUG] - Router setted - type : get -- path : /api/debug/token -- method : ./api/api_debug:getDebugToken
2023-09-21 13:55:04 [DEBUG] - Router setted - type : post -- path : /api/debug/update-pnu -- method : ./api/api_debug:postUpdatePnu
2023-09-21 13:55:04 [DEBUG] - config/passport called.
2023-09-21 13:55:04 [DEBUG] - local passport setted.
2023-09-21 13:55:04 [DEBUG] - init user_passport
2023-09-21 13:55:04 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 13:55:04 [DEBUG] - [func]codeUtil.init()
2023-09-21 13:55:04 [DEBUG] - [msg] loadUserType...
2023-09-21 13:55:04 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:55:04 [DEBUG] - { text: 'SELECT *  FROM tc_user_ty ORDER BY user_ty_id' }
2023-09-21 13:55:04 [DEBUG] - [msg] loadUserStatus...
2023-09-21 13:55:04 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:55:04 [DEBUG] - { text: 'SELECT *  FROM tc_user_cond ORDER BY user_cond_id' }
2023-09-21 13:55:04 [DEBUG] - [msg] loadPnuCode...
2023-09-21 13:55:04 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:55:04 [DEBUG] - { text: 'SELECT *  FROM tc_pnu_sigungu ORDER BY sido_cd, sigungu_cd' }
2023-09-21 13:55:04 [DEBUG] - [msg] loadCondCode...
2023-09-21 13:55:04 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:55:04 [DEBUG] - { text: 'SELECT *  FROM tc_vh_cond' }
2023-09-21 13:55:04 [DEBUG] - [msg] loadSensCode...
2023-09-21 13:55:04 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:55:04 [DEBUG] - { text: 'SELECT *  FROM tc_sens_ty' }
2023-09-21 13:55:04 [DEBUG] - [msg] loadWeatherCode...
2023-09-21 13:55:04 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:55:04 [DEBUG] - { text: 'SELECT *  FROM tc_weather order by weather_cd' }
2023-09-21 13:55:04 [DEBUG] - updateUtil.checkUpdate
2023-09-21 13:55:04 [INFO] - Express SSL server listening on port 443
2023-09-21 13:55:04 [INFO] - Express server listening on port 3001
2023-09-21 13:55:04 [DEBUG] - [ { current_setting: 'Asia/Seoul', now: 2023-09-21T04:55:05.202Z } ]
2023-09-21 13:55:07 [DEBUG] - GET : /api/map/read/obj
2023-09-21 13:55:07 [DEBUG] - [func]objDB.getReadObj()
2023-09-21 13:55:07 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:55:07 [DEBUG] - {
  text: 'SELECT o.*, s.sign_nm, o.updt_yn, ph.org_file_nm, ph.data_file_path,\n' +
    '            ph.longtitude, ph.latitude, s.sign_img_file_path, pm.prj_nm, \n' +
    '            ST_AsText(ST_transform(ST_SetSRID(point, 32652), 4326)) point, count(*) OVER() total \n' +
    '            FROM obj_rs o\n' +
    '            LEFT JOIN tc_trffc_sign s ON o.cd = s.sign_id \n' +
    '            left join photo_mng ph on o.photo_id = ph.photo_id \n' +
    '            left join project_mng pm on o.prj_id = pm.prj_id\n' +
    '            where o.obj_rs_id = $1',
  values: [ undefined ]
}
2023-09-21 13:55:34 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:55:34 [DEBUG] - { text: "select current_setting('timezone'), now()", values: [] }
2023-09-21 13:55:34 [INFO] - Argos Platform : win32
2023-09-21 13:55:34 [INFO] - config.server_port : 3001
2023-09-21 13:55:34 [DEBUG] - route_loader.init called.
2023-09-21 13:55:34 [INFO] - Routing Moudle count : 72
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : / -- method : ./page/route_root:getRoot
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /login -- method : ./page/route_root:getLogin
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /signup -- method : ./page/route_account:getSignup
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /account/list -- method : ./page/route_account:getAccountList
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /account/my -- method : ./page/route_account:getAccountMy
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /account/view/:email -- method : ./page/route_account:getAccountView
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /equip/list/vehicle -- method : ./page/route_equip:getListVh
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /equip/list/sensor -- method : ./page/route_equip:getListSens
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /equip/add/vehicle -- method : ./page/route_equip:getAddVehicle
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /equip/add/sensor -- method : ./page/route_equip:getAddSensor
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /equip/vehicle/:vhid -- method : ./page/route_equip:getViewVh
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /equip/sens/:sensid -- method : ./page/route_equip:getViewSens
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /map/list/map -- method : ./page/route_map:getListMap
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /data/list/prj -- method : ./page/route_data:getListPrj
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /data/add/prj -- method : ./page/route_data:getAddPrj
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /data/list/cam -- method : ./page/route_data:getListDataCam
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /data/list/lidar -- method : ./page/route_data:getListDataLidar
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /data/list/obj -- method : ./page/route_data:getListObj
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /data/view/prj/:prjid -- method : ./page/route_data:getViewPrj
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /data/view/data/:dataid -- method : ./page/route_data:getViewData
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /stat/dashboard -- method : ./page/route_stat:getDashboard
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /doc/:docname -- method : ./page/route_docs:getDocuemnt
2023-09-21 13:55:34 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/account/read -- method : ./api/api_account:readUserList
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:uploadUserPhoto
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:postUpdateUser
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/account/changepw -- method : ./api/api_account:postChangePw
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/account/reset -- method : ./api/api_account:postUserReset
2023-09-21 13:55:34 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 13:55:34 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object] , targetPath : , originalName : false
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:postAddVehicle
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:postUpdateVehicle
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/equip/read/vh -- method : ./api/api_equip:readVhList
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:postAddSens
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/equip/read/sens -- method : ./api/api_equip:readSensList
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:postUpdateSens
2023-09-21 13:55:34 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object],[object Object] , targetPath : , originalName : true
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/data/add/prj -- method : ./api/api_data:postAddPrj
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/data/delete/prj -- method : ./api/api_data:postDelPrj
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/data/update/prj -- method : ./api/api_data:postUpdatePrj
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:uploadPrjData
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:postUploadPrjDataProc
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/data/read/prj -- method : ./api/api_data:readPrjList
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/data/read/cam -- method : ./api/api_data:readDataCamList
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/data/read/lidar -- method : ./api/api_data:readDataLidarList
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/data/read/obj -- method : ./api/api_obj:readObjList
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/data/package/:prjid/:dataty -- method : ./api/api_data:getDataPackage
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/data/down/:dataty/:dataid -- method : ./api/api_data:getDataDownload
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/data/path/:prjid -- method : ./api/api_data:getDataPath
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/data/lidar/img -- method : ./api/api_data:getLidarImg
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/data/proc/start -- method : ./api/api_data:startDataProc
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/map/sig -- method : ./api/api_map:postSigBySido
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapPrj -- method : ./api/api_map:postSearchMapByPrj
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapRegion -- method : ./api/api_map:postSearchMapByRegion
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/map/read/obj -- method : ./api/api_obj:readObj
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/stat/data-total -- method : ./api/api_stat:getTotalData
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/stat/prj-status -- method : ./api/api_stat:getProjectStauts
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/stat/data-period -- method : ./api/api_stat:getDataPeriod
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/stat/equip -- method : ./api/api_stat:getDataEquipStatus
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/stat/object -- method : ./api/api_stat:getObjStatus
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/auth/token -- method : ./api/api_rest:postAuthTokken
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/equip/list -- method : ./api/api_rest:getEquipList
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/project/add -- method : ./api/api_rest:postPrjAdd
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/data/meta -- method : ./api/api_rest:postMetaData
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/project/scan/:prjid -- method : ./api/api_rest:getPrjScan
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/project/data/:prjid -- method : ./api/api_rest:getPrjData
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/project/sync -- method : ./api/api_rest:postPrjSync
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/project/clone -- method : ./api/api_rest:postClonePrj
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/data/finish -- method : ./api/api_rest:postFinishData
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/data/prc-finish -- method : ./api/api_rest:postFinishPrcData
2023-09-21 13:55:34 [DEBUG] - Router setted - type : get -- path : /api/debug/token -- method : ./api/api_debug:getDebugToken
2023-09-21 13:55:34 [DEBUG] - Router setted - type : post -- path : /api/debug/update-pnu -- method : ./api/api_debug:postUpdatePnu
2023-09-21 13:55:34 [DEBUG] - config/passport called.
2023-09-21 13:55:34 [DEBUG] - local passport setted.
2023-09-21 13:55:34 [DEBUG] - init user_passport
2023-09-21 13:55:34 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 13:55:34 [DEBUG] - [func]codeUtil.init()
2023-09-21 13:55:34 [DEBUG] - [msg] loadUserType...
2023-09-21 13:55:34 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:55:34 [DEBUG] - { text: 'SELECT *  FROM tc_user_ty ORDER BY user_ty_id' }
2023-09-21 13:55:34 [DEBUG] - [msg] loadUserStatus...
2023-09-21 13:55:34 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:55:34 [DEBUG] - { text: 'SELECT *  FROM tc_user_cond ORDER BY user_cond_id' }
2023-09-21 13:55:34 [DEBUG] - [msg] loadPnuCode...
2023-09-21 13:55:34 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:55:34 [DEBUG] - { text: 'SELECT *  FROM tc_pnu_sigungu ORDER BY sido_cd, sigungu_cd' }
2023-09-21 13:55:34 [DEBUG] - [msg] loadCondCode...
2023-09-21 13:55:34 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:55:34 [DEBUG] - { text: 'SELECT *  FROM tc_vh_cond' }
2023-09-21 13:55:34 [DEBUG] - [msg] loadSensCode...
2023-09-21 13:55:34 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:55:34 [DEBUG] - { text: 'SELECT *  FROM tc_sens_ty' }
2023-09-21 13:55:34 [DEBUG] - [msg] loadWeatherCode...
2023-09-21 13:55:34 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:55:34 [DEBUG] - { text: 'SELECT *  FROM tc_weather order by weather_cd' }
2023-09-21 13:55:34 [DEBUG] - updateUtil.checkUpdate
2023-09-21 13:55:34 [INFO] - Express SSL server listening on port 443
2023-09-21 13:55:34 [INFO] - Express server listening on port 3001
2023-09-21 13:55:35 [DEBUG] - [ { current_setting: 'Asia/Seoul', now: 2023-09-21T04:55:36.032Z } ]
2023-09-21 13:55:35 [DEBUG] - GET : /api/map/read/obj
2023-09-21 13:55:35 [DEBUG] - [func]objDB.getReadObj()
2023-09-21 13:55:35 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 13:55:35 [DEBUG] - {
  text: 'SELECT o.*, s.sign_nm, o.updt_yn, ph.org_file_nm, ph.data_file_path,\n' +
    '            ph.longtitude, ph.latitude, s.sign_img_file_path, pm.prj_nm, \n' +
    '            ST_AsText(ST_transform(ST_SetSRID(point, 32652), 4326)) point, count(*) OVER() total \n' +
    '            FROM obj_rs o\n' +
    '            LEFT JOIN tc_trffc_sign s ON o.cd = s.sign_id \n' +
    '            left join photo_mng ph on o.photo_id = ph.photo_id \n' +
    '            left join project_mng pm on o.prj_id = pm.prj_id\n' +
    '            where o.obj_rs_id = $1',
  values: [ undefined ]
}
2023-09-21 14:01:45 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 14:01:45 [DEBUG] - { text: "select current_setting('timezone'), now()", values: [] }
2023-09-21 14:01:45 [INFO] - Argos Platform : win32
2023-09-21 14:01:45 [INFO] - config.server_port : 3001
2023-09-21 14:01:45 [DEBUG] - route_loader.init called.
2023-09-21 14:01:45 [INFO] - Routing Moudle count : 72
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : / -- method : ./page/route_root:getRoot
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /login -- method : ./page/route_root:getLogin
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /signup -- method : ./page/route_account:getSignup
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /account/list -- method : ./page/route_account:getAccountList
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /account/my -- method : ./page/route_account:getAccountMy
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /account/view/:email -- method : ./page/route_account:getAccountView
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /equip/list/vehicle -- method : ./page/route_equip:getListVh
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /equip/list/sensor -- method : ./page/route_equip:getListSens
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /equip/add/vehicle -- method : ./page/route_equip:getAddVehicle
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /equip/add/sensor -- method : ./page/route_equip:getAddSensor
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /equip/vehicle/:vhid -- method : ./page/route_equip:getViewVh
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /equip/sens/:sensid -- method : ./page/route_equip:getViewSens
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /map/list/map -- method : ./page/route_map:getListMap
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /data/list/prj -- method : ./page/route_data:getListPrj
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /data/add/prj -- method : ./page/route_data:getAddPrj
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /data/list/cam -- method : ./page/route_data:getListDataCam
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /data/list/lidar -- method : ./page/route_data:getListDataLidar
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /data/list/obj -- method : ./page/route_data:getListObj
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /data/view/prj/:prjid -- method : ./page/route_data:getViewPrj
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /data/view/data/:dataid -- method : ./page/route_data:getViewData
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /stat/dashboard -- method : ./page/route_stat:getDashboard
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /doc/:docname -- method : ./page/route_docs:getDocuemnt
2023-09-21 14:01:45 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/account/read -- method : ./api/api_account:readUserList
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:uploadUserPhoto
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:postUpdateUser
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/account/changepw -- method : ./api/api_account:postChangePw
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/account/reset -- method : ./api/api_account:postUserReset
2023-09-21 14:01:45 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 14:01:45 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object] , targetPath : , originalName : false
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:postAddVehicle
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:postUpdateVehicle
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/equip/read/vh -- method : ./api/api_equip:readVhList
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:postAddSens
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/equip/read/sens -- method : ./api/api_equip:readSensList
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:postUpdateSens
2023-09-21 14:01:45 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object],[object Object] , targetPath : , originalName : true
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/data/add/prj -- method : ./api/api_data:postAddPrj
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/data/delete/prj -- method : ./api/api_data:postDelPrj
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/data/update/prj -- method : ./api/api_data:postUpdatePrj
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:uploadPrjData
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:postUploadPrjDataProc
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/data/read/prj -- method : ./api/api_data:readPrjList
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/data/read/cam -- method : ./api/api_data:readDataCamList
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/data/read/lidar -- method : ./api/api_data:readDataLidarList
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/data/read/obj -- method : ./api/api_obj:readObjList
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/data/package/:prjid/:dataty -- method : ./api/api_data:getDataPackage
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/data/down/:dataty/:dataid -- method : ./api/api_data:getDataDownload
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/data/path/:prjid -- method : ./api/api_data:getDataPath
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/data/lidar/img -- method : ./api/api_data:getLidarImg
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/data/proc/start -- method : ./api/api_data:startDataProc
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/map/sig -- method : ./api/api_map:postSigBySido
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapPrj -- method : ./api/api_map:postSearchMapByPrj
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapRegion -- method : ./api/api_map:postSearchMapByRegion
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/map/read/obj -- method : ./api/api_obj:readObj
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/stat/data-total -- method : ./api/api_stat:getTotalData
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/stat/prj-status -- method : ./api/api_stat:getProjectStauts
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/stat/data-period -- method : ./api/api_stat:getDataPeriod
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/stat/equip -- method : ./api/api_stat:getDataEquipStatus
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/stat/object -- method : ./api/api_stat:getObjStatus
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/auth/token -- method : ./api/api_rest:postAuthTokken
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/equip/list -- method : ./api/api_rest:getEquipList
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/project/add -- method : ./api/api_rest:postPrjAdd
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/data/meta -- method : ./api/api_rest:postMetaData
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/project/scan/:prjid -- method : ./api/api_rest:getPrjScan
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/project/data/:prjid -- method : ./api/api_rest:getPrjData
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/project/sync -- method : ./api/api_rest:postPrjSync
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/project/clone -- method : ./api/api_rest:postClonePrj
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/data/finish -- method : ./api/api_rest:postFinishData
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/data/prc-finish -- method : ./api/api_rest:postFinishPrcData
2023-09-21 14:01:45 [DEBUG] - Router setted - type : get -- path : /api/debug/token -- method : ./api/api_debug:getDebugToken
2023-09-21 14:01:45 [DEBUG] - Router setted - type : post -- path : /api/debug/update-pnu -- method : ./api/api_debug:postUpdatePnu
2023-09-21 14:01:45 [DEBUG] - config/passport called.
2023-09-21 14:01:45 [DEBUG] - local passport setted.
2023-09-21 14:01:45 [DEBUG] - init user_passport
2023-09-21 14:01:45 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 14:01:45 [DEBUG] - [func]codeUtil.init()
2023-09-21 14:01:45 [DEBUG] - [msg] loadUserType...
2023-09-21 14:01:45 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 14:01:45 [DEBUG] - { text: 'SELECT *  FROM tc_user_ty ORDER BY user_ty_id' }
2023-09-21 14:01:45 [DEBUG] - [msg] loadUserStatus...
2023-09-21 14:01:45 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 14:01:45 [DEBUG] - { text: 'SELECT *  FROM tc_user_cond ORDER BY user_cond_id' }
2023-09-21 14:01:45 [DEBUG] - [msg] loadPnuCode...
2023-09-21 14:01:45 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 14:01:45 [DEBUG] - { text: 'SELECT *  FROM tc_pnu_sigungu ORDER BY sido_cd, sigungu_cd' }
2023-09-21 14:01:45 [DEBUG] - [msg] loadCondCode...
2023-09-21 14:01:45 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 14:01:45 [DEBUG] - { text: 'SELECT *  FROM tc_vh_cond' }
2023-09-21 14:01:45 [DEBUG] - [msg] loadSensCode...
2023-09-21 14:01:45 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 14:01:45 [DEBUG] - { text: 'SELECT *  FROM tc_sens_ty' }
2023-09-21 14:01:45 [DEBUG] - [msg] loadWeatherCode...
2023-09-21 14:01:45 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 14:01:45 [DEBUG] - { text: 'SELECT *  FROM tc_weather order by weather_cd' }
2023-09-21 14:01:45 [DEBUG] - updateUtil.checkUpdate
2023-09-21 14:01:45 [INFO] - Express SSL server listening on port 443
2023-09-21 14:01:45 [INFO] - Express server listening on port 3001
2023-09-21 14:01:45 [DEBUG] - [ { current_setting: 'Asia/Seoul', now: 2023-09-21T05:01:46.538Z } ]
2023-09-21 14:01:58 [DEBUG] - GET : /api/map/read/obj?obj_rs_id=18552
2023-09-21 14:01:58 [DEBUG] - [func]objDB.getReadObj()
2023-09-21 14:01:58 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 14:01:58 [DEBUG] - {
  text: 'SELECT o.*, s.sign_nm, o.updt_yn, ph.org_file_nm, ph.data_file_path,\n' +
    '            ph.longtitude, ph.latitude, s.sign_img_file_path, pm.prj_nm, \n' +
    '            ST_AsText(ST_transform(ST_SetSRID(point, 32652), 4326)) point, count(*) OVER() total \n' +
    '            FROM obj_rs o\n' +
    '            LEFT JOIN tc_trffc_sign s ON o.cd = s.sign_id \n' +
    '            left join photo_mng ph on o.photo_id = ph.photo_id \n' +
    '            left join project_mng pm on o.prj_id = pm.prj_id\n' +
    '            where o.obj_rs_id = $1',
  values: [
    <ref *4> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: null,
        ended: true,
        endEmitted: false,
        reading: false,
        constructed: true,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: 100,
      socket: <ref *3> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: 100,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *2> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *1> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *1] },
              response: ServerResponse { app: [Circular *1] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'D:\\Code\\r-rfms\\agros_net_server_node_git/views',
                'jsonp callback name': 'callback',
                'view engine': 'ejs',
                port: 3001
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'D:\\Code\\r-rfms\\agros_net_server_node_git/views',
                  'jsonp callback name': 'callback',
                  'view engine': 'ejs',
                  port: 3001
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: serveStatic],
                    name: 'serveStatic',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/public\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: serveStatic],
                    name: 'serveStatic',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: serveStatic],
                    name: 'serveStatic',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: cookieParser],
                    name: 'cookieParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: session],
                    name: 'session',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: initialize],
                    name: 'initialize',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: authenticate],
                    name: 'authenticate',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/',
                            stack: [
                              Layer {
                                handle: [Function: getRoot],
                                name: 'getRoot',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/login\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/login',
                            stack: [
                              Layer {
                                handle: [Function: getLogin],
                                name: 'getLogin',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/signup\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/signup',
                            stack: [
                              Layer {
                                handle: [Function: getSignup],
                                name: 'getSignup',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/account\/list\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/account/list',
                            stack: [
                              Layer {
                                handle: [Function: getAccountList],
                                name: 'getAccountList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/account\/my\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/account/my',
                            stack: [
                              Layer {
                                handle: [Function: getAccountMy],
                                name: 'getAccountMy',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'email',
                              optional: false,
                              offset: 16
                            }
                          ],
                          regexp: /^\/account\/view\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/account/view/:email',
                            stack: [
                              Layer {
                                handle: [Function: getAccountView],
                                name: 'getAccountView',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/equip\/list\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/list/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: getListVh],
                                name: 'getListVh',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/equip\/list\/sensor\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/list/sensor',
                            stack: [
                              Layer {
                                handle: [Function: getListSens],
                                name: 'getListSens',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/equip\/add\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/add/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: getAddVehicle],
                                name: 'getAddVehicle',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/equip\/add\/sensor\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/add/sensor',
                            stack: [
                              Layer {
                                handle: [Function: getAddSensor],
                                name: 'getAddSensor',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'vhid',
                              optional: false,
                              offset: 17
                            }
                          ],
                          regexp: /^\/equip\/vehicle\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/vehicle/:vhid',
                            stack: [
                              Layer {
                                handle: [Function: getViewVh],
                                name: 'getViewVh',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'sensid',
                              optional: false,
                              offset: 14
                            }
                          ],
                          regexp: /^\/equip\/sens\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/sens/:sensid',
                            stack: [
                              Layer {
                                handle: [Function: getViewSens],
                                name: 'getViewSens',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/map\/list\/map\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/map/list/map',
                            stack: [
                              Layer {
                                handle: [Function: getListMap],
                                name: 'getListMap',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/list\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/list/prj',
                            stack: [
                              Layer {
                                handle: [Function: getListPrj],
                                name: 'getListPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/add\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/add/prj',
                            stack: [
                              Layer {
                                handle: [Function: getAddPrj],
                                name: 'getAddPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/list\/cam\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/list/cam',
                            stack: [
                              Layer {
                                handle: [Function: getListDataCam],
                                name: 'getListDataCam',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/list\/lidar\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/list/lidar',
                            stack: [
                              Layer {
                                handle: [Function: getListDataLidar],
                                name: 'getListDataLidar',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/list\/obj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/list/obj',
                            stack: [
                              Layer {
                                handle: [Function: getListObj],
                                name: 'getListObj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 18
                            }
                          ],
                          regexp: /^\/data\/view\/prj\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/view/prj/:prjid',
                            stack: [
                              Layer {
                                handle: [Function: getViewPrj],
                                name: 'getViewPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'dataid',
                              optional: false,
                              offset: 19
                            }
                          ],
                          regexp: /^\/data\/view\/data\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/view/data/:dataid',
                            stack: [
                              Layer {
                                handle: [Function: getViewData],
                                name: 'getViewData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/stat\/dashboard\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/stat/dashboard',
                            stack: [
                              Layer {
                                handle: [Function: getDashboard],
                                name: 'getDashboard',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'docname',
                              optional: false,
                              offset: 6
                            }
                          ],
                          regexp: /^\/doc\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/doc/:docname',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getDocuemnt],
                                name: 'getDocuemnt',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/read\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/read',
                            stack: [
                              Layer {
                                handle: [Function: readUserList],
                                name: 'readUserList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/update\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/update',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/update\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/update',
                            stack: [
                              Layer {
                                handle: [Function: postUpdateUser],
                                name: 'postUpdateUser',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/changepw\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/changepw',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postChangePw],
                                name: 'postChangePw',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/reset\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/reset',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postUserReset],
                                name: 'postUserReset',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/add\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/add/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/add\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/add/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: postAddVehicle],
                                name: 'postAddVehicle',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/update\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/update/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/update\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/update/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: postUpdateVehicle],
                                name: 'postUpdateVehicle',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/read\/vh\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/read/vh',
                            stack: [
                              Layer {
                                handle: [Function: readVhList],
                                name: 'readVhList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/add\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/add/sens',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/add\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/add/sens',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postAddSens],
                                name: 'postAddSens',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/read\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/read/sens',
                            stack: [
                              Layer {
                                handle: [Function: readSensList],
                                name: 'readSensList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/update\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/update/sens',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/update\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/update/sens',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postUpdateSens],
                                name: 'postUpdateSens',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/add\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/add/prj',
                            stack: [
                              Layer {
                                handle: [Function: postAddPrj],
                                name: 'postAddPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/delete\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/delete/prj',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postDelPrj],
                                name: 'postDelPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/update\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/update/prj',
                            stack: [
                              Layer {
                                handle: [Function: postUpdatePrj],
                                name: 'postUpdatePrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 29
                            }
                          ],
                          regexp: /^\/api\/data\/upload\/prjdata\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/upload/prjdata/:prjid',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 29
                            }
                          ],
                          regexp: /^\/api\/data\/upload\/prjdata\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/upload/prjdata/:prjid',
                            stack: [
                              Layer {
                                handle: [Function: postUploadPrjDataProc],
                                name: 'postUploadPrjDataProc',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/read\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/read/prj',
                            stack: [
                              Layer {
                                handle: [Function: readPrjList],
                                name: 'readPrjList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/read\/cam\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/read/cam',
                            stack: [
                              Layer {
                                handle: [Function: readDataCamList],
                                name: 'readDataCamList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/read\/lidar\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/read/lidar',
                            stack: [
                              Layer {
                                handle: [Function: readDataLidarList],
                                name: 'readDataLidarList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/read\/obj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/read/obj',
                            stack: [
                              Layer {
                                handle: [Function: readObjList],
                                name: 'readObjList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 21
                            },
                            {
                              name: 'dataty',
                              optional: false,
                              offset: 36
                            }
                          ],
                          regexp: /^\/api\/data\/package\/(?:([^\/]+?))\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/package/:prjid/:dataty',
                            stack: [
                              Layer {
                                handle: [Function: getDataPackage],
                                name: 'getDataPackage',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'dataty',
                              optional: false,
                              offset: 18
                            },
                            {
                              name: 'dataid',
                              optional: false,
                              offset: 33
                            }
                          ],
                          regexp: /^\/api\/data\/down\/(?:([^\/]+?))\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/down/:dataty/:dataid',
                            stack: [
                              Layer {
                                handle: [Function: getDataDownload],
                                name: 'getDataDownload',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 18
                            }
                          ],
                          regexp: /^\/api\/data\/path\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/path/:prjid',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getDataPath],
                                name: 'getDataPath',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/lidar\/img\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/lidar/img',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getLidarImg],
                                name: 'getLidarImg',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/proc\/start\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/proc/start',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: startDataProc],
                                name: 'startDataProc',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/map\/sig\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/map/sig',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postSigBySido],
                                name: 'postSigBySido',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/map\/searchMapPrj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/map/searchMapPrj',
                            stack: [
                              Layer {
                                handle: [Function: postSearchMapByPrj],
                                name: 'postSearchMapByPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/map\/searchMapRegion\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/map/searchMapRegion',
                            stack: [
                              Layer {
                                handle: [Function: postSearchMapByRegion],
                                name: 'postSearchMapByRegion',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/api/map/read/obj',
                          keys: [],
                          regexp: /^\/api\/map\/read\/obj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/map/read/obj',
                            stack: [
                              Layer {
                                handle: [Function: readObj],
                                name: 'readObj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/data-total\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/data-total',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getTotalData],
                                name: 'getTotalData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/prj-status\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/prj-status',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProjectStauts],
                                name: 'getProjectStauts',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/data-period\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/data-period',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getDataPeriod],
                                name: 'getDataPeriod',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/equip\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/equip',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getDataEquipStatus],
                                name: 'getDataEquipStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/object\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/object',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getObjStatus],
                                name: 'getObjStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/auth\/token\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/auth/token',
                            stack: [
                              Layer {
                                handle: [Function: postAuthTokken],
                                name: 'postAuthTokken',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/list\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/list',
                            stack: [
                              Layer {
                                handle: [Function: getEquipList],
                                name: 'getEquipList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/project\/add\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/add',
                            stack: [
                              Layer {
                                handle: [Function: postPrjAdd],
                                name: 'postPrjAdd',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/meta\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/meta',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postMetaData],
                                name: 'postMetaData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 21
                            }
                          ],
                          regexp: /^\/api\/project\/scan\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/scan/:prjid',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getPrjScan],
                                name: 'getPrjScan',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 21
                            }
                          ],
                          regexp: /^\/api\/project\/data\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/data/:prjid',
                            stack: [
                              Layer {
                                handle: [Function: getPrjData],
                                name: 'getPrjData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/project\/sync\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/sync',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postPrjSync],
                                name: 'postPrjSync',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/project\/clone\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/clone',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postClonePrj],
                                name: 'postClonePrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/finish\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/finish',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postFinishData],
                                name: 'postFinishData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/prc-finish\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/prc-finish',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postFinishPrcData],
                                name: 'postFinishPrcData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/debug\/token\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/debug/token',
                            stack: [
                              Layer {
                                handle: [Function: getDebugToken],
                                name: 'getDebugToken',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/debug\/update-pnu\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/debug/update-pnu',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postUpdatePnu],
                                name: 'postUpdatePnu',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/logout\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/logout',
                            stack: [
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/login\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/login',
                            stack: [
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/signup\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/signup',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: httpErr],
                    name: 'httpErr',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: errorHandler],
                    name: 'errorHandler',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: 100,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          noDelay: false,
          keepAlive: false,
          keepAliveInitialDelay: 0,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          maxRequestsPerSocket: 0,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '4:0.0.0.0:3001',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 584
        },
        _server: <ref *2> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *1> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *1] },
              response: ServerResponse { app: [Circular *1] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'D:\\Code\\r-rfms\\agros_net_server_node_git/views',
                'jsonp callback name': 'callback',
                'view engine': 'ejs',
                port: 3001
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'D:\\Code\\r-rfms\\agros_net_server_node_git/views',
                  'jsonp callback name': 'callback',
                  'view engine': 'ejs',
                  port: 3001
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: serveStatic],
                    name: 'serveStatic',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/public\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: serveStatic],
                    name: 'serveStatic',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: serveStatic],
                    name: 'serveStatic',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: cookieParser],
                    name: 'cookieParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: session],
                    name: 'session',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: initialize],
                    name: 'initialize',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: authenticate],
                    name: 'authenticate',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/',
                            stack: [
                              Layer {
                                handle: [Function: getRoot],
                                name: 'getRoot',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/login\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/login',
                            stack: [
                              Layer {
                                handle: [Function: getLogin],
                                name: 'getLogin',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/signup\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/signup',
                            stack: [
                              Layer {
                                handle: [Function: getSignup],
                                name: 'getSignup',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/account\/list\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/account/list',
                            stack: [
                              Layer {
                                handle: [Function: getAccountList],
                                name: 'getAccountList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/account\/my\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/account/my',
                            stack: [
                              Layer {
                                handle: [Function: getAccountMy],
                                name: 'getAccountMy',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'email',
                              optional: false,
                              offset: 16
                            }
                          ],
                          regexp: /^\/account\/view\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/account/view/:email',
                            stack: [
                              Layer {
                                handle: [Function: getAccountView],
                                name: 'getAccountView',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/equip\/list\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/list/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: getListVh],
                                name: 'getListVh',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/equip\/list\/sensor\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/list/sensor',
                            stack: [
                              Layer {
                                handle: [Function: getListSens],
                                name: 'getListSens',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/equip\/add\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/add/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: getAddVehicle],
                                name: 'getAddVehicle',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/equip\/add\/sensor\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/add/sensor',
                            stack: [
                              Layer {
                                handle: [Function: getAddSensor],
                                name: 'getAddSensor',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'vhid',
                              optional: false,
                              offset: 17
                            }
                          ],
                          regexp: /^\/equip\/vehicle\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/vehicle/:vhid',
                            stack: [
                              Layer {
                                handle: [Function: getViewVh],
                                name: 'getViewVh',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'sensid',
                              optional: false,
                              offset: 14
                            }
                          ],
                          regexp: /^\/equip\/sens\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/sens/:sensid',
                            stack: [
                              Layer {
                                handle: [Function: getViewSens],
                                name: 'getViewSens',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/map\/list\/map\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/map/list/map',
                            stack: [
                              Layer {
                                handle: [Function: getListMap],
                                name: 'getListMap',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/list\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/list/prj',
                            stack: [
                              Layer {
                                handle: [Function: getListPrj],
                                name: 'getListPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/add\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/add/prj',
                            stack: [
                              Layer {
                                handle: [Function: getAddPrj],
                                name: 'getAddPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/list\/cam\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/list/cam',
                            stack: [
                              Layer {
                                handle: [Function: getListDataCam],
                                name: 'getListDataCam',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/list\/lidar\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/list/lidar',
                            stack: [
                              Layer {
                                handle: [Function: getListDataLidar],
                                name: 'getListDataLidar',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/list\/obj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/list/obj',
                            stack: [
                              Layer {
                                handle: [Function: getListObj],
                                name: 'getListObj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 18
                            }
                          ],
                          regexp: /^\/data\/view\/prj\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/view/prj/:prjid',
                            stack: [
                              Layer {
                                handle: [Function: getViewPrj],
                                name: 'getViewPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'dataid',
                              optional: false,
                              offset: 19
                            }
                          ],
                          regexp: /^\/data\/view\/data\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/view/data/:dataid',
                            stack: [
                              Layer {
                                handle: [Function: getViewData],
                                name: 'getViewData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/stat\/dashboard\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/stat/dashboard',
                            stack: [
                              Layer {
                                handle: [Function: getDashboard],
                                name: 'getDashboard',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'docname',
                              optional: false,
                              offset: 6
                            }
                          ],
                          regexp: /^\/doc\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/doc/:docname',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getDocuemnt],
                                name: 'getDocuemnt',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/read\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/read',
                            stack: [
                              Layer {
                                handle: [Function: readUserList],
                                name: 'readUserList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/update\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/update',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/update\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/update',
                            stack: [
                              Layer {
                                handle: [Function: postUpdateUser],
                                name: 'postUpdateUser',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/changepw\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/changepw',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postChangePw],
                                name: 'postChangePw',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/reset\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/reset',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postUserReset],
                                name: 'postUserReset',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/add\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/add/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/add\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/add/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: postAddVehicle],
                                name: 'postAddVehicle',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/update\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/update/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/update\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/update/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: postUpdateVehicle],
                                name: 'postUpdateVehicle',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/read\/vh\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/read/vh',
                            stack: [
                              Layer {
                                handle: [Function: readVhList],
                                name: 'readVhList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/add\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/add/sens',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/add\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/add/sens',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postAddSens],
                                name: 'postAddSens',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/read\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/read/sens',
                            stack: [
                              Layer {
                                handle: [Function: readSensList],
                                name: 'readSensList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/update\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/update/sens',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/update\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/update/sens',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postUpdateSens],
                                name: 'postUpdateSens',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/add\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/add/prj',
                            stack: [
                              Layer {
                                handle: [Function: postAddPrj],
                                name: 'postAddPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/delete\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/delete/prj',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postDelPrj],
                                name: 'postDelPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/update\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/update/prj',
                            stack: [
                              Layer {
                                handle: [Function: postUpdatePrj],
                                name: 'postUpdatePrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 29
                            }
                          ],
                          regexp: /^\/api\/data\/upload\/prjdata\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/upload/prjdata/:prjid',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 29
                            }
                          ],
                          regexp: /^\/api\/data\/upload\/prjdata\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/upload/prjdata/:prjid',
                            stack: [
                              Layer {
                                handle: [Function: postUploadPrjDataProc],
                                name: 'postUploadPrjDataProc',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/read\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/read/prj',
                            stack: [
                              Layer {
                                handle: [Function: readPrjList],
                                name: 'readPrjList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/read\/cam\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/read/cam',
                            stack: [
                              Layer {
                                handle: [Function: readDataCamList],
                                name: 'readDataCamList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/read\/lidar\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/read/lidar',
                            stack: [
                              Layer {
                                handle: [Function: readDataLidarList],
                                name: 'readDataLidarList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/read\/obj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/read/obj',
                            stack: [
                              Layer {
                                handle: [Function: readObjList],
                                name: 'readObjList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 21
                            },
                            {
                              name: 'dataty',
                              optional: false,
                              offset: 36
                            }
                          ],
                          regexp: /^\/api\/data\/package\/(?:([^\/]+?))\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/package/:prjid/:dataty',
                            stack: [
                              Layer {
                                handle: [Function: getDataPackage],
                                name: 'getDataPackage',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'dataty',
                              optional: false,
                              offset: 18
                            },
                            {
                              name: 'dataid',
                              optional: false,
                              offset: 33
                            }
                          ],
                          regexp: /^\/api\/data\/down\/(?:([^\/]+?))\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/down/:dataty/:dataid',
                            stack: [
                              Layer {
                                handle: [Function: getDataDownload],
                                name: 'getDataDownload',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 18
                            }
                          ],
                          regexp: /^\/api\/data\/path\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/path/:prjid',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getDataPath],
                                name: 'getDataPath',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/lidar\/img\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/lidar/img',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getLidarImg],
                                name: 'getLidarImg',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/proc\/start\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/proc/start',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: startDataProc],
                                name: 'startDataProc',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/map\/sig\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/map/sig',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postSigBySido],
                                name: 'postSigBySido',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/map\/searchMapPrj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/map/searchMapPrj',
                            stack: [
                              Layer {
                                handle: [Function: postSearchMapByPrj],
                                name: 'postSearchMapByPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/map\/searchMapRegion\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/map/searchMapRegion',
                            stack: [
                              Layer {
                                handle: [Function: postSearchMapByRegion],
                                name: 'postSearchMapByRegion',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/api/map/read/obj',
                          keys: [],
                          regexp: /^\/api\/map\/read\/obj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/map/read/obj',
                            stack: [
                              Layer {
                                handle: [Function: readObj],
                                name: 'readObj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/data-total\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/data-total',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getTotalData],
                                name: 'getTotalData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/prj-status\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/prj-status',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProjectStauts],
                                name: 'getProjectStauts',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/data-period\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/data-period',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getDataPeriod],
                                name: 'getDataPeriod',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/equip\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/equip',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getDataEquipStatus],
                                name: 'getDataEquipStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/object\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/object',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getObjStatus],
                                name: 'getObjStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/auth\/token\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/auth/token',
                            stack: [
                              Layer {
                                handle: [Function: postAuthTokken],
                                name: 'postAuthTokken',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/list\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/list',
                            stack: [
                              Layer {
                                handle: [Function: getEquipList],
                                name: 'getEquipList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/project\/add\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/add',
                            stack: [
                              Layer {
                                handle: [Function: postPrjAdd],
                                name: 'postPrjAdd',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/meta\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/meta',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postMetaData],
                                name: 'postMetaData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 21
                            }
                          ],
                          regexp: /^\/api\/project\/scan\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/scan/:prjid',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getPrjScan],
                                name: 'getPrjScan',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 21
                            }
                          ],
                          regexp: /^\/api\/project\/data\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/data/:prjid',
                            stack: [
                              Layer {
                                handle: [Function: getPrjData],
                                name: 'getPrjData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/project\/sync\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/sync',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postPrjSync],
                                name: 'postPrjSync',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/project\/clone\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/clone',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postClonePrj],
                                name: 'postClonePrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/finish\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/finish',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postFinishData],
                                name: 'postFinishData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/prc-finish\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/prc-finish',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postFinishPrcData],
                                name: 'postFinishPrcData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/debug\/token\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/debug/token',
                            stack: [
                              Layer {
                                handle: [Function: getDebugToken],
                                name: 'getDebugToken',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/debug\/update-pnu\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/debug/update-pnu',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postUpdatePnu],
                                name: 'postUpdatePnu',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/logout\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/logout',
                            stack: [
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/login\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/login',
                            stack: [
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/signup\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/signup',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: httpErr],
                    name: 'httpErr',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: errorHandler],
                    name: 'errorHandler',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: 100,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          noDelay: false,
          keepAlive: false,
          keepAliveInitialDelay: 0,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          maxRequestsPerSocket: 0,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '4:0.0.0.0:3001',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 584
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *3],
          incoming: [Circular *4],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *3]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        setEncoding: [Function: socketSetEncoding],
        _paused: false,
        _httpMessage: ServerResponse {
          _events: [Object: null prototype] {
            finish: [Function: bound resOnFinish]
          },
          _eventsCount: 1,
          _maxListeners: 100,
          outputData: [],
          outputSize: 0,
          writable: true,
          destroyed: false,
          _last: false,
          chunkedEncoding: false,
          shouldKeepAlive: true,
          maxRequestsOnConnectionReached: false,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: true,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          _contentLength: null,
          _hasBody: true,
          _trailer: '',
          finished: false,
          _headerSent: false,
          _closed: false,
          socket: [Circular *3],
          _header: null,
          _keepAliveTimeout: 5000,
          _onPendingData: [Function: bound updateOutgoingData],
          req: [Circular *4],
          _sent100: false,
          _expect_continue: false,
          locals: [Object: null prototype] {},
          writeHead: [Function: writeHead],
          end: [Function: end],
          [Symbol(kCapture)]: false,
          [Symbol(kNeedDrain)]: false,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype] {
            'x-powered-by': [ 'X-Powered-By', 'Express' ]
          }
        },
        [Symbol(async_id_symbol)]: 682,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *3]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: false,
        [Symbol(kSetKeepAliveInitialDelay)]: 0,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'User-Agent',
        'PostmanRuntime/7.32.3',
        'Accept',
        '*/*',
        'Postman-Token',
        '8a1da8f2-f49e-41be-bd99-45188017ebe4',
        'Host',
        'localhost:3001',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive'
      ],
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/api/map/read/obj?obj_rs_id=18552',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: <ref *3> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: 100,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *2> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *1> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *1] },
              response: ServerResponse { app: [Circular *1] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'D:\\Code\\r-rfms\\agros_net_server_node_git/views',
                'jsonp callback name': 'callback',
                'view engine': 'ejs',
                port: 3001
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'D:\\Code\\r-rfms\\agros_net_server_node_git/views',
                  'jsonp callback name': 'callback',
                  'view engine': 'ejs',
                  port: 3001
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: serveStatic],
                    name: 'serveStatic',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/public\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: serveStatic],
                    name: 'serveStatic',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: serveStatic],
                    name: 'serveStatic',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: cookieParser],
                    name: 'cookieParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: session],
                    name: 'session',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: initialize],
                    name: 'initialize',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: authenticate],
                    name: 'authenticate',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/',
                            stack: [
                              Layer {
                                handle: [Function: getRoot],
                                name: 'getRoot',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/login\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/login',
                            stack: [
                              Layer {
                                handle: [Function: getLogin],
                                name: 'getLogin',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/signup\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/signup',
                            stack: [
                              Layer {
                                handle: [Function: getSignup],
                                name: 'getSignup',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/account\/list\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/account/list',
                            stack: [
                              Layer {
                                handle: [Function: getAccountList],
                                name: 'getAccountList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/account\/my\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/account/my',
                            stack: [
                              Layer {
                                handle: [Function: getAccountMy],
                                name: 'getAccountMy',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'email',
                              optional: false,
                              offset: 16
                            }
                          ],
                          regexp: /^\/account\/view\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/account/view/:email',
                            stack: [
                              Layer {
                                handle: [Function: getAccountView],
                                name: 'getAccountView',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/equip\/list\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/list/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: getListVh],
                                name: 'getListVh',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/equip\/list\/sensor\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/list/sensor',
                            stack: [
                              Layer {
                                handle: [Function: getListSens],
                                name: 'getListSens',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/equip\/add\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/add/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: getAddVehicle],
                                name: 'getAddVehicle',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/equip\/add\/sensor\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/add/sensor',
                            stack: [
                              Layer {
                                handle: [Function: getAddSensor],
                                name: 'getAddSensor',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'vhid',
                              optional: false,
                              offset: 17
                            }
                          ],
                          regexp: /^\/equip\/vehicle\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/vehicle/:vhid',
                            stack: [
                              Layer {
                                handle: [Function: getViewVh],
                                name: 'getViewVh',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'sensid',
                              optional: false,
                              offset: 14
                            }
                          ],
                          regexp: /^\/equip\/sens\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/sens/:sensid',
                            stack: [
                              Layer {
                                handle: [Function: getViewSens],
                                name: 'getViewSens',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/map\/list\/map\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/map/list/map',
                            stack: [
                              Layer {
                                handle: [Function: getListMap],
                                name: 'getListMap',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/list\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/list/prj',
                            stack: [
                              Layer {
                                handle: [Function: getListPrj],
                                name: 'getListPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/add\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/add/prj',
                            stack: [
                              Layer {
                                handle: [Function: getAddPrj],
                                name: 'getAddPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/list\/cam\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/list/cam',
                            stack: [
                              Layer {
                                handle: [Function: getListDataCam],
                                name: 'getListDataCam',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/list\/lidar\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/list/lidar',
                            stack: [
                              Layer {
                                handle: [Function: getListDataLidar],
                                name: 'getListDataLidar',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/list\/obj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/list/obj',
                            stack: [
                              Layer {
                                handle: [Function: getListObj],
                                name: 'getListObj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 18
                            }
                          ],
                          regexp: /^\/data\/view\/prj\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/view/prj/:prjid',
                            stack: [
                              Layer {
                                handle: [Function: getViewPrj],
                                name: 'getViewPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'dataid',
                              optional: false,
                              offset: 19
                            }
                          ],
                          regexp: /^\/data\/view\/data\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/view/data/:dataid',
                            stack: [
                              Layer {
                                handle: [Function: getViewData],
                                name: 'getViewData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/stat\/dashboard\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/stat/dashboard',
                            stack: [
                              Layer {
                                handle: [Function: getDashboard],
                                name: 'getDashboard',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'docname',
                              optional: false,
                              offset: 6
                            }
                          ],
                          regexp: /^\/doc\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/doc/:docname',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getDocuemnt],
                                name: 'getDocuemnt',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/read\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/read',
                            stack: [
                              Layer {
                                handle: [Function: readUserList],
                                name: 'readUserList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/update\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/update',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/update\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/update',
                            stack: [
                              Layer {
                                handle: [Function: postUpdateUser],
                                name: 'postUpdateUser',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/changepw\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/changepw',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postChangePw],
                                name: 'postChangePw',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/reset\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/reset',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postUserReset],
                                name: 'postUserReset',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/add\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/add/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/add\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/add/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: postAddVehicle],
                                name: 'postAddVehicle',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/update\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/update/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/update\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/update/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: postUpdateVehicle],
                                name: 'postUpdateVehicle',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/read\/vh\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/read/vh',
                            stack: [
                              Layer {
                                handle: [Function: readVhList],
                                name: 'readVhList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/add\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/add/sens',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/add\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/add/sens',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postAddSens],
                                name: 'postAddSens',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/read\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/read/sens',
                            stack: [
                              Layer {
                                handle: [Function: readSensList],
                                name: 'readSensList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/update\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/update/sens',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/update\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/update/sens',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postUpdateSens],
                                name: 'postUpdateSens',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/add\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/add/prj',
                            stack: [
                              Layer {
                                handle: [Function: postAddPrj],
                                name: 'postAddPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/delete\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/delete/prj',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postDelPrj],
                                name: 'postDelPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/update\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/update/prj',
                            stack: [
                              Layer {
                                handle: [Function: postUpdatePrj],
                                name: 'postUpdatePrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 29
                            }
                          ],
                          regexp: /^\/api\/data\/upload\/prjdata\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/upload/prjdata/:prjid',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 29
                            }
                          ],
                          regexp: /^\/api\/data\/upload\/prjdata\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/upload/prjdata/:prjid',
                            stack: [
                              Layer {
                                handle: [Function: postUploadPrjDataProc],
                                name: 'postUploadPrjDataProc',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/read\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/read/prj',
                            stack: [
                              Layer {
                                handle: [Function: readPrjList],
                                name: 'readPrjList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/read\/cam\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/read/cam',
                            stack: [
                              Layer {
                                handle: [Function: readDataCamList],
                                name: 'readDataCamList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/read\/lidar\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/read/lidar',
                            stack: [
                              Layer {
                                handle: [Function: readDataLidarList],
                                name: 'readDataLidarList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/read\/obj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/read/obj',
                            stack: [
                              Layer {
                                handle: [Function: readObjList],
                                name: 'readObjList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 21
                            },
                            {
                              name: 'dataty',
                              optional: false,
                              offset: 36
                            }
                          ],
                          regexp: /^\/api\/data\/package\/(?:([^\/]+?))\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/package/:prjid/:dataty',
                            stack: [
                              Layer {
                                handle: [Function: getDataPackage],
                                name: 'getDataPackage',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'dataty',
                              optional: false,
                              offset: 18
                            },
                            {
                              name: 'dataid',
                              optional: false,
                              offset: 33
                            }
                          ],
                          regexp: /^\/api\/data\/down\/(?:([^\/]+?))\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/down/:dataty/:dataid',
                            stack: [
                              Layer {
                                handle: [Function: getDataDownload],
                                name: 'getDataDownload',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 18
                            }
                          ],
                          regexp: /^\/api\/data\/path\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/path/:prjid',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getDataPath],
                                name: 'getDataPath',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/lidar\/img\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/lidar/img',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getLidarImg],
                                name: 'getLidarImg',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/proc\/start\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/proc/start',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: startDataProc],
                                name: 'startDataProc',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/map\/sig\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/map/sig',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postSigBySido],
                                name: 'postSigBySido',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/map\/searchMapPrj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/map/searchMapPrj',
                            stack: [
                              Layer {
                                handle: [Function: postSearchMapByPrj],
                                name: 'postSearchMapByPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/map\/searchMapRegion\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/map/searchMapRegion',
                            stack: [
                              Layer {
                                handle: [Function: postSearchMapByRegion],
                                name: 'postSearchMapByRegion',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/api/map/read/obj',
                          keys: [],
                          regexp: /^\/api\/map\/read\/obj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/map/read/obj',
                            stack: [
                              Layer {
                                handle: [Function: readObj],
                                name: 'readObj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/data-total\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/data-total',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getTotalData],
                                name: 'getTotalData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/prj-status\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/prj-status',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProjectStauts],
                                name: 'getProjectStauts',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/data-period\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/data-period',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getDataPeriod],
                                name: 'getDataPeriod',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/equip\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/equip',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getDataEquipStatus],
                                name: 'getDataEquipStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/object\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/object',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getObjStatus],
                                name: 'getObjStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/auth\/token\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/auth/token',
                            stack: [
                              Layer {
                                handle: [Function: postAuthTokken],
                                name: 'postAuthTokken',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/list\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/list',
                            stack: [
                              Layer {
                                handle: [Function: getEquipList],
                                name: 'getEquipList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/project\/add\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/add',
                            stack: [
                              Layer {
                                handle: [Function: postPrjAdd],
                                name: 'postPrjAdd',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/meta\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/meta',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postMetaData],
                                name: 'postMetaData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 21
                            }
                          ],
                          regexp: /^\/api\/project\/scan\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/scan/:prjid',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getPrjScan],
                                name: 'getPrjScan',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 21
                            }
                          ],
                          regexp: /^\/api\/project\/data\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/data/:prjid',
                            stack: [
                              Layer {
                                handle: [Function: getPrjData],
                                name: 'getPrjData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/project\/sync\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/sync',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postPrjSync],
                                name: 'postPrjSync',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/project\/clone\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/clone',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postClonePrj],
                                name: 'postClonePrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/finish\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/finish',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postFinishData],
                                name: 'postFinishData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/prc-finish\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/prc-finish',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postFinishPrcData],
                                name: 'postFinishPrcData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/debug\/token\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/debug/token',
                            stack: [
                              Layer {
                                handle: [Function: getDebugToken],
                                name: 'getDebugToken',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/debug\/update-pnu\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/debug/update-pnu',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postUpdatePnu],
                                name: 'postUpdatePnu',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/logout\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/logout',
                            stack: [
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/login\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/login',
                            stack: [
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/signup\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/signup',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: httpErr],
                    name: 'httpErr',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: errorHandler],
                    name: 'errorHandler',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: 100,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          noDelay: false,
          keepAlive: false,
          keepAliveInitialDelay: 0,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          maxRequestsPerSocket: 0,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '4:0.0.0.0:3001',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 584
        },
        _server: <ref *2> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *1> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *1] },
              response: ServerResponse { app: [Circular *1] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'D:\\Code\\r-rfms\\agros_net_server_node_git/views',
                'jsonp callback name': 'callback',
                'view engine': 'ejs',
                port: 3001
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'D:\\Code\\r-rfms\\agros_net_server_node_git/views',
                  'jsonp callback name': 'callback',
                  'view engine': 'ejs',
                  port: 3001
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: serveStatic],
                    name: 'serveStatic',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/public\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: serveStatic],
                    name: 'serveStatic',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: serveStatic],
                    name: 'serveStatic',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: cookieParser],
                    name: 'cookieParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: session],
                    name: 'session',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: initialize],
                    name: 'initialize',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: authenticate],
                    name: 'authenticate',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/',
                            stack: [
                              Layer {
                                handle: [Function: getRoot],
                                name: 'getRoot',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/login\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/login',
                            stack: [
                              Layer {
                                handle: [Function: getLogin],
                                name: 'getLogin',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/signup\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/signup',
                            stack: [
                              Layer {
                                handle: [Function: getSignup],
                                name: 'getSignup',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/account\/list\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/account/list',
                            stack: [
                              Layer {
                                handle: [Function: getAccountList],
                                name: 'getAccountList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/account\/my\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/account/my',
                            stack: [
                              Layer {
                                handle: [Function: getAccountMy],
                                name: 'getAccountMy',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'email',
                              optional: false,
                              offset: 16
                            }
                          ],
                          regexp: /^\/account\/view\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/account/view/:email',
                            stack: [
                              Layer {
                                handle: [Function: getAccountView],
                                name: 'getAccountView',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/equip\/list\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/list/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: getListVh],
                                name: 'getListVh',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/equip\/list\/sensor\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/list/sensor',
                            stack: [
                              Layer {
                                handle: [Function: getListSens],
                                name: 'getListSens',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/equip\/add\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/add/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: getAddVehicle],
                                name: 'getAddVehicle',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/equip\/add\/sensor\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/add/sensor',
                            stack: [
                              Layer {
                                handle: [Function: getAddSensor],
                                name: 'getAddSensor',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'vhid',
                              optional: false,
                              offset: 17
                            }
                          ],
                          regexp: /^\/equip\/vehicle\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/vehicle/:vhid',
                            stack: [
                              Layer {
                                handle: [Function: getViewVh],
                                name: 'getViewVh',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'sensid',
                              optional: false,
                              offset: 14
                            }
                          ],
                          regexp: /^\/equip\/sens\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/equip/sens/:sensid',
                            stack: [
                              Layer {
                                handle: [Function: getViewSens],
                                name: 'getViewSens',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/map\/list\/map\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/map/list/map',
                            stack: [
                              Layer {
                                handle: [Function: getListMap],
                                name: 'getListMap',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/list\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/list/prj',
                            stack: [
                              Layer {
                                handle: [Function: getListPrj],
                                name: 'getListPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/add\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/add/prj',
                            stack: [
                              Layer {
                                handle: [Function: getAddPrj],
                                name: 'getAddPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/list\/cam\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/list/cam',
                            stack: [
                              Layer {
                                handle: [Function: getListDataCam],
                                name: 'getListDataCam',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/list\/lidar\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/list/lidar',
                            stack: [
                              Layer {
                                handle: [Function: getListDataLidar],
                                name: 'getListDataLidar',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/data\/list\/obj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/list/obj',
                            stack: [
                              Layer {
                                handle: [Function: getListObj],
                                name: 'getListObj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 18
                            }
                          ],
                          regexp: /^\/data\/view\/prj\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/view/prj/:prjid',
                            stack: [
                              Layer {
                                handle: [Function: getViewPrj],
                                name: 'getViewPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'dataid',
                              optional: false,
                              offset: 19
                            }
                          ],
                          regexp: /^\/data\/view\/data\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/data/view/data/:dataid',
                            stack: [
                              Layer {
                                handle: [Function: getViewData],
                                name: 'getViewData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/stat\/dashboard\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/stat/dashboard',
                            stack: [
                              Layer {
                                handle: [Function: getDashboard],
                                name: 'getDashboard',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'docname',
                              optional: false,
                              offset: 6
                            }
                          ],
                          regexp: /^\/doc\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/doc/:docname',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getDocuemnt],
                                name: 'getDocuemnt',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/read\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/read',
                            stack: [
                              Layer {
                                handle: [Function: readUserList],
                                name: 'readUserList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/update\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/update',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/update\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/update',
                            stack: [
                              Layer {
                                handle: [Function: postUpdateUser],
                                name: 'postUpdateUser',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/changepw\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/changepw',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postChangePw],
                                name: 'postChangePw',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/account\/reset\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/account/reset',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postUserReset],
                                name: 'postUserReset',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/add\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/add/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/add\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/add/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: postAddVehicle],
                                name: 'postAddVehicle',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/update\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/update/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/update\/vehicle\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/update/vehicle',
                            stack: [
                              Layer {
                                handle: [Function: postUpdateVehicle],
                                name: 'postUpdateVehicle',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/read\/vh\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/read/vh',
                            stack: [
                              Layer {
                                handle: [Function: readVhList],
                                name: 'readVhList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/add\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/add/sens',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/add\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/add/sens',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postAddSens],
                                name: 'postAddSens',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/read\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/read/sens',
                            stack: [
                              Layer {
                                handle: [Function: readSensList],
                                name: 'readSensList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/update\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/update/sens',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/update\/sens\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/update/sens',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postUpdateSens],
                                name: 'postUpdateSens',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/add\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/add/prj',
                            stack: [
                              Layer {
                                handle: [Function: postAddPrj],
                                name: 'postAddPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/delete\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/delete/prj',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postDelPrj],
                                name: 'postDelPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/update\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/update/prj',
                            stack: [
                              Layer {
                                handle: [Function: postUpdatePrj],
                                name: 'postUpdatePrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 29
                            }
                          ],
                          regexp: /^\/api\/data\/upload\/prjdata\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/upload/prjdata/:prjid',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 29
                            }
                          ],
                          regexp: /^\/api\/data\/upload\/prjdata\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/upload/prjdata/:prjid',
                            stack: [
                              Layer {
                                handle: [Function: postUploadPrjDataProc],
                                name: 'postUploadPrjDataProc',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/read\/prj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/read/prj',
                            stack: [
                              Layer {
                                handle: [Function: readPrjList],
                                name: 'readPrjList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/read\/cam\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/read/cam',
                            stack: [
                              Layer {
                                handle: [Function: readDataCamList],
                                name: 'readDataCamList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/read\/lidar\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/read/lidar',
                            stack: [
                              Layer {
                                handle: [Function: readDataLidarList],
                                name: 'readDataLidarList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/read\/obj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/read/obj',
                            stack: [
                              Layer {
                                handle: [Function: readObjList],
                                name: 'readObjList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 21
                            },
                            {
                              name: 'dataty',
                              optional: false,
                              offset: 36
                            }
                          ],
                          regexp: /^\/api\/data\/package\/(?:([^\/]+?))\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/package/:prjid/:dataty',
                            stack: [
                              Layer {
                                handle: [Function: getDataPackage],
                                name: 'getDataPackage',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'dataty',
                              optional: false,
                              offset: 18
                            },
                            {
                              name: 'dataid',
                              optional: false,
                              offset: 33
                            }
                          ],
                          regexp: /^\/api\/data\/down\/(?:([^\/]+?))\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/down/:dataty/:dataid',
                            stack: [
                              Layer {
                                handle: [Function: getDataDownload],
                                name: 'getDataDownload',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 18
                            }
                          ],
                          regexp: /^\/api\/data\/path\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/path/:prjid',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getDataPath],
                                name: 'getDataPath',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/lidar\/img\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/lidar/img',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getLidarImg],
                                name: 'getLidarImg',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/proc\/start\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/proc/start',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: startDataProc],
                                name: 'startDataProc',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/map\/sig\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/map/sig',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postSigBySido],
                                name: 'postSigBySido',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/map\/searchMapPrj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/map/searchMapPrj',
                            stack: [
                              Layer {
                                handle: [Function: postSearchMapByPrj],
                                name: 'postSearchMapByPrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/map\/searchMapRegion\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/map/searchMapRegion',
                            stack: [
                              Layer {
                                handle: [Function: postSearchMapByRegion],
                                name: 'postSearchMapByRegion',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/api/map/read/obj',
                          keys: [],
                          regexp: /^\/api\/map\/read\/obj\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/map/read/obj',
                            stack: [
                              Layer {
                                handle: [Function: readObj],
                                name: 'readObj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/data-total\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/data-total',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getTotalData],
                                name: 'getTotalData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/prj-status\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/prj-status',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProjectStauts],
                                name: 'getProjectStauts',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/data-period\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/data-period',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getDataPeriod],
                                name: 'getDataPeriod',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/equip\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/equip',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getDataEquipStatus],
                                name: 'getDataEquipStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/stat\/object\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/stat/object',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getObjStatus],
                                name: 'getObjStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/auth\/token\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/auth/token',
                            stack: [
                              Layer {
                                handle: [Function: postAuthTokken],
                                name: 'postAuthTokken',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/equip\/list\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/equip/list',
                            stack: [
                              Layer {
                                handle: [Function: getEquipList],
                                name: 'getEquipList',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/project\/add\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/add',
                            stack: [
                              Layer {
                                handle: [Function: postPrjAdd],
                                name: 'postPrjAdd',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/meta\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/meta',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postMetaData],
                                name: 'postMetaData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 21
                            }
                          ],
                          regexp: /^\/api\/project\/scan\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/scan/:prjid',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getPrjScan],
                                name: 'getPrjScan',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [
                            {
                              name: 'prjid',
                              optional: false,
                              offset: 21
                            }
                          ],
                          regexp: /^\/api\/project\/data\/(?:([^\/]+?))\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/data/:prjid',
                            stack: [
                              Layer {
                                handle: [Function: getPrjData],
                                name: 'getPrjData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/project\/sync\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/sync',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postPrjSync],
                                name: 'postPrjSync',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/project\/clone\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/project/clone',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postClonePrj],
                                name: 'postClonePrj',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/finish\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/finish',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postFinishData],
                                name: 'postFinishData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/data\/prc-finish\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/data/prc-finish',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postFinishPrcData],
                                name: 'postFinishPrcData',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/debug\/token\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/debug/token',
                            stack: [
                              Layer {
                                handle: [Function: getDebugToken],
                                name: 'getDebugToken',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/api\/debug\/update-pnu\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/api/debug/update-pnu',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postUpdatePnu],
                                name: 'postUpdatePnu',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/logout\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/logout',
                            stack: [
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/login\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/login',
                            stack: [
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/signup\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/signup',
                            stack: [
                              Layer {
                                handle: [Function: multerMiddleware],
                                name: 'multerMiddleware',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: httpErr],
                    name: 'httpErr',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: errorHandler],
                    name: 'errorHandler',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: 100,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          noDelay: false,
          keepAlive: false,
          keepAliveInitialDelay: 0,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          maxRequestsPerSocket: 0,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '4:0.0.0.0:3001',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 584
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *3],
          incoming: [Circular *4],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *3]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        setEncoding: [Function: socketSetEncoding],
        _paused: false,
        _httpMessage: ServerResponse {
          _events: [Object: null prototype] {
            finish: [Function: bound resOnFinish]
          },
          _eventsCount: 1,
          _maxListeners: 100,
          outputData: [],
          outputSize: 0,
          writable: true,
          destroyed: false,
          _last: false,
          chunkedEncoding: false,
          shouldKeepAlive: true,
          maxRequestsOnConnectionReached: false,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: true,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          _contentLength: null,
          _hasBody: true,
          _trailer: '',
          finished: false,
          _headerSent: false,
          _closed: false,
          socket: [Circular *3],
          _header: null,
          _keepAliveTimeout: 5000,
          _onPendingData: [Function: bound updateOutgoingData],
          req: [Circular *4],
          _sent100: false,
          _expect_continue: false,
          locals: [Object: null prototype] {},
          writeHead: [Function: writeHead],
          end: [Function: end],
          [Symbol(kCapture)]: false,
          [Symbol(kNeedDrain)]: false,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype] {
            'x-powered-by': [ 'X-Powered-By', 'Express' ]
          }
        },
        [Symbol(async_id_symbol)]: 682,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *3]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: false,
        [Symbol(kSetKeepAliveInitialDelay)]: 0,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: false,
      _dumped: false,
      next: [Function: next],
      baseUrl: '',
      originalUrl: '/api/map/read/obj?obj_rs_id=18552',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: '?obj_rs_id=18552',
        query: 'obj_rs_id=18552',
        pathname: '/api/map/read/obj',
        path: '/api/map/read/obj?obj_rs_id=18552',
        href: '/api/map/read/obj?obj_rs_id=18552',
        _raw: '/api/map/read/obj?obj_rs_id=18552'
      },
      params: {},
      query: { obj_rs_id: '18552' },
      res: <ref *5> ServerResponse {
        _events: [Object: null prototype] {
          finish: [Function: bound resOnFinish]
        },
        _eventsCount: 1,
        _maxListeners: 100,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        _closed: false,
        socket: <ref *3> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: null,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [
              [Function: onReadableStreamEnd],
              [Function: bound socketOnEnd]
            ],
            timeout: [Function: socketOnTimeout],
            data: [Function: bound socketOnData],
            error: [Function: socketOnError],
            close: [
              [Function: bound socketOnClose],
              [Function: onServerResponseClose]
            ],
            drain: [Function: bound socketOnDrain],
            resume: [Function: onSocketResume],
            pause: [Function: onSocketPause]
          },
          _eventsCount: 8,
          _maxListeners: 100,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: true,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: <ref *2> Server {
            maxHeaderSize: undefined,
            insecureHTTPParser: undefined,
            _events: [Object: null prototype] {
              request: <ref *1> [Function: app] {
                _events: [Object: null prototype] { mount: [Function: onmount] },
                _eventsCount: 1,
                _maxListeners: undefined,
                setMaxListeners: [Function: setMaxListeners],
                getMaxListeners: [Function: getMaxListeners],
                emit: [Function: emit],
                addListener: [Function: addListener],
                on: [Function: addListener],
                prependListener: [Function: prependListener],
                once: [Function: once],
                prependOnceListener: [Function: prependOnceListener],
                removeListener: [Function: removeListener],
                off: [Function: removeListener],
                removeAllListeners: [Function: removeAllListeners],
                listeners: [Function: listeners],
                rawListeners: [Function: rawListeners],
                listenerCount: [Function: listenerCount],
                eventNames: [Function: eventNames],
                init: [Function: init],
                defaultConfiguration: [Function: defaultConfiguration],
                lazyrouter: [Function: lazyrouter],
                handle: [Function: handle],
                use: [Function: use],
                route: [Function: route],
                engine: [Function: engine],
                param: [Function: param],
                set: [Function: set],
                path: [Function: path],
                enabled: [Function: enabled],
                disabled: [Function: disabled],
                enable: [Function: enable],
                disable: [Function: disable],
                acl: [Function (anonymous)],
                bind: [Function (anonymous)],
                checkout: [Function (anonymous)],
                connect: [Function (anonymous)],
                copy: [Function (anonymous)],
                delete: [Function (anonymous)],
                get: [Function (anonymous)],
                head: [Function (anonymous)],
                link: [Function (anonymous)],
                lock: [Function (anonymous)],
                'm-search': [Function (anonymous)],
                merge: [Function (anonymous)],
                mkactivity: [Function (anonymous)],
                mkcalendar: [Function (anonymous)],
                mkcol: [Function (anonymous)],
                move: [Function (anonymous)],
                notify: [Function (anonymous)],
                options: [Function (anonymous)],
                patch: [Function (anonymous)],
                post: [Function (anonymous)],
                propfind: [Function (anonymous)],
                proppatch: [Function (anonymous)],
                purge: [Function (anonymous)],
                put: [Function (anonymous)],
                rebind: [Function (anonymous)],
                report: [Function (anonymous)],
                search: [Function (anonymous)],
                source: [Function (anonymous)],
                subscribe: [Function (anonymous)],
                trace: [Function (anonymous)],
                unbind: [Function (anonymous)],
                unlink: [Function (anonymous)],
                unlock: [Function (anonymous)],
                unsubscribe: [Function (anonymous)],
                all: [Function: all],
                del: [Function (anonymous)],
                render: [Function: render],
                listen: [Function: listen],
                request: IncomingMessage { app: [Circular *1] },
                response: ServerResponse { app: [Circular *1] },
                cache: {},
                engines: {},
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'D:\\Code\\r-rfms\\agros_net_server_node_git/views',
                  'jsonp callback name': 'callback',
                  'view engine': 'ejs',
                  port: 3001
                },
                locals: [Object: null prototype] {
                  settings: {
                    'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: 'D:\\Code\\r-rfms\\agros_net_server_node_git/views',
                    'jsonp callback name': 'callback',
                    'view engine': 'ejs',
                    port: 3001
                  }
                },
                mountpath: '/',
                _router: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: false,
                  mergeParams: undefined,
                  strict: false,
                  stack: [
                    Layer {
                      handle: [Function: query],
                      name: 'query',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: expressInit],
                      name: 'expressInit',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: urlencodedParser],
                      name: 'urlencodedParser',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: jsonParser],
                      name: 'jsonParser',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: serveStatic],
                      name: 'serveStatic',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/public\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: serveStatic],
                      name: 'serveStatic',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: serveStatic],
                      name: 'serveStatic',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/data\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: cookieParser],
                      name: 'cookieParser',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: session],
                      name: 'session',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: initialize],
                      name: 'initialize',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: authenticate],
                      name: 'authenticate',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/',
                              stack: [
                                Layer {
                                  handle: [Function: getRoot],
                                  name: 'getRoot',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/login\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/login',
                              stack: [
                                Layer {
                                  handle: [Function: getLogin],
                                  name: 'getLogin',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/signup\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/signup',
                              stack: [
                                Layer {
                                  handle: [Function: getSignup],
                                  name: 'getSignup',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/account\/list\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/account/list',
                              stack: [
                                Layer {
                                  handle: [Function: getAccountList],
                                  name: 'getAccountList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/account\/my\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/account/my',
                              stack: [
                                Layer {
                                  handle: [Function: getAccountMy],
                                  name: 'getAccountMy',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'email',
                                optional: false,
                                offset: 16
                              }
                            ],
                            regexp: /^\/account\/view\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/account/view/:email',
                              stack: [
                                Layer {
                                  handle: [Function: getAccountView],
                                  name: 'getAccountView',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/equip\/list\/vehicle\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/equip/list/vehicle',
                              stack: [
                                Layer {
                                  handle: [Function: getListVh],
                                  name: 'getListVh',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/equip\/list\/sensor\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/equip/list/sensor',
                              stack: [
                                Layer {
                                  handle: [Function: getListSens],
                                  name: 'getListSens',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/equip\/add\/vehicle\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/equip/add/vehicle',
                              stack: [
                                Layer {
                                  handle: [Function: getAddVehicle],
                                  name: 'getAddVehicle',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/equip\/add\/sensor\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/equip/add/sensor',
                              stack: [
                                Layer {
                                  handle: [Function: getAddSensor],
                                  name: 'getAddSensor',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'vhid',
                                optional: false,
                                offset: 17
                              }
                            ],
                            regexp: /^\/equip\/vehicle\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/equip/vehicle/:vhid',
                              stack: [
                                Layer {
                                  handle: [Function: getViewVh],
                                  name: 'getViewVh',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'sensid',
                                optional: false,
                                offset: 14
                              }
                            ],
                            regexp: /^\/equip\/sens\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/equip/sens/:sensid',
                              stack: [
                                Layer {
                                  handle: [Function: getViewSens],
                                  name: 'getViewSens',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/map\/list\/map\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/map/list/map',
                              stack: [
                                Layer {
                                  handle: [Function: getListMap],
                                  name: 'getListMap',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/data\/list\/prj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/data/list/prj',
                              stack: [
                                Layer {
                                  handle: [Function: getListPrj],
                                  name: 'getListPrj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/data\/add\/prj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/data/add/prj',
                              stack: [
                                Layer {
                                  handle: [Function: getAddPrj],
                                  name: 'getAddPrj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/data\/list\/cam\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/data/list/cam',
                              stack: [
                                Layer {
                                  handle: [Function: getListDataCam],
                                  name: 'getListDataCam',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/data\/list\/lidar\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/data/list/lidar',
                              stack: [
                                Layer {
                                  handle: [Function: getListDataLidar],
                                  name: 'getListDataLidar',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/data\/list\/obj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/data/list/obj',
                              stack: [
                                Layer {
                                  handle: [Function: getListObj],
                                  name: 'getListObj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'prjid',
                                optional: false,
                                offset: 18
                              }
                            ],
                            regexp: /^\/data\/view\/prj\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/data/view/prj/:prjid',
                              stack: [
                                Layer {
                                  handle: [Function: getViewPrj],
                                  name: 'getViewPrj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'dataid',
                                optional: false,
                                offset: 19
                              }
                            ],
                            regexp: /^\/data\/view\/data\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/data/view/data/:dataid',
                              stack: [
                                Layer {
                                  handle: [Function: getViewData],
                                  name: 'getViewData',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/stat\/dashboard\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/stat/dashboard',
                              stack: [
                                Layer {
                                  handle: [Function: getDashboard],
                                  name: 'getDashboard',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'docname',
                                optional: false,
                                offset: 6
                              }
                            ],
                            regexp: /^\/doc\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/doc/:docname',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getDocuemnt],
                                  name: 'getDocuemnt',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/account\/read\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/account/read',
                              stack: [
                                Layer {
                                  handle: [Function: readUserList],
                                  name: 'readUserList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/account\/update\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/account/update',
                              stack: [
                                Layer {
                                  handle: [Function: multerMiddleware],
                                  name: 'multerMiddleware',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/account\/update\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/account/update',
                              stack: [
                                Layer {
                                  handle: [Function: postUpdateUser],
                                  name: 'postUpdateUser',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/account\/changepw\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/account/changepw',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postChangePw],
                                  name: 'postChangePw',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/account\/reset\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/account/reset',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postUserReset],
                                  name: 'postUserReset',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/add\/vehicle\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/add/vehicle',
                              stack: [
                                Layer {
                                  handle: [Function: multerMiddleware],
                                  name: 'multerMiddleware',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/add\/vehicle\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/add/vehicle',
                              stack: [
                                Layer {
                                  handle: [Function: postAddVehicle],
                                  name: 'postAddVehicle',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/update\/vehicle\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/update/vehicle',
                              stack: [
                                Layer {
                                  handle: [Function: multerMiddleware],
                                  name: 'multerMiddleware',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/update\/vehicle\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/update/vehicle',
                              stack: [
                                Layer {
                                  handle: [Function: postUpdateVehicle],
                                  name: 'postUpdateVehicle',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/read\/vh\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/read/vh',
                              stack: [
                                Layer {
                                  handle: [Function: readVhList],
                                  name: 'readVhList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/add\/sens\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/add/sens',
                              stack: [
                                Layer {
                                  handle: [Function: multerMiddleware],
                                  name: 'multerMiddleware',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/add\/sens\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/add/sens',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postAddSens],
                                  name: 'postAddSens',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/read\/sens\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/read/sens',
                              stack: [
                                Layer {
                                  handle: [Function: readSensList],
                                  name: 'readSensList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/update\/sens\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/update/sens',
                              stack: [
                                Layer {
                                  handle: [Function: multerMiddleware],
                                  name: 'multerMiddleware',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/update\/sens\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/update/sens',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postUpdateSens],
                                  name: 'postUpdateSens',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/add\/prj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/add/prj',
                              stack: [
                                Layer {
                                  handle: [Function: postAddPrj],
                                  name: 'postAddPrj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/delete\/prj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/delete/prj',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postDelPrj],
                                  name: 'postDelPrj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/update\/prj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/update/prj',
                              stack: [
                                Layer {
                                  handle: [Function: postUpdatePrj],
                                  name: 'postUpdatePrj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'prjid',
                                optional: false,
                                offset: 29
                              }
                            ],
                            regexp: /^\/api\/data\/upload\/prjdata\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/upload/prjdata/:prjid',
                              stack: [
                                Layer {
                                  handle: [Function: multerMiddleware],
                                  name: 'multerMiddleware',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'prjid',
                                optional: false,
                                offset: 29
                              }
                            ],
                            regexp: /^\/api\/data\/upload\/prjdata\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/upload/prjdata/:prjid',
                              stack: [
                                Layer {
                                  handle: [Function: postUploadPrjDataProc],
                                  name: 'postUploadPrjDataProc',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/read\/prj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/read/prj',
                              stack: [
                                Layer {
                                  handle: [Function: readPrjList],
                                  name: 'readPrjList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/read\/cam\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/read/cam',
                              stack: [
                                Layer {
                                  handle: [Function: readDataCamList],
                                  name: 'readDataCamList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/read\/lidar\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/read/lidar',
                              stack: [
                                Layer {
                                  handle: [Function: readDataLidarList],
                                  name: 'readDataLidarList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/read\/obj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/read/obj',
                              stack: [
                                Layer {
                                  handle: [Function: readObjList],
                                  name: 'readObjList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'prjid',
                                optional: false,
                                offset: 21
                              },
                              {
                                name: 'dataty',
                                optional: false,
                                offset: 36
                              }
                            ],
                            regexp: /^\/api\/data\/package\/(?:([^\/]+?))\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/package/:prjid/:dataty',
                              stack: [
                                Layer {
                                  handle: [Function: getDataPackage],
                                  name: 'getDataPackage',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'dataty',
                                optional: false,
                                offset: 18
                              },
                              {
                                name: 'dataid',
                                optional: false,
                                offset: 33
                              }
                            ],
                            regexp: /^\/api\/data\/down\/(?:([^\/]+?))\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/down/:dataty/:dataid',
                              stack: [
                                Layer {
                                  handle: [Function: getDataDownload],
                                  name: 'getDataDownload',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'prjid',
                                optional: false,
                                offset: 18
                              }
                            ],
                            regexp: /^\/api\/data\/path\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/path/:prjid',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getDataPath],
                                  name: 'getDataPath',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/lidar\/img\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/lidar/img',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getLidarImg],
                                  name: 'getLidarImg',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/proc\/start\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/proc/start',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: startDataProc],
                                  name: 'startDataProc',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/map\/sig\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/map/sig',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postSigBySido],
                                  name: 'postSigBySido',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/map\/searchMapPrj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/map/searchMapPrj',
                              stack: [
                                Layer {
                                  handle: [Function: postSearchMapByPrj],
                                  name: 'postSearchMapByPrj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/map\/searchMapRegion\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/map/searchMapRegion',
                              stack: [
                                Layer {
                                  handle: [Function: postSearchMapByRegion],
                                  name: 'postSearchMapByRegion',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: {},
                            path: '/api/map/read/obj',
                            keys: [],
                            regexp: /^\/api\/map\/read\/obj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/map/read/obj',
                              stack: [
                                Layer {
                                  handle: [Function: readObj],
                                  name: 'readObj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/stat\/data-total\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/stat/data-total',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getTotalData],
                                  name: 'getTotalData',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/stat\/prj-status\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/stat/prj-status',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getProjectStauts],
                                  name: 'getProjectStauts',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/stat\/data-period\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/stat/data-period',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getDataPeriod],
                                  name: 'getDataPeriod',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/stat\/equip\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/stat/equip',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getDataEquipStatus],
                                  name: 'getDataEquipStatus',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/stat\/object\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/stat/object',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getObjStatus],
                                  name: 'getObjStatus',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/auth\/token\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/auth/token',
                              stack: [
                                Layer {
                                  handle: [Function: postAuthTokken],
                                  name: 'postAuthTokken',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/list\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/list',
                              stack: [
                                Layer {
                                  handle: [Function: getEquipList],
                                  name: 'getEquipList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/project\/add\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/project/add',
                              stack: [
                                Layer {
                                  handle: [Function: postPrjAdd],
                                  name: 'postPrjAdd',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/meta\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/meta',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postMetaData],
                                  name: 'postMetaData',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'prjid',
                                optional: false,
                                offset: 21
                              }
                            ],
                            regexp: /^\/api\/project\/scan\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/project/scan/:prjid',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getPrjScan],
                                  name: 'getPrjScan',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'prjid',
                                optional: false,
                                offset: 21
                              }
                            ],
                            regexp: /^\/api\/project\/data\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/project/data/:prjid',
                              stack: [
                                Layer {
                                  handle: [Function: getPrjData],
                                  name: 'getPrjData',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/project\/sync\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/project/sync',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postPrjSync],
                                  name: 'postPrjSync',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/project\/clone\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/project/clone',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postClonePrj],
                                  name: 'postClonePrj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/finish\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/finish',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postFinishData],
                                  name: 'postFinishData',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/prc-finish\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/prc-finish',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postFinishPrcData],
                                  name: 'postFinishPrcData',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/debug\/token\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/debug/token',
                              stack: [
                                Layer {
                                  handle: [Function: getDebugToken],
                                  name: 'getDebugToken',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/debug\/update-pnu\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/debug/update-pnu',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postUpdatePnu],
                                  name: 'postUpdatePnu',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/logout\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/logout',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/login\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/login',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/signup\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/signup',
                              stack: [
                                Layer {
                                  handle: [Function: multerMiddleware],
                                  name: 'multerMiddleware',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: httpErr],
                      name: 'httpErr',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: errorHandler],
                      name: 'errorHandler',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    }
                  ]
                }
              },
              connection: [Function: connectionListener]
            },
            _eventsCount: 2,
            _maxListeners: 100,
            _connections: 1,
            _handle: TCP {
              reading: false,
              onconnection: [Function: onconnection],
              [Symbol(owner_symbol)]: [Circular *2]
            },
            _usingWorkers: false,
            _workers: [],
            _unref: false,
            allowHalfOpen: true,
            pauseOnConnect: false,
            noDelay: false,
            keepAlive: false,
            keepAliveInitialDelay: 0,
            httpAllowHalfOpen: false,
            timeout: 0,
            keepAliveTimeout: 5000,
            maxHeadersCount: null,
            maxRequestsPerSocket: 0,
            headersTimeout: 60000,
            requestTimeout: 0,
            _connectionKey: '4:0.0.0.0:3001',
            [Symbol(IncomingMessage)]: [Function: IncomingMessage],
            [Symbol(ServerResponse)]: [Function: ServerResponse],
            [Symbol(kCapture)]: false,
            [Symbol(async_id_symbol)]: 584
          },
          _server: <ref *2> Server {
            maxHeaderSize: undefined,
            insecureHTTPParser: undefined,
            _events: [Object: null prototype] {
              request: <ref *1> [Function: app] {
                _events: [Object: null prototype] { mount: [Function: onmount] },
                _eventsCount: 1,
                _maxListeners: undefined,
                setMaxListeners: [Function: setMaxListeners],
                getMaxListeners: [Function: getMaxListeners],
                emit: [Function: emit],
                addListener: [Function: addListener],
                on: [Function: addListener],
                prependListener: [Function: prependListener],
                once: [Function: once],
                prependOnceListener: [Function: prependOnceListener],
                removeListener: [Function: removeListener],
                off: [Function: removeListener],
                removeAllListeners: [Function: removeAllListeners],
                listeners: [Function: listeners],
                rawListeners: [Function: rawListeners],
                listenerCount: [Function: listenerCount],
                eventNames: [Function: eventNames],
                init: [Function: init],
                defaultConfiguration: [Function: defaultConfiguration],
                lazyrouter: [Function: lazyrouter],
                handle: [Function: handle],
                use: [Function: use],
                route: [Function: route],
                engine: [Function: engine],
                param: [Function: param],
                set: [Function: set],
                path: [Function: path],
                enabled: [Function: enabled],
                disabled: [Function: disabled],
                enable: [Function: enable],
                disable: [Function: disable],
                acl: [Function (anonymous)],
                bind: [Function (anonymous)],
                checkout: [Function (anonymous)],
                connect: [Function (anonymous)],
                copy: [Function (anonymous)],
                delete: [Function (anonymous)],
                get: [Function (anonymous)],
                head: [Function (anonymous)],
                link: [Function (anonymous)],
                lock: [Function (anonymous)],
                'm-search': [Function (anonymous)],
                merge: [Function (anonymous)],
                mkactivity: [Function (anonymous)],
                mkcalendar: [Function (anonymous)],
                mkcol: [Function (anonymous)],
                move: [Function (anonymous)],
                notify: [Function (anonymous)],
                options: [Function (anonymous)],
                patch: [Function (anonymous)],
                post: [Function (anonymous)],
                propfind: [Function (anonymous)],
                proppatch: [Function (anonymous)],
                purge: [Function (anonymous)],
                put: [Function (anonymous)],
                rebind: [Function (anonymous)],
                report: [Function (anonymous)],
                search: [Function (anonymous)],
                source: [Function (anonymous)],
                subscribe: [Function (anonymous)],
                trace: [Function (anonymous)],
                unbind: [Function (anonymous)],
                unlink: [Function (anonymous)],
                unlock: [Function (anonymous)],
                unsubscribe: [Function (anonymous)],
                all: [Function: all],
                del: [Function (anonymous)],
                render: [Function: render],
                listen: [Function: listen],
                request: IncomingMessage { app: [Circular *1] },
                response: ServerResponse { app: [Circular *1] },
                cache: {},
                engines: {},
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'D:\\Code\\r-rfms\\agros_net_server_node_git/views',
                  'jsonp callback name': 'callback',
                  'view engine': 'ejs',
                  port: 3001
                },
                locals: [Object: null prototype] {
                  settings: {
                    'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: 'D:\\Code\\r-rfms\\agros_net_server_node_git/views',
                    'jsonp callback name': 'callback',
                    'view engine': 'ejs',
                    port: 3001
                  }
                },
                mountpath: '/',
                _router: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: false,
                  mergeParams: undefined,
                  strict: false,
                  stack: [
                    Layer {
                      handle: [Function: query],
                      name: 'query',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: expressInit],
                      name: 'expressInit',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: urlencodedParser],
                      name: 'urlencodedParser',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: jsonParser],
                      name: 'jsonParser',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: serveStatic],
                      name: 'serveStatic',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/public\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: serveStatic],
                      name: 'serveStatic',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: serveStatic],
                      name: 'serveStatic',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/data\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: cookieParser],
                      name: 'cookieParser',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: session],
                      name: 'session',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: initialize],
                      name: 'initialize',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: authenticate],
                      name: 'authenticate',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/',
                              stack: [
                                Layer {
                                  handle: [Function: getRoot],
                                  name: 'getRoot',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/login\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/login',
                              stack: [
                                Layer {
                                  handle: [Function: getLogin],
                                  name: 'getLogin',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/signup\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/signup',
                              stack: [
                                Layer {
                                  handle: [Function: getSignup],
                                  name: 'getSignup',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/account\/list\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/account/list',
                              stack: [
                                Layer {
                                  handle: [Function: getAccountList],
                                  name: 'getAccountList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/account\/my\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/account/my',
                              stack: [
                                Layer {
                                  handle: [Function: getAccountMy],
                                  name: 'getAccountMy',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'email',
                                optional: false,
                                offset: 16
                              }
                            ],
                            regexp: /^\/account\/view\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/account/view/:email',
                              stack: [
                                Layer {
                                  handle: [Function: getAccountView],
                                  name: 'getAccountView',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/equip\/list\/vehicle\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/equip/list/vehicle',
                              stack: [
                                Layer {
                                  handle: [Function: getListVh],
                                  name: 'getListVh',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/equip\/list\/sensor\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/equip/list/sensor',
                              stack: [
                                Layer {
                                  handle: [Function: getListSens],
                                  name: 'getListSens',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/equip\/add\/vehicle\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/equip/add/vehicle',
                              stack: [
                                Layer {
                                  handle: [Function: getAddVehicle],
                                  name: 'getAddVehicle',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/equip\/add\/sensor\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/equip/add/sensor',
                              stack: [
                                Layer {
                                  handle: [Function: getAddSensor],
                                  name: 'getAddSensor',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'vhid',
                                optional: false,
                                offset: 17
                              }
                            ],
                            regexp: /^\/equip\/vehicle\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/equip/vehicle/:vhid',
                              stack: [
                                Layer {
                                  handle: [Function: getViewVh],
                                  name: 'getViewVh',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'sensid',
                                optional: false,
                                offset: 14
                              }
                            ],
                            regexp: /^\/equip\/sens\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/equip/sens/:sensid',
                              stack: [
                                Layer {
                                  handle: [Function: getViewSens],
                                  name: 'getViewSens',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/map\/list\/map\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/map/list/map',
                              stack: [
                                Layer {
                                  handle: [Function: getListMap],
                                  name: 'getListMap',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/data\/list\/prj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/data/list/prj',
                              stack: [
                                Layer {
                                  handle: [Function: getListPrj],
                                  name: 'getListPrj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/data\/add\/prj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/data/add/prj',
                              stack: [
                                Layer {
                                  handle: [Function: getAddPrj],
                                  name: 'getAddPrj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/data\/list\/cam\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/data/list/cam',
                              stack: [
                                Layer {
                                  handle: [Function: getListDataCam],
                                  name: 'getListDataCam',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/data\/list\/lidar\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/data/list/lidar',
                              stack: [
                                Layer {
                                  handle: [Function: getListDataLidar],
                                  name: 'getListDataLidar',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/data\/list\/obj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/data/list/obj',
                              stack: [
                                Layer {
                                  handle: [Function: getListObj],
                                  name: 'getListObj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'prjid',
                                optional: false,
                                offset: 18
                              }
                            ],
                            regexp: /^\/data\/view\/prj\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/data/view/prj/:prjid',
                              stack: [
                                Layer {
                                  handle: [Function: getViewPrj],
                                  name: 'getViewPrj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'dataid',
                                optional: false,
                                offset: 19
                              }
                            ],
                            regexp: /^\/data\/view\/data\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/data/view/data/:dataid',
                              stack: [
                                Layer {
                                  handle: [Function: getViewData],
                                  name: 'getViewData',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/stat\/dashboard\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/stat/dashboard',
                              stack: [
                                Layer {
                                  handle: [Function: getDashboard],
                                  name: 'getDashboard',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'docname',
                                optional: false,
                                offset: 6
                              }
                            ],
                            regexp: /^\/doc\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/doc/:docname',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getDocuemnt],
                                  name: 'getDocuemnt',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/account\/read\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/account/read',
                              stack: [
                                Layer {
                                  handle: [Function: readUserList],
                                  name: 'readUserList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/account\/update\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/account/update',
                              stack: [
                                Layer {
                                  handle: [Function: multerMiddleware],
                                  name: 'multerMiddleware',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/account\/update\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/account/update',
                              stack: [
                                Layer {
                                  handle: [Function: postUpdateUser],
                                  name: 'postUpdateUser',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/account\/changepw\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/account/changepw',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postChangePw],
                                  name: 'postChangePw',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/account\/reset\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/account/reset',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postUserReset],
                                  name: 'postUserReset',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/add\/vehicle\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/add/vehicle',
                              stack: [
                                Layer {
                                  handle: [Function: multerMiddleware],
                                  name: 'multerMiddleware',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/add\/vehicle\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/add/vehicle',
                              stack: [
                                Layer {
                                  handle: [Function: postAddVehicle],
                                  name: 'postAddVehicle',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/update\/vehicle\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/update/vehicle',
                              stack: [
                                Layer {
                                  handle: [Function: multerMiddleware],
                                  name: 'multerMiddleware',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/update\/vehicle\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/update/vehicle',
                              stack: [
                                Layer {
                                  handle: [Function: postUpdateVehicle],
                                  name: 'postUpdateVehicle',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/read\/vh\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/read/vh',
                              stack: [
                                Layer {
                                  handle: [Function: readVhList],
                                  name: 'readVhList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/add\/sens\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/add/sens',
                              stack: [
                                Layer {
                                  handle: [Function: multerMiddleware],
                                  name: 'multerMiddleware',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/add\/sens\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/add/sens',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postAddSens],
                                  name: 'postAddSens',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/read\/sens\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/read/sens',
                              stack: [
                                Layer {
                                  handle: [Function: readSensList],
                                  name: 'readSensList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/update\/sens\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/update/sens',
                              stack: [
                                Layer {
                                  handle: [Function: multerMiddleware],
                                  name: 'multerMiddleware',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/update\/sens\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/update/sens',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postUpdateSens],
                                  name: 'postUpdateSens',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/add\/prj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/add/prj',
                              stack: [
                                Layer {
                                  handle: [Function: postAddPrj],
                                  name: 'postAddPrj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/delete\/prj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/delete/prj',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postDelPrj],
                                  name: 'postDelPrj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/update\/prj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/update/prj',
                              stack: [
                                Layer {
                                  handle: [Function: postUpdatePrj],
                                  name: 'postUpdatePrj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'prjid',
                                optional: false,
                                offset: 29
                              }
                            ],
                            regexp: /^\/api\/data\/upload\/prjdata\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/upload/prjdata/:prjid',
                              stack: [
                                Layer {
                                  handle: [Function: multerMiddleware],
                                  name: 'multerMiddleware',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'prjid',
                                optional: false,
                                offset: 29
                              }
                            ],
                            regexp: /^\/api\/data\/upload\/prjdata\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/upload/prjdata/:prjid',
                              stack: [
                                Layer {
                                  handle: [Function: postUploadPrjDataProc],
                                  name: 'postUploadPrjDataProc',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/read\/prj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/read/prj',
                              stack: [
                                Layer {
                                  handle: [Function: readPrjList],
                                  name: 'readPrjList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/read\/cam\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/read/cam',
                              stack: [
                                Layer {
                                  handle: [Function: readDataCamList],
                                  name: 'readDataCamList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/read\/lidar\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/read/lidar',
                              stack: [
                                Layer {
                                  handle: [Function: readDataLidarList],
                                  name: 'readDataLidarList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/read\/obj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/read/obj',
                              stack: [
                                Layer {
                                  handle: [Function: readObjList],
                                  name: 'readObjList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'prjid',
                                optional: false,
                                offset: 21
                              },
                              {
                                name: 'dataty',
                                optional: false,
                                offset: 36
                              }
                            ],
                            regexp: /^\/api\/data\/package\/(?:([^\/]+?))\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/package/:prjid/:dataty',
                              stack: [
                                Layer {
                                  handle: [Function: getDataPackage],
                                  name: 'getDataPackage',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'dataty',
                                optional: false,
                                offset: 18
                              },
                              {
                                name: 'dataid',
                                optional: false,
                                offset: 33
                              }
                            ],
                            regexp: /^\/api\/data\/down\/(?:([^\/]+?))\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/down/:dataty/:dataid',
                              stack: [
                                Layer {
                                  handle: [Function: getDataDownload],
                                  name: 'getDataDownload',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'prjid',
                                optional: false,
                                offset: 18
                              }
                            ],
                            regexp: /^\/api\/data\/path\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/path/:prjid',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getDataPath],
                                  name: 'getDataPath',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/lidar\/img\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/lidar/img',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getLidarImg],
                                  name: 'getLidarImg',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/proc\/start\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/proc/start',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: startDataProc],
                                  name: 'startDataProc',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/map\/sig\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/map/sig',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postSigBySido],
                                  name: 'postSigBySido',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/map\/searchMapPrj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/map/searchMapPrj',
                              stack: [
                                Layer {
                                  handle: [Function: postSearchMapByPrj],
                                  name: 'postSearchMapByPrj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/map\/searchMapRegion\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/map/searchMapRegion',
                              stack: [
                                Layer {
                                  handle: [Function: postSearchMapByRegion],
                                  name: 'postSearchMapByRegion',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: {},
                            path: '/api/map/read/obj',
                            keys: [],
                            regexp: /^\/api\/map\/read\/obj\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/map/read/obj',
                              stack: [
                                Layer {
                                  handle: [Function: readObj],
                                  name: 'readObj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/stat\/data-total\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/stat/data-total',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getTotalData],
                                  name: 'getTotalData',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/stat\/prj-status\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/stat/prj-status',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getProjectStauts],
                                  name: 'getProjectStauts',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/stat\/data-period\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/stat/data-period',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getDataPeriod],
                                  name: 'getDataPeriod',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/stat\/equip\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/stat/equip',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getDataEquipStatus],
                                  name: 'getDataEquipStatus',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/stat\/object\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/stat/object',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getObjStatus],
                                  name: 'getObjStatus',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/auth\/token\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/auth/token',
                              stack: [
                                Layer {
                                  handle: [Function: postAuthTokken],
                                  name: 'postAuthTokken',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/equip\/list\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/equip/list',
                              stack: [
                                Layer {
                                  handle: [Function: getEquipList],
                                  name: 'getEquipList',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/project\/add\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/project/add',
                              stack: [
                                Layer {
                                  handle: [Function: postPrjAdd],
                                  name: 'postPrjAdd',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/meta\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/meta',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postMetaData],
                                  name: 'postMetaData',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'prjid',
                                optional: false,
                                offset: 21
                              }
                            ],
                            regexp: /^\/api\/project\/scan\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/project/scan/:prjid',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: getPrjScan],
                                  name: 'getPrjScan',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [
                              {
                                name: 'prjid',
                                optional: false,
                                offset: 21
                              }
                            ],
                            regexp: /^\/api\/project\/data\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/project/data/:prjid',
                              stack: [
                                Layer {
                                  handle: [Function: getPrjData],
                                  name: 'getPrjData',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/project\/sync\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/project/sync',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postPrjSync],
                                  name: 'postPrjSync',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/project\/clone\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/project/clone',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postClonePrj],
                                  name: 'postClonePrj',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/finish\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/finish',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postFinishData],
                                  name: 'postFinishData',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/data\/prc-finish\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/data/prc-finish',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postFinishPrcData],
                                  name: 'postFinishPrcData',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/debug\/token\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/debug/token',
                              stack: [
                                Layer {
                                  handle: [Function: getDebugToken],
                                  name: 'getDebugToken',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/api\/debug\/update-pnu\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/api/debug/update-pnu',
                              stack: [
                                Layer {
                                  handle: [AsyncFunction: postUpdatePnu],
                                  name: 'postUpdatePnu',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/logout\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/logout',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/login\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/login',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/signup\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/signup',
                              stack: [
                                Layer {
                                  handle: [Function: multerMiddleware],
                                  name: 'multerMiddleware',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: httpErr],
                      name: 'httpErr',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: errorHandler],
                      name: 'errorHandler',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    }
                  ]
                }
              },
              connection: [Function: connectionListener]
            },
            _eventsCount: 2,
            _maxListeners: 100,
            _connections: 1,
            _handle: TCP {
              reading: false,
              onconnection: [Function: onconnection],
              [Symbol(owner_symbol)]: [Circular *2]
            },
            _usingWorkers: false,
            _workers: [],
            _unref: false,
            allowHalfOpen: true,
            pauseOnConnect: false,
            noDelay: false,
            keepAlive: false,
            keepAliveInitialDelay: 0,
            httpAllowHalfOpen: false,
            timeout: 0,
            keepAliveTimeout: 5000,
            maxHeadersCount: null,
            maxRequestsPerSocket: 0,
            headersTimeout: 60000,
            requestTimeout: 0,
            _connectionKey: '4:0.0.0.0:3001',
            [Symbol(IncomingMessage)]: [Function: IncomingMessage],
            [Symbol(ServerResponse)]: [Function: ServerResponse],
            [Symbol(kCapture)]: false,
            [Symbol(async_id_symbol)]: 584
          },
          parser: HTTPParser {
            '0': [Function: bound setRequestTimeout],
            '1': [Function: parserOnHeaders],
            '2': [Function: parserOnHeadersComplete],
            '3': [Function: parserOnBody],
            '4': [Function: parserOnMessageComplete],
            '5': [Function: bound onParserExecute],
            '6': [Function: bound onParserTimeout],
            _headers: [],
            _url: '',
            socket: [Circular *3],
            incoming: [Circular *4],
            outgoing: null,
            maxHeaderPairs: 2000,
            _consumed: true,
            onIncoming: [Function: bound parserOnIncoming],
            [Symbol(resource_symbol)]: HTTPServerAsyncResource {
              type: 'HTTPINCOMINGMESSAGE',
              socket: [Circular *3]
            }
          },
          on: [Function: socketListenerWrap],
          addListener: [Function: socketListenerWrap],
          prependListener: [Function: socketListenerWrap],
          setEncoding: [Function: socketSetEncoding],
          _paused: false,
          _httpMessage: [Circular *5],
          [Symbol(async_id_symbol)]: 682,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            _consumed: true,
            [Symbol(owner_symbol)]: [Circular *3]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: false,
          [Symbol(kSetKeepAliveInitialDelay)]: 0,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        _header: null,
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData],
        req: [Circular *4],
        _sent100: false,
        _expect_continue: false,
        locals: [Object: null prototype] {},
        writeHead: [Function: writeHead],
        end: [Function: end],
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          'x-powered-by': [ 'X-Powered-By', 'Express' ]
        }
      },
      body: {},
      _parsedOriginalUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: '?obj_rs_id=18552',
        query: 'obj_rs_id=18552',
        pathname: '/api/map/read/obj',
        path: '/api/map/read/obj?obj_rs_id=18552',
        href: '/api/map/read/obj?obj_rs_id=18552',
        _raw: '/api/map/read/obj?obj_rs_id=18552'
      },
      secret: undefined,
      cookies: [Object: null prototype] {},
      signedCookies: [Object: null prototype] {},
      sessionStore: PGStore {
        _events: [Object: null prototype] {
          disconnect: [Function: ondisconnect],
          connect: [Function: onconnect]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        schemaName: null,
        tableName: 'tn_sesion_info',
        ttl: undefined,
        pool: BoundPool {
          _events: [Object: null prototype] { error: [Function (anonymous)] },
          _eventsCount: 1,
          _maxListeners: undefined,
          options: {
            host: 'dtgeo.iptime.org',
            database: 'agros_net_db_dev',
            user: 'argos_webserver',
            port: 5424,
            max: 10,
            idleTimeoutMillis: 30000,
            maxUses: Infinity,
            allowExitOnIdle: false,
            maxLifetimeSeconds: 0
          },
          log: [Function (anonymous)],
          Client: [class Client extends EventEmitter] {
            Query: [class Query extends EventEmitter]
          },
          Promise: [Function: Promise],
          _clients: [
            Client {
              _events: [Object: null prototype] {
                error: [Function: idleListener]
              },
              _eventsCount: 1,
              _maxListeners: undefined,
              connectionParameters: ConnectionParameters {
                user: 'argos_webserver',
                database: 'agros_net_db_dev',
                port: 5424,
                host: 'dtgeo.iptime.org',
                binary: false,
                options: undefined,
                ssl: false,
                client_encoding: '',
                replication: undefined,
                isDomainSocket: false,
                application_name: undefined,
                fallback_application_name: undefined,
                statement_timeout: false,
                idle_in_transaction_session_timeout: false,
                query_timeout: false,
                connect_timeout: 0
              },
              user: 'argos_webserver',
              database: 'agros_net_db_dev',
              port: 5424,
              host: 'dtgeo.iptime.org',
              replication: undefined,
              _Promise: [Function: Promise],
              _types: TypeOverrides {
                _types: {
                  getTypeParser: [Function: getTypeParser],
                  setTypeParser: [Function: setTypeParser],
                  arrayParser: { create: [Function: create] },
                  builtins: {
                    BOOL: 16,
                    BYTEA: 17,
                    CHAR: 18,
                    INT8: 20,
                    INT2: 21,
                    INT4: 23,
                    REGPROC: 24,
                    TEXT: 25,
                    OID: 26,
                    TID: 27,
                    XID: 28,
                    CID: 29,
                    JSON: 114,
                    XML: 142,
                    PG_NODE_TREE: 194,
                    SMGR: 210,
                    PATH: 602,
                    POLYGON: 604,
                    CIDR: 650,
                    FLOAT4: 700,
                    FLOAT8: 701,
                    ABSTIME: 702,
                    RELTIME: 703,
                    TINTERVAL: 704,
                    CIRCLE: 718,
                    MACADDR8: 774,
                    MONEY: 790,
                    MACADDR: 829,
                    INET: 869,
                    ACLITEM: 1033,
                    BPCHAR: 1042,
                    VARCHAR: 1043,
                    DATE: 1082,
                    TIME: 1083,
                    TIMESTAMP: 1114,
                    TIMESTAMPTZ: 1184,
                    INTERVAL: 1186,
                    TIMETZ: 1266,
                    BIT: 1560,
                    VARBIT: 1562,
                    NUMERIC: 1700,
                    REFCURSOR: 1790,
                    REGPROCEDURE: 2202,
                    REGOPER: 2203,
                    REGOPERATOR: 2204,
                    REGCLASS: 2205,
                    REGTYPE: 2206,
                    UUID: 2950,
                    TXID_SNAPSHOT: 2970,
                    PG_LSN: 3220,
                    PG_NDISTINCT: 3361,
                    PG_DEPENDENCIES: 3402,
                    TSVECTOR: 3614,
                    TSQUERY: 3615,
                    GTSVECTOR: 3642,
                    REGCONFIG: 3734,
                    REGDICTIONARY: 3769,
                    JSONB: 3802,
                    REGNAMESPACE: 4089,
                    REGROLE: 4096
                  }
                },
                text: {},
                binary: {}
              },
              _ending: false,
              _connecting: false,
              _connected: true,
              _connectionError: false,
              _queryable: true,
              connection: Connection {
                _events: [Object: null prototype] {
                  newListener: [Function (anonymous)],
                  connect: [Function (anonymous)],
                  sslconnect: [Function (anonymous)],
                  authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
                  authenticationMD5Password: [Function: bound _handleAuthMD5Password],
                  authenticationSASL: [Function: bound _handleAuthSASL],
                  authenticationSASLContinue: [Function: bound _handleAuthSASLContinue],
                  authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
                  backendKeyData: [Function: bound _handleBackendKeyData],
                  error: [Function: bound _handleErrorEvent],
                  errorMessage: [Function: bound _handleErrorMessage],
                  readyForQuery: [Function: bound _handleReadyForQuery],
                  notice: [Function: bound _handleNotice],
                  rowDescription: [Function: bound _handleRowDescription],
                  dataRow: [Function: bound _handleDataRow],
                  portalSuspended: [Function: bound _handlePortalSuspended],
                  emptyQuery: [Function: bound _handleEmptyQuery],
                  commandComplete: [Function: bound _handleCommandComplete],
                  parseComplete: [Function: bound _handleParseComplete],
                  copyInResponse: [Function: bound _handleCopyInResponse],
                  copyData: [Function: bound _handleCopyData],
                  notification: [Function: bound _handleNotification],
                  end: [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  }
                },
                _eventsCount: 23,
                _maxListeners: undefined,
                stream: <ref *6> Socket {
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'dtgeo.iptime.org',
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: false,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: true,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _events: [Object: null prototype] {
                    end: [
                      [Function: onReadableStreamEnd],
                      [Function (anonymous)],
                      [Function (anonymous)]
                    ],
                    error: [Function: reportStreamError],
                    close: [Function (anonymous)],
                    data: [Function (anonymous)]
                  },
                  _eventsCount: 4,
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: null,
                  _server: null,
                  [Symbol(async_id_symbol)]: 25,
                  [Symbol(kHandle)]: TCP {
                    reading: true,
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *6]
                  },
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: true,
                  [Symbol(kSetKeepAlive)]: false,
                  [Symbol(kSetKeepAliveInitialDelay)]: 0,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0
                },
                _keepAlive: false,
                _keepAliveInitialDelayMillis: 0,
                lastBuffer: false,
                parsedStatements: {},
                ssl: false,
                _ending: false,
                _emitMessage: false,
                _connecting: true,
                [Symbol(kCapture)]: false
              },
              queryQueue: [],
              binary: false,
              processID: 10620,
              secretKey: 2009363607,
              ssl: false,
              _connectionTimeoutMillis: 0,
              _connectionCallback: null,
              release: [Function (anonymous)],
              activeQuery: null,
              readyForQuery: true,
              hasExecuted: true,
              _poolUseCount: 1,
              [Symbol(kCapture)]: false
            },
            Client {
              _events: [Object: null prototype] {
                error: [Function: idleListener]
              },
              _eventsCount: 1,
              _maxListeners: undefined,
              connectionParameters: ConnectionParameters {
                user: 'argos_webserver',
                database: 'agros_net_db_dev',
                port: 5424,
                host: 'dtgeo.iptime.org',
                binary: false,
                options: undefined,
                ssl: false,
                client_encoding: '',
                replication: undefined,
                isDomainSocket: false,
                application_name: undefined,
                fallback_application_name: undefined,
                statement_timeout: false,
                idle_in_transaction_session_timeout: false,
                query_timeout: false,
                connect_timeout: 0
              },
              user: 'argos_webserver',
              database: 'agros_net_db_dev',
              port: 5424,
              host: 'dtgeo.iptime.org',
              replication: undefined,
              _Promise: [Function: Promise],
              _types: TypeOverrides {
                _types: {
                  getTypeParser: [Function: getTypeParser],
                  setTypeParser: [Function: setTypeParser],
                  arrayParser: { create: [Function: create] },
                  builtins: {
                    BOOL: 16,
                    BYTEA: 17,
                    CHAR: 18,
                    INT8: 20,
                    INT2: 21,
                    INT4: 23,
                    REGPROC: 24,
                    TEXT: 25,
                    OID: 26,
                    TID: 27,
                    XID: 28,
                    CID: 29,
                    JSON: 114,
                    XML: 142,
                    PG_NODE_TREE: 194,
                    SMGR: 210,
                    PATH: 602,
                    POLYGON: 604,
                    CIDR: 650,
                    FLOAT4: 700,
                    FLOAT8: 701,
                    ABSTIME: 702,
                    RELTIME: 703,
                    TINTERVAL: 704,
                    CIRCLE: 718,
                    MACADDR8: 774,
                    MONEY: 790,
                    MACADDR: 829,
                    INET: 869,
                    ACLITEM: 1033,
                    BPCHAR: 1042,
                    VARCHAR: 1043,
                    DATE: 1082,
                    TIME: 1083,
                    TIMESTAMP: 1114,
                    TIMESTAMPTZ: 1184,
                    INTERVAL: 1186,
                    TIMETZ: 1266,
                    BIT: 1560,
                    VARBIT: 1562,
                    NUMERIC: 1700,
                    REFCURSOR: 1790,
                    REGPROCEDURE: 2202,
                    REGOPER: 2203,
                    REGOPERATOR: 2204,
                    REGCLASS: 2205,
                    REGTYPE: 2206,
                    UUID: 2950,
                    TXID_SNAPSHOT: 2970,
                    PG_LSN: 3220,
                    PG_NDISTINCT: 3361,
                    PG_DEPENDENCIES: 3402,
                    TSVECTOR: 3614,
                    TSQUERY: 3615,
                    GTSVECTOR: 3642,
                    REGCONFIG: 3734,
                    REGDICTIONARY: 3769,
                    JSONB: 3802,
                    REGNAMESPACE: 4089,
                    REGROLE: 4096
                  }
                },
                text: {},
                binary: {}
              },
              _ending: false,
              _connecting: false,
              _connected: true,
              _connectionError: false,
              _queryable: true,
              connection: Connection {
                _events: [Object: null prototype] {
                  newListener: [Function (anonymous)],
                  connect: [Function (anonymous)],
                  sslconnect: [Function (anonymous)],
                  authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
                  authenticationMD5Password: [Function: bound _handleAuthMD5Password],
                  authenticationSASL: [Function: bound _handleAuthSASL],
                  authenticationSASLContinue: [Function: bound _handleAuthSASLContinue],
                  authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
                  backendKeyData: [Function: bound _handleBackendKeyData],
                  error: [Function: bound _handleErrorEvent],
                  errorMessage: [Function: bound _handleErrorMessage],
                  readyForQuery: [Function: bound _handleReadyForQuery],
                  notice: [Function: bound _handleNotice],
                  rowDescription: [Function: bound _handleRowDescription],
                  dataRow: [Function: bound _handleDataRow],
                  portalSuspended: [Function: bound _handlePortalSuspended],
                  emptyQuery: [Function: bound _handleEmptyQuery],
                  commandComplete: [Function: bound _handleCommandComplete],
                  parseComplete: [Function: bound _handleParseComplete],
                  copyInResponse: [Function: bound _handleCopyInResponse],
                  copyData: [Function: bound _handleCopyData],
                  notification: [Function: bound _handleNotification],
                  end: [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  }
                },
                _eventsCount: 23,
                _maxListeners: undefined,
                stream: <ref *7> Socket {
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'dtgeo.iptime.org',
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: false,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: true,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _events: [Object: null prototype] {
                    end: [
                      [Function: onReadableStreamEnd],
                      [Function (anonymous)],
                      [Function (anonymous)]
                    ],
                    error: [Function: reportStreamError],
                    close: [Function (anonymous)],
                    data: [Function (anonymous)]
                  },
                  _eventsCount: 4,
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: null,
                  _server: null,
                  [Symbol(async_id_symbol)]: 472,
                  [Symbol(kHandle)]: TCP {
                    reading: true,
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *7]
                  },
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: true,
                  [Symbol(kSetKeepAlive)]: false,
                  [Symbol(kSetKeepAliveInitialDelay)]: 0,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0
                },
                _keepAlive: false,
                _keepAliveInitialDelayMillis: 0,
                lastBuffer: false,
                parsedStatements: {},
                ssl: false,
                _ending: false,
                _emitMessage: false,
                _connecting: true,
                [Symbol(kCapture)]: false
              },
              queryQueue: [],
              binary: false,
              processID: 7776,
              secretKey: 709313372,
              ssl: false,
              _connectionTimeoutMillis: 0,
              _connectionCallback: null,
              release: [Function (anonymous)],
              activeQuery: null,
              readyForQuery: true,
              hasExecuted: true,
              _poolUseCount: 1,
              [Symbol(kCapture)]: false
            },
            Client {
              _events: [Object: null prototype] {
                error: [Function: idleListener]
              },
              _eventsCount: 1,
              _maxListeners: undefined,
              connectionParameters: ConnectionParameters {
                user: 'argos_webserver',
                database: 'agros_net_db_dev',
                port: 5424,
                host: 'dtgeo.iptime.org',
                binary: false,
                options: undefined,
                ssl: false,
                client_encoding: '',
                replication: undefined,
                isDomainSocket: false,
                application_name: undefined,
                fallback_application_name: undefined,
                statement_timeout: false,
                idle_in_transaction_session_timeout: false,
                query_timeout: false,
                connect_timeout: 0
              },
              user: 'argos_webserver',
              database: 'agros_net_db_dev',
              port: 5424,
              host: 'dtgeo.iptime.org',
              replication: undefined,
              _Promise: [Function: Promise],
              _types: TypeOverrides {
                _types: {
                  getTypeParser: [Function: getTypeParser],
                  setTypeParser: [Function: setTypeParser],
                  arrayParser: { create: [Function: create] },
                  builtins: {
                    BOOL: 16,
                    BYTEA: 17,
                    CHAR: 18,
                    INT8: 20,
                    INT2: 21,
                    INT4: 23,
                    REGPROC: 24,
                    TEXT: 25,
                    OID: 26,
                    TID: 27,
                    XID: 28,
                    CID: 29,
                    JSON: 114,
                    XML: 142,
                    PG_NODE_TREE: 194,
                    SMGR: 210,
                    PATH: 602,
                    POLYGON: 604,
                    CIDR: 650,
                    FLOAT4: 700,
                    FLOAT8: 701,
                    ABSTIME: 702,
                    RELTIME: 703,
                    TINTERVAL: 704,
                    CIRCLE: 718,
                    MACADDR8: 774,
                    MONEY: 790,
                    MACADDR: 829,
                    INET: 869,
                    ACLITEM: 1033,
                    BPCHAR: 1042,
                    VARCHAR: 1043,
                    DATE: 1082,
                    TIME: 1083,
                    TIMESTAMP: 1114,
                    TIMESTAMPTZ: 1184,
                    INTERVAL: 1186,
                    TIMETZ: 1266,
                    BIT: 1560,
                    VARBIT: 1562,
                    NUMERIC: 1700,
                    REFCURSOR: 1790,
                    REGPROCEDURE: 2202,
                    REGOPER: 2203,
                    REGOPERATOR: 2204,
                    REGCLASS: 2205,
                    REGTYPE: 2206,
                    UUID: 2950,
                    TXID_SNAPSHOT: 2970,
                    PG_LSN: 3220,
                    PG_NDISTINCT: 3361,
                    PG_DEPENDENCIES: 3402,
                    TSVECTOR: 3614,
                    TSQUERY: 3615,
                    GTSVECTOR: 3642,
                    REGCONFIG: 3734,
                    REGDICTIONARY: 3769,
                    JSONB: 3802,
                    REGNAMESPACE: 4089,
                    REGROLE: 4096
                  }
                },
                text: {},
                binary: {}
              },
              _ending: false,
              _connecting: false,
              _connected: true,
              _connectionError: false,
              _queryable: true,
              connection: Connection {
                _events: [Object: null prototype] {
                  newListener: [Function (anonymous)],
                  connect: [Function (anonymous)],
                  sslconnect: [Function (anonymous)],
                  authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
                  authenticationMD5Password: [Function: bound _handleAuthMD5Password],
                  authenticationSASL: [Function: bound _handleAuthSASL],
                  authenticationSASLContinue: [Function: bound _handleAuthSASLContinue],
                  authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
                  backendKeyData: [Function: bound _handleBackendKeyData],
                  error: [Function: bound _handleErrorEvent],
                  errorMessage: [Function: bound _handleErrorMessage],
                  readyForQuery: [Function: bound _handleReadyForQuery],
                  notice: [Function: bound _handleNotice],
                  rowDescription: [Function: bound _handleRowDescription],
                  dataRow: [Function: bound _handleDataRow],
                  portalSuspended: [Function: bound _handlePortalSuspended],
                  emptyQuery: [Function: bound _handleEmptyQuery],
                  commandComplete: [Function: bound _handleCommandComplete],
                  parseComplete: [Function: bound _handleParseComplete],
                  copyInResponse: [Function: bound _handleCopyInResponse],
                  copyData: [Function: bound _handleCopyData],
                  notification: [Function: bound _handleNotification],
                  end: [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  }
                },
                _eventsCount: 23,
                _maxListeners: undefined,
                stream: <ref *8> Socket {
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'dtgeo.iptime.org',
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: false,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: true,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _events: [Object: null prototype] {
                    end: [
                      [Function: onReadableStreamEnd],
                      [Function (anonymous)],
                      [Function (anonymous)]
                    ],
                    error: [Function: reportStreamError],
                    close: [Function (anonymous)],
                    data: [Function (anonymous)]
                  },
                  _eventsCount: 4,
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: null,
                  _server: null,
                  [Symbol(async_id_symbol)]: 490,
                  [Symbol(kHandle)]: TCP {
                    reading: true,
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *8]
                  },
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: true,
                  [Symbol(kSetKeepAlive)]: false,
                  [Symbol(kSetKeepAliveInitialDelay)]: 0,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0
                },
                _keepAlive: false,
                _keepAliveInitialDelayMillis: 0,
                lastBuffer: false,
                parsedStatements: {},
                ssl: false,
                _ending: false,
                _emitMessage: false,
                _connecting: true,
                [Symbol(kCapture)]: false
              },
              queryQueue: [],
              binary: false,
              processID: 7336,
              secretKey: -1689568873,
              ssl: false,
              _connectionTimeoutMillis: 0,
              _connectionCallback: null,
              release: [Function (anonymous)],
              activeQuery: null,
              readyForQuery: true,
              hasExecuted: true,
              _poolUseCount: 1,
              [Symbol(kCapture)]: false
            },
            Client {
              _events: [Object: null prototype] {
                error: [Function: idleListener]
              },
              _eventsCount: 1,
              _maxListeners: undefined,
              connectionParameters: ConnectionParameters {
                user: 'argos_webserver',
                database: 'agros_net_db_dev',
                port: 5424,
                host: 'dtgeo.iptime.org',
                binary: false,
                options: undefined,
                ssl: false,
                client_encoding: '',
                replication: undefined,
                isDomainSocket: false,
                application_name: undefined,
                fallback_application_name: undefined,
                statement_timeout: false,
                idle_in_transaction_session_timeout: false,
                query_timeout: false,
                connect_timeout: 0
              },
              user: 'argos_webserver',
              database: 'agros_net_db_dev',
              port: 5424,
              host: 'dtgeo.iptime.org',
              replication: undefined,
              _Promise: [Function: Promise],
              _types: TypeOverrides {
                _types: {
                  getTypeParser: [Function: getTypeParser],
                  setTypeParser: [Function: setTypeParser],
                  arrayParser: { create: [Function: create] },
                  builtins: {
                    BOOL: 16,
                    BYTEA: 17,
                    CHAR: 18,
                    INT8: 20,
                    INT2: 21,
                    INT4: 23,
                    REGPROC: 24,
                    TEXT: 25,
                    OID: 26,
                    TID: 27,
                    XID: 28,
                    CID: 29,
                    JSON: 114,
                    XML: 142,
                    PG_NODE_TREE: 194,
                    SMGR: 210,
                    PATH: 602,
                    POLYGON: 604,
                    CIDR: 650,
                    FLOAT4: 700,
                    FLOAT8: 701,
                    ABSTIME: 702,
                    RELTIME: 703,
                    TINTERVAL: 704,
                    CIRCLE: 718,
                    MACADDR8: 774,
                    MONEY: 790,
                    MACADDR: 829,
                    INET: 869,
                    ACLITEM: 1033,
                    BPCHAR: 1042,
                    VARCHAR: 1043,
                    DATE: 1082,
                    TIME: 1083,
                    TIMESTAMP: 1114,
                    TIMESTAMPTZ: 1184,
                    INTERVAL: 1186,
                    TIMETZ: 1266,
                    BIT: 1560,
                    VARBIT: 1562,
                    NUMERIC: 1700,
                    REFCURSOR: 1790,
                    REGPROCEDURE: 2202,
                    REGOPER: 2203,
                    REGOPERATOR: 2204,
                    REGCLASS: 2205,
                    REGTYPE: 2206,
                    UUID: 2950,
                    TXID_SNAPSHOT: 2970,
                    PG_LSN: 3220,
                    PG_NDISTINCT: 3361,
                    PG_DEPENDENCIES: 3402,
                    TSVECTOR: 3614,
                    TSQUERY: 3615,
                    GTSVECTOR: 3642,
                    REGCONFIG: 3734,
                    REGDICTIONARY: 3769,
                    JSONB: 3802,
                    REGNAMESPACE: 4089,
                    REGROLE: 4096
                  }
                },
                text: {},
                binary: {}
              },
              _ending: false,
              _connecting: false,
              _connected: true,
              _connectionError: false,
              _queryable: true,
              connection: Connection {
                _events: [Object: null prototype] {
                  newListener: [Function (anonymous)],
                  connect: [Function (anonymous)],
                  sslconnect: [Function (anonymous)],
                  authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
                  authenticationMD5Password: [Function: bound _handleAuthMD5Password],
                  authenticationSASL: [Function: bound _handleAuthSASL],
                  authenticationSASLContinue: [Function: bound _handleAuthSASLContinue],
                  authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
                  backendKeyData: [Function: bound _handleBackendKeyData],
                  error: [Function: bound _handleErrorEvent],
                  errorMessage: [Function: bound _handleErrorMessage],
                  readyForQuery: [Function: bound _handleReadyForQuery],
                  notice: [Function: bound _handleNotice],
                  rowDescription: [Function: bound _handleRowDescription],
                  dataRow: [Function: bound _handleDataRow],
                  portalSuspended: [Function: bound _handlePortalSuspended],
                  emptyQuery: [Function: bound _handleEmptyQuery],
                  commandComplete: [Function: bound _handleCommandComplete],
                  parseComplete: [Function: bound _handleParseComplete],
                  copyInResponse: [Function: bound _handleCopyInResponse],
                  copyData: [Function: bound _handleCopyData],
                  notification: [Function: bound _handleNotification],
                  end: [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  }
                },
                _eventsCount: 23,
                _maxListeners: undefined,
                stream: <ref *9> Socket {
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'dtgeo.iptime.org',
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: false,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: true,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _events: [Object: null prototype] {
                    end: [
                      [Function: onReadableStreamEnd],
                      [Function (anonymous)],
                      [Function (anonymous)]
                    ],
                    error: [Function: reportStreamError],
                    close: [Function (anonymous)],
                    data: [Function (anonymous)]
                  },
                  _eventsCount: 4,
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: null,
                  _server: null,
                  [Symbol(async_id_symbol)]: 508,
                  [Symbol(kHandle)]: TCP {
                    reading: true,
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *9]
                  },
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: true,
                  [Symbol(kSetKeepAlive)]: false,
                  [Symbol(kSetKeepAliveInitialDelay)]: 0,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0
                },
                _keepAlive: false,
                _keepAliveInitialDelayMillis: 0,
                lastBuffer: false,
                parsedStatements: {},
                ssl: false,
                _ending: false,
                _emitMessage: false,
                _connecting: true,
                [Symbol(kCapture)]: false
              },
              queryQueue: [],
              binary: false,
              processID: 17080,
              secretKey: -1513554452,
              ssl: false,
              _connectionTimeoutMillis: 0,
              _connectionCallback: null,
              release: [Function (anonymous)],
              activeQuery: null,
              readyForQuery: true,
              hasExecuted: true,
              _poolUseCount: 1,
              [Symbol(kCapture)]: false
            },
            Client {
              _events: [Object: null prototype] {
                error: [Function: idleListener]
              },
              _eventsCount: 1,
              _maxListeners: undefined,
              connectionParameters: ConnectionParameters {
                user: 'argos_webserver',
                database: 'agros_net_db_dev',
                port: 5424,
                host: 'dtgeo.iptime.org',
                binary: false,
                options: undefined,
                ssl: false,
                client_encoding: '',
                replication: undefined,
                isDomainSocket: false,
                application_name: undefined,
                fallback_application_name: undefined,
                statement_timeout: false,
                idle_in_transaction_session_timeout: false,
                query_timeout: false,
                connect_timeout: 0
              },
              user: 'argos_webserver',
              database: 'agros_net_db_dev',
              port: 5424,
              host: 'dtgeo.iptime.org',
              replication: undefined,
              _Promise: [Function: Promise],
              _types: TypeOverrides {
                _types: {
                  getTypeParser: [Function: getTypeParser],
                  setTypeParser: [Function: setTypeParser],
                  arrayParser: { create: [Function: create] },
                  builtins: {
                    BOOL: 16,
                    BYTEA: 17,
                    CHAR: 18,
                    INT8: 20,
                    INT2: 21,
                    INT4: 23,
                    REGPROC: 24,
                    TEXT: 25,
                    OID: 26,
                    TID: 27,
                    XID: 28,
                    CID: 29,
                    JSON: 114,
                    XML: 142,
                    PG_NODE_TREE: 194,
                    SMGR: 210,
                    PATH: 602,
                    POLYGON: 604,
                    CIDR: 650,
                    FLOAT4: 700,
                    FLOAT8: 701,
                    ABSTIME: 702,
                    RELTIME: 703,
                    TINTERVAL: 704,
                    CIRCLE: 718,
                    MACADDR8: 774,
                    MONEY: 790,
                    MACADDR: 829,
                    INET: 869,
                    ACLITEM: 1033,
                    BPCHAR: 1042,
                    VARCHAR: 1043,
                    DATE: 1082,
                    TIME: 1083,
                    TIMESTAMP: 1114,
                    TIMESTAMPTZ: 1184,
                    INTERVAL: 1186,
                    TIMETZ: 1266,
                    BIT: 1560,
                    VARBIT: 1562,
                    NUMERIC: 1700,
                    REFCURSOR: 1790,
                    REGPROCEDURE: 2202,
                    REGOPER: 2203,
                    REGOPERATOR: 2204,
                    REGCLASS: 2205,
                    REGTYPE: 2206,
                    UUID: 2950,
                    TXID_SNAPSHOT: 2970,
                    PG_LSN: 3220,
                    PG_NDISTINCT: 3361,
                    PG_DEPENDENCIES: 3402,
                    TSVECTOR: 3614,
                    TSQUERY: 3615,
                    GTSVECTOR: 3642,
                    REGCONFIG: 3734,
                    REGDICTIONARY: 3769,
                    JSONB: 3802,
                    REGNAMESPACE: 4089,
                    REGROLE: 4096
                  }
                },
                text: {},
                binary: {}
              },
              _ending: false,
              _connecting: false,
              _connected: true,
              _connectionError: false,
              _queryable: true,
              connection: Connection {
                _events: [Object: null prototype] {
                  newListener: [Function (anonymous)],
                  connect: [Function (anonymous)],
                  sslconnect: [Function (anonymous)],
                  authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
                  authenticationMD5Password: [Function: bound _handleAuthMD5Password],
                  authenticationSASL: [Function: bound _handleAuthSASL],
                  authenticationSASLContinue: [Function: bound _handleAuthSASLContinue],
                  authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
                  backendKeyData: [Function: bound _handleBackendKeyData],
                  error: [Function: bound _handleErrorEvent],
                  errorMessage: [Function: bound _handleErrorMessage],
                  readyForQuery: [Function: bound _handleReadyForQuery],
                  notice: [Function: bound _handleNotice],
                  rowDescription: [Function: bound _handleRowDescription],
                  dataRow: [Function: bound _handleDataRow],
                  portalSuspended: [Function: bound _handlePortalSuspended],
                  emptyQuery: [Function: bound _handleEmptyQuery],
                  commandComplete: [Function: bound _handleCommandComplete],
                  parseComplete: [Function: bound _handleParseComplete],
                  copyInResponse: [Function: bound _handleCopyInResponse],
                  copyData: [Function: bound _handleCopyData],
                  notification: [Function: bound _handleNotification],
                  end: [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  }
                },
                _eventsCount: 23,
                _maxListeners: undefined,
                stream: <ref *10> Socket {
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'dtgeo.iptime.org',
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: false,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: true,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _events: [Object: null prototype] {
                    end: [
                      [Function: onReadableStreamEnd],
                      [Function (anonymous)],
                      [Function (anonymous)]
                    ],
                    error: [Function: reportStreamError],
                    close: [Function (anonymous)],
                    data: [Function (anonymous)]
                  },
                  _eventsCount: 4,
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: null,
                  _server: null,
                  [Symbol(async_id_symbol)]: 526,
                  [Symbol(kHandle)]: TCP {
                    reading: true,
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *10]
                  },
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: true,
                  [Symbol(kSetKeepAlive)]: false,
                  [Symbol(kSetKeepAliveInitialDelay)]: 0,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0
                },
                _keepAlive: false,
                _keepAliveInitialDelayMillis: 0,
                lastBuffer: false,
                parsedStatements: {},
                ssl: false,
                _ending: false,
                _emitMessage: false,
                _connecting: true,
                [Symbol(kCapture)]: false
              },
              queryQueue: [],
              binary: false,
              processID: 14108,
              secretKey: 2073291469,
              ssl: false,
              _connectionTimeoutMillis: 0,
              _connectionCallback: null,
              release: [Function (anonymous)],
              activeQuery: null,
              readyForQuery: true,
              hasExecuted: true,
              _poolUseCount: 1,
              [Symbol(kCapture)]: false
            },
            Client {
              _events: [Object: null prototype] {
                error: [Function: idleListener]
              },
              _eventsCount: 1,
              _maxListeners: undefined,
              connectionParameters: ConnectionParameters {
                user: 'argos_webserver',
                database: 'agros_net_db_dev',
                port: 5424,
                host: 'dtgeo.iptime.org',
                binary: false,
                options: undefined,
                ssl: false,
                client_encoding: '',
                replication: undefined,
                isDomainSocket: false,
                application_name: undefined,
                fallback_application_name: undefined,
                statement_timeout: false,
                idle_in_transaction_session_timeout: false,
                query_timeout: false,
                connect_timeout: 0
              },
              user: 'argos_webserver',
              database: 'agros_net_db_dev',
              port: 5424,
              host: 'dtgeo.iptime.org',
              replication: undefined,
              _Promise: [Function: Promise],
              _types: TypeOverrides {
                _types: {
                  getTypeParser: [Function: getTypeParser],
                  setTypeParser: [Function: setTypeParser],
                  arrayParser: { create: [Function: create] },
                  builtins: {
                    BOOL: 16,
                    BYTEA: 17,
                    CHAR: 18,
                    INT8: 20,
                    INT2: 21,
                    INT4: 23,
                    REGPROC: 24,
                    TEXT: 25,
                    OID: 26,
                    TID: 27,
                    XID: 28,
                    CID: 29,
                    JSON: 114,
                    XML: 142,
                    PG_NODE_TREE: 194,
                    SMGR: 210,
                    PATH: 602,
                    POLYGON: 604,
                    CIDR: 650,
                    FLOAT4: 700,
                    FLOAT8: 701,
                    ABSTIME: 702,
                    RELTIME: 703,
                    TINTERVAL: 704,
                    CIRCLE: 718,
                    MACADDR8: 774,
                    MONEY: 790,
                    MACADDR: 829,
                    INET: 869,
                    ACLITEM: 1033,
                    BPCHAR: 1042,
                    VARCHAR: 1043,
                    DATE: 1082,
                    TIME: 1083,
                    TIMESTAMP: 1114,
                    TIMESTAMPTZ: 1184,
                    INTERVAL: 1186,
                    TIMETZ: 1266,
                    BIT: 1560,
                    VARBIT: 1562,
                    NUMERIC: 1700,
                    REFCURSOR: 1790,
                    REGPROCEDURE: 2202,
                    REGOPER: 2203,
                    REGOPERATOR: 2204,
                    REGCLASS: 2205,
                    REGTYPE: 2206,
                    UUID: 2950,
                    TXID_SNAPSHOT: 2970,
                    PG_LSN: 3220,
                    PG_NDISTINCT: 3361,
                    PG_DEPENDENCIES: 3402,
                    TSVECTOR: 3614,
                    TSQUERY: 3615,
                    GTSVECTOR: 3642,
                    REGCONFIG: 3734,
                    REGDICTIONARY: 3769,
                    JSONB: 3802,
                    REGNAMESPACE: 4089,
                    REGROLE: 4096
                  }
                },
                text: {},
                binary: {}
              },
              _ending: false,
              _connecting: false,
              _connected: true,
              _connectionError: false,
              _queryable: true,
              connection: Connection {
                _events: [Object: null prototype] {
                  newListener: [Function (anonymous)],
                  connect: [Function (anonymous)],
                  sslconnect: [Function (anonymous)],
                  authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
                  authenticationMD5Password: [Function: bound _handleAuthMD5Password],
                  authenticationSASL: [Function: bound _handleAuthSASL],
                  authenticationSASLContinue: [Function: bound _handleAuthSASLContinue],
                  authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
                  backendKeyData: [Function: bound _handleBackendKeyData],
                  error: [Function: bound _handleErrorEvent],
                  errorMessage: [Function: bound _handleErrorMessage],
                  readyForQuery: [Function: bound _handleReadyForQuery],
                  notice: [Function: bound _handleNotice],
                  rowDescription: [Function: bound _handleRowDescription],
                  dataRow: [Function: bound _handleDataRow],
                  portalSuspended: [Function: bound _handlePortalSuspended],
                  emptyQuery: [Function: bound _handleEmptyQuery],
                  commandComplete: [Function: bound _handleCommandComplete],
                  parseComplete: [Function: bound _handleParseComplete],
                  copyInResponse: [Function: bound _handleCopyInResponse],
                  copyData: [Function: bound _handleCopyData],
                  notification: [Function: bound _handleNotification],
                  end: [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  }
                },
                _eventsCount: 23,
                _maxListeners: undefined,
                stream: <ref *11> Socket {
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'dtgeo.iptime.org',
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: false,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: true,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _events: [Object: null prototype] {
                    end: [
                      [Function: onReadableStreamEnd],
                      [Function (anonymous)],
                      [Function (anonymous)]
                    ],
                    error: [Function: reportStreamError],
                    close: [Function (anonymous)],
                    data: [Function (anonymous)]
                  },
                  _eventsCount: 4,
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: null,
                  _server: null,
                  [Symbol(async_id_symbol)]: 544,
                  [Symbol(kHandle)]: TCP {
                    reading: true,
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *11]
                  },
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: true,
                  [Symbol(kSetKeepAlive)]: false,
                  [Symbol(kSetKeepAliveInitialDelay)]: 0,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0
                },
                _keepAlive: false,
                _keepAliveInitialDelayMillis: 0,
                lastBuffer: false,
                parsedStatements: {},
                ssl: false,
                _ending: false,
                _emitMessage: false,
                _connecting: true,
                [Symbol(kCapture)]: false
              },
              queryQueue: [],
              binary: false,
              processID: 12404,
              secretKey: -1205681715,
              ssl: false,
              _connectionTimeoutMillis: 0,
              _connectionCallback: null,
              release: [Function (anonymous)],
              activeQuery: null,
              readyForQuery: true,
              hasExecuted: true,
              _poolUseCount: 1,
              [Symbol(kCapture)]: false
            },
            Client {
              _events: [Object: null prototype] {
                error: [Function: idleListener]
              },
              _eventsCount: 1,
              _maxListeners: undefined,
              connectionParameters: ConnectionParameters {
                user: 'argos_webserver',
                database: 'agros_net_db_dev',
                port: 5424,
                host: 'dtgeo.iptime.org',
                binary: false,
                options: undefined,
                ssl: false,
                client_encoding: '',
                replication: undefined,
                isDomainSocket: false,
                application_name: undefined,
                fallback_application_name: undefined,
                statement_timeout: false,
                idle_in_transaction_session_timeout: false,
                query_timeout: false,
                connect_timeout: 0
              },
              user: 'argos_webserver',
              database: 'agros_net_db_dev',
              port: 5424,
              host: 'dtgeo.iptime.org',
              replication: undefined,
              _Promise: [Function: Promise],
              _types: TypeOverrides {
                _types: {
                  getTypeParser: [Function: getTypeParser],
                  setTypeParser: [Function: setTypeParser],
                  arrayParser: { create: [Function: create] },
                  builtins: {
                    BOOL: 16,
                    BYTEA: 17,
                    CHAR: 18,
                    INT8: 20,
                    INT2: 21,
                    INT4: 23,
                    REGPROC: 24,
                    TEXT: 25,
                    OID: 26,
                    TID: 27,
                    XID: 28,
                    CID: 29,
                    JSON: 114,
                    XML: 142,
                    PG_NODE_TREE: 194,
                    SMGR: 210,
                    PATH: 602,
                    POLYGON: 604,
                    CIDR: 650,
                    FLOAT4: 700,
                    FLOAT8: 701,
                    ABSTIME: 702,
                    RELTIME: 703,
                    TINTERVAL: 704,
                    CIRCLE: 718,
                    MACADDR8: 774,
                    MONEY: 790,
                    MACADDR: 829,
                    INET: 869,
                    ACLITEM: 1033,
                    BPCHAR: 1042,
                    VARCHAR: 1043,
                    DATE: 1082,
                    TIME: 1083,
                    TIMESTAMP: 1114,
                    TIMESTAMPTZ: 1184,
                    INTERVAL: 1186,
                    TIMETZ: 1266,
                    BIT: 1560,
                    VARBIT: 1562,
                    NUMERIC: 1700,
                    REFCURSOR: 1790,
                    REGPROCEDURE: 2202,
                    REGOPER: 2203,
                    REGOPERATOR: 2204,
                    REGCLASS: 2205,
                    REGTYPE: 2206,
                    UUID: 2950,
                    TXID_SNAPSHOT: 2970,
                    PG_LSN: 3220,
                    PG_NDISTINCT: 3361,
                    PG_DEPENDENCIES: 3402,
                    TSVECTOR: 3614,
                    TSQUERY: 3615,
                    GTSVECTOR: 3642,
                    REGCONFIG: 3734,
                    REGDICTIONARY: 3769,
                    JSONB: 3802,
                    REGNAMESPACE: 4089,
                    REGROLE: 4096
                  }
                },
                text: {},
                binary: {}
              },
              _ending: false,
              _connecting: false,
              _connected: true,
              _connectionError: false,
              _queryable: true,
              connection: Connection {
                _events: [Object: null prototype] {
                  newListener: [Function (anonymous)],
                  connect: [Function (anonymous)],
                  sslconnect: [Function (anonymous)],
                  authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
                  authenticationMD5Password: [Function: bound _handleAuthMD5Password],
                  authenticationSASL: [Function: bound _handleAuthSASL],
                  authenticationSASLContinue: [Function: bound _handleAuthSASLContinue],
                  authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
                  backendKeyData: [Function: bound _handleBackendKeyData],
                  error: [Function: bound _handleErrorEvent],
                  errorMessage: [Function: bound _handleErrorMessage],
                  readyForQuery: [Function: bound _handleReadyForQuery],
                  notice: [Function: bound _handleNotice],
                  rowDescription: [Function: bound _handleRowDescription],
                  dataRow: [Function: bound _handleDataRow],
                  portalSuspended: [Function: bound _handlePortalSuspended],
                  emptyQuery: [Function: bound _handleEmptyQuery],
                  commandComplete: [Function: bound _handleCommandComplete],
                  parseComplete: [Function: bound _handleParseComplete],
                  copyInResponse: [Function: bound _handleCopyInResponse],
                  copyData: [Function: bound _handleCopyData],
                  notification: [Function: bound _handleNotification],
                  end: [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  }
                },
                _eventsCount: 23,
                _maxListeners: undefined,
                stream: <ref *12> Socket {
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'dtgeo.iptime.org',
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: false,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: true,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _events: [Object: null prototype] {
                    end: [
                      [Function: onReadableStreamEnd],
                      [Function (anonymous)],
                      [Function (anonymous)]
                    ],
                    error: [Function: reportStreamError],
                    close: [Function (anonymous)],
                    data: [Function (anonymous)]
                  },
                  _eventsCount: 4,
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: null,
                  _server: null,
                  [Symbol(async_id_symbol)]: 562,
                  [Symbol(kHandle)]: TCP {
                    reading: true,
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *12]
                  },
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: true,
                  [Symbol(kSetKeepAlive)]: false,
                  [Symbol(kSetKeepAliveInitialDelay)]: 0,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0
                },
                _keepAlive: false,
                _keepAliveInitialDelayMillis: 0,
                lastBuffer: false,
                parsedStatements: {},
                ssl: false,
                _ending: false,
                _emitMessage: false,
                _connecting: true,
                [Symbol(kCapture)]: false
              },
              queryQueue: [],
              binary: false,
              processID: 5688,
              secretKey: 372702810,
              ssl: false,
              _connectionTimeoutMillis: 0,
              _connectionCallback: null,
              release: [Function (anonymous)],
              activeQuery: null,
              readyForQuery: true,
              hasExecuted: true,
              _poolUseCount: 1,
              [Symbol(kCapture)]: false
            },
            Client {
              _events: [Object: null prototype] {
                error: [Function: idleListener]
              },
              _eventsCount: 1,
              _maxListeners: 100,
              connectionParameters: ConnectionParameters {
                user: 'argos_webserver',
                database: 'agros_net_db_dev',
                port: 5424,
                host: 'dtgeo.iptime.org',
                binary: false,
                options: undefined,
                ssl: false,
                client_encoding: '',
                replication: undefined,
                isDomainSocket: false,
                application_name: undefined,
                fallback_application_name: undefined,
                statement_timeout: false,
                idle_in_transaction_session_timeout: false,
                query_timeout: false,
                connect_timeout: 0
              },
              user: 'argos_webserver',
              database: 'agros_net_db_dev',
              port: 5424,
              host: 'dtgeo.iptime.org',
              replication: undefined,
              _Promise: [Function: Promise],
              _types: TypeOverrides {
                _types: {
                  getTypeParser: [Function: getTypeParser],
                  setTypeParser: [Function: setTypeParser],
                  arrayParser: { create: [Function: create] },
                  builtins: {
                    BOOL: 16,
                    BYTEA: 17,
                    CHAR: 18,
                    INT8: 20,
                    INT2: 21,
                    INT4: 23,
                    REGPROC: 24,
                    TEXT: 25,
                    OID: 26,
                    TID: 27,
                    XID: 28,
                    CID: 29,
                    JSON: 114,
                    XML: 142,
                    PG_NODE_TREE: 194,
                    SMGR: 210,
                    PATH: 602,
                    POLYGON: 604,
                    CIDR: 650,
                    FLOAT4: 700,
                    FLOAT8: 701,
                    ABSTIME: 702,
                    RELTIME: 703,
                    TINTERVAL: 704,
                    CIRCLE: 718,
                    MACADDR8: 774,
                    MONEY: 790,
                    MACADDR: 829,
                    INET: 869,
                    ACLITEM: 1033,
                    BPCHAR: 1042,
                    VARCHAR: 1043,
                    DATE: 1082,
                    TIME: 1083,
                    TIMESTAMP: 1114,
                    TIMESTAMPTZ: 1184,
                    INTERVAL: 1186,
                    TIMETZ: 1266,
                    BIT: 1560,
                    VARBIT: 1562,
                    NUMERIC: 1700,
                    REFCURSOR: 1790,
                    REGPROCEDURE: 2202,
                    REGOPER: 2203,
                    REGOPERATOR: 2204,
                    REGCLASS: 2205,
                    REGTYPE: 2206,
                    UUID: 2950,
                    TXID_SNAPSHOT: 2970,
                    PG_LSN: 3220,
                    PG_NDISTINCT: 3361,
                    PG_DEPENDENCIES: 3402,
                    TSVECTOR: 3614,
                    TSQUERY: 3615,
                    GTSVECTOR: 3642,
                    REGCONFIG: 3734,
                    REGDICTIONARY: 3769,
                    JSONB: 3802,
                    REGNAMESPACE: 4089,
                    REGROLE: 4096
                  }
                },
                text: {},
                binary: {}
              },
              _ending: false,
              _connecting: false,
              _connected: true,
              _connectionError: false,
              _queryable: true,
              connection: Connection {
                _events: [Object: null prototype] {
                  newListener: [Function (anonymous)],
                  connect: [Function (anonymous)],
                  sslconnect: [Function (anonymous)],
                  authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
                  authenticationMD5Password: [Function: bound _handleAuthMD5Password],
                  authenticationSASL: [Function: bound _handleAuthSASL],
                  authenticationSASLContinue: [Function: bound _handleAuthSASLContinue],
                  authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
                  backendKeyData: [Function: bound _handleBackendKeyData],
                  error: [Function: bound _handleErrorEvent],
                  errorMessage: [Function: bound _handleErrorMessage],
                  readyForQuery: [Function: bound _handleReadyForQuery],
                  notice: [Function: bound _handleNotice],
                  rowDescription: [Function: bound _handleRowDescription],
                  dataRow: [Function: bound _handleDataRow],
                  portalSuspended: [Function: bound _handlePortalSuspended],
                  emptyQuery: [Function: bound _handleEmptyQuery],
                  commandComplete: [Function: bound _handleCommandComplete],
                  parseComplete: [Function: bound _handleParseComplete],
                  copyInResponse: [Function: bound _handleCopyInResponse],
                  copyData: [Function: bound _handleCopyData],
                  notification: [Function: bound _handleNotification],
                  end: [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  }
                },
                _eventsCount: 23,
                _maxListeners: 100,
                stream: <ref *13> Socket {
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'dtgeo.iptime.org',
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: false,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: true,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _events: [Object: null prototype] {
                    end: [
                      [Function: onReadableStreamEnd],
                      [Function (anonymous)],
                      [Function (anonymous)]
                    ],
                    error: [Function: reportStreamError],
                    close: [Function (anonymous)],
                    data: [Function (anonymous)]
                  },
                  _eventsCount: 4,
                  _maxListeners: 100,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: null,
                  _server: null,
                  [Symbol(async_id_symbol)]: 594,
                  [Symbol(kHandle)]: TCP {
                    reading: true,
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *13]
                  },
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: true,
                  [Symbol(kSetKeepAlive)]: false,
                  [Symbol(kSetKeepAliveInitialDelay)]: 0,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0
                },
                _keepAlive: false,
                _keepAliveInitialDelayMillis: 0,
                lastBuffer: false,
                parsedStatements: {},
                ssl: false,
                _ending: true,
                _emitMessage: false,
                _connecting: true,
                [Symbol(kCapture)]: false
              },
              queryQueue: [],
              binary: false,
              processID: 5992,
              secretKey: 1224109907,
              ssl: false,
              _connectionTimeoutMillis: 0,
              _connectionCallback: null,
              release: [Function (anonymous)],
              activeQuery: null,
              readyForQuery: true,
              hasExecuted: true,
              _poolUseCount: 1,
              [Symbol(kCapture)]: false
            }
          ],
          _idle: [
            IdleItem {
              client: Client {
                _events: [Object: null prototype] {
                  error: [Function: idleListener]
                },
                _eventsCount: 1,
                _maxListeners: undefined,
                connectionParameters: ConnectionParameters {
                  user: 'argos_webserver',
                  database: 'agros_net_db_dev',
                  port: 5424,
                  host: 'dtgeo.iptime.org',
                  binary: false,
                  options: undefined,
                  ssl: false,
                  client_encoding: '',
                  replication: undefined,
                  isDomainSocket: false,
                  application_name: undefined,
                  fallback_application_name: undefined,
                  statement_timeout: false,
                  idle_in_transaction_session_timeout: false,
                  query_timeout: false,
                  connect_timeout: 0
                },
                user: 'argos_webserver',
                database: 'agros_net_db_dev',
                port: 5424,
                host: 'dtgeo.iptime.org',
                replication: undefined,
                _Promise: [Function: Promise],
                _types: TypeOverrides {
                  _types: {
                    getTypeParser: [Function: getTypeParser],
                    setTypeParser: [Function: setTypeParser],
                    arrayParser: { create: [Function: create] },
                    builtins: {
                      BOOL: 16,
                      BYTEA: 17,
                      CHAR: 18,
                      INT8: 20,
                      INT2: 21,
                      INT4: 23,
                      REGPROC: 24,
                      TEXT: 25,
                      OID: 26,
                      TID: 27,
                      XID: 28,
                      CID: 29,
                      JSON: 114,
                      XML: 142,
                      PG_NODE_TREE: 194,
                      SMGR: 210,
                      PATH: 602,
                      POLYGON: 604,
                      CIDR: 650,
                      FLOAT4: 700,
                      FLOAT8: 701,
                      ABSTIME: 702,
                      RELTIME: 703,
                      TINTERVAL: 704,
                      CIRCLE: 718,
                      MACADDR8: 774,
                      MONEY: 790,
                      MACADDR: 829,
                      INET: 869,
                      ACLITEM: 1033,
                      BPCHAR: 1042,
                      VARCHAR: 1043,
                      DATE: 1082,
                      TIME: 1083,
                      TIMESTAMP: 1114,
                      TIMESTAMPTZ: 1184,
                      INTERVAL: 1186,
                      TIMETZ: 1266,
                      BIT: 1560,
                      VARBIT: 1562,
                      NUMERIC: 1700,
                      REFCURSOR: 1790,
                      REGPROCEDURE: 2202,
                      REGOPER: 2203,
                      REGOPERATOR: 2204,
                      REGCLASS: 2205,
                      REGTYPE: 2206,
                      UUID: 2950,
                      TXID_SNAPSHOT: 2970,
                      PG_LSN: 3220,
                      PG_NDISTINCT: 3361,
                      PG_DEPENDENCIES: 3402,
                      TSVECTOR: 3614,
                      TSQUERY: 3615,
                      GTSVECTOR: 3642,
                      REGCONFIG: 3734,
                      REGDICTIONARY: 3769,
                      JSONB: 3802,
                      REGNAMESPACE: 4089,
                      REGROLE: 4096
                    }
                  },
                  text: {},
                  binary: {}
                },
                _ending: false,
                _connecting: false,
                _connected: true,
                _connectionError: false,
                _queryable: true,
                connection: Connection {
                  _events: [Object: null prototype] {
                    newListener: [Function (anonymous)],
                    connect: [Function (anonymous)],
                    sslconnect: [Function (anonymous)],
                    authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
                    authenticationMD5Password: [Function: bound _handleAuthMD5Password],
                    authenticationSASL: [Function: bound _handleAuthSASL],
                    authenticationSASLContinue: [Function: bound _handleAuthSASLContinue],
                    authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
                    backendKeyData: [Function: bound _handleBackendKeyData],
                    error: [Function: bound _handleErrorEvent],
                    errorMessage: [Function: bound _handleErrorMessage],
                    readyForQuery: [Function: bound _handleReadyForQuery],
                    notice: [Function: bound _handleNotice],
                    rowDescription: [Function: bound _handleRowDescription],
                    dataRow: [Function: bound _handleDataRow],
                    portalSuspended: [Function: bound _handlePortalSuspended],
                    emptyQuery: [Function: bound _handleEmptyQuery],
                    commandComplete: [Function: bound _handleCommandComplete],
                    parseComplete: [Function: bound _handleParseComplete],
                    copyInResponse: [Function: bound _handleCopyInResponse],
                    copyData: [Function: bound _handleCopyData],
                    notification: [Function: bound _handleNotification],
                    end: [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  },
                  _eventsCount: 23,
                  _maxListeners: undefined,
                  stream: <ref *6> Socket {
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'dtgeo.iptime.org',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _events: [Object: null prototype] {
                      end: [
                        [Function: onReadableStreamEnd],
                        [Function (anonymous)],
                        [Function (anonymous)]
                      ],
                      error: [Function: reportStreamError],
                      close: [Function (anonymous)],
                      data: [Function (anonymous)]
                    },
                    _eventsCount: 4,
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: null,
                    _server: null,
                    [Symbol(async_id_symbol)]: 25,
                    [Symbol(kHandle)]: TCP {
                      reading: true,
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *6]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: true,
                    [Symbol(kSetKeepAlive)]: false,
                    [Symbol(kSetKeepAliveInitialDelay)]: 0,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0
                  },
                  _keepAlive: false,
                  _keepAliveInitialDelayMillis: 0,
                  lastBuffer: false,
                  parsedStatements: {},
                  ssl: false,
                  _ending: false,
                  _emitMessage: false,
                  _connecting: true,
                  [Symbol(kCapture)]: false
                },
                queryQueue: [],
                binary: false,
                processID: 10620,
                secretKey: 2009363607,
                ssl: false,
                _connectionTimeoutMillis: 0,
                _connectionCallback: null,
                release: [Function (anonymous)],
                activeQuery: null,
                readyForQuery: true,
                hasExecuted: true,
                _poolUseCount: 1,
                [Symbol(kCapture)]: false
              },
              idleListener: [Function: idleListener],
              timeoutId: Timeout {
                _idleTimeout: 30000,
                _idlePrev: [Timeout],
                _idleNext: [TimersList],
                _idleStart: 586,
                _onTimeout: [Function (anonymous)],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: true,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 636,
                [Symbol(triggerId)]: 25
              }
            },
            IdleItem {
              client: Client {
                _events: [Object: null prototype] {
                  error: [Function: idleListener]
                },
                _eventsCount: 1,
                _maxListeners: undefined,
                connectionParameters: ConnectionParameters {
                  user: 'argos_webserver',
                  database: 'agros_net_db_dev',
                  port: 5424,
                  host: 'dtgeo.iptime.org',
                  binary: false,
                  options: undefined,
                  ssl: false,
                  client_encoding: '',
                  replication: undefined,
                  isDomainSocket: false,
                  application_name: undefined,
                  fallback_application_name: undefined,
                  statement_timeout: false,
                  idle_in_transaction_session_timeout: false,
                  query_timeout: false,
                  connect_timeout: 0
                },
                user: 'argos_webserver',
                database: 'agros_net_db_dev',
                port: 5424,
                host: 'dtgeo.iptime.org',
                replication: undefined,
                _Promise: [Function: Promise],
                _types: TypeOverrides {
                  _types: {
                    getTypeParser: [Function: getTypeParser],
                    setTypeParser: [Function: setTypeParser],
                    arrayParser: { create: [Function: create] },
                    builtins: {
                      BOOL: 16,
                      BYTEA: 17,
                      CHAR: 18,
                      INT8: 20,
                      INT2: 21,
                      INT4: 23,
                      REGPROC: 24,
                      TEXT: 25,
                      OID: 26,
                      TID: 27,
                      XID: 28,
                      CID: 29,
                      JSON: 114,
                      XML: 142,
                      PG_NODE_TREE: 194,
                      SMGR: 210,
                      PATH: 602,
                      POLYGON: 604,
                      CIDR: 650,
                      FLOAT4: 700,
                      FLOAT8: 701,
                      ABSTIME: 702,
                      RELTIME: 703,
                      TINTERVAL: 704,
                      CIRCLE: 718,
                      MACADDR8: 774,
                      MONEY: 790,
                      MACADDR: 829,
                      INET: 869,
                      ACLITEM: 1033,
                      BPCHAR: 1042,
                      VARCHAR: 1043,
                      DATE: 1082,
                      TIME: 1083,
                      TIMESTAMP: 1114,
                      TIMESTAMPTZ: 1184,
                      INTERVAL: 1186,
                      TIMETZ: 1266,
                      BIT: 1560,
                      VARBIT: 1562,
                      NUMERIC: 1700,
                      REFCURSOR: 1790,
                      REGPROCEDURE: 2202,
                      REGOPER: 2203,
                      REGOPERATOR: 2204,
                      REGCLASS: 2205,
                      REGTYPE: 2206,
                      UUID: 2950,
                      TXID_SNAPSHOT: 2970,
                      PG_LSN: 3220,
                      PG_NDISTINCT: 3361,
                      PG_DEPENDENCIES: 3402,
                      TSVECTOR: 3614,
                      TSQUERY: 3615,
                      GTSVECTOR: 3642,
                      REGCONFIG: 3734,
                      REGDICTIONARY: 3769,
                      JSONB: 3802,
                      REGNAMESPACE: 4089,
                      REGROLE: 4096
                    }
                  },
                  text: {},
                  binary: {}
                },
                _ending: false,
                _connecting: false,
                _connected: true,
                _connectionError: false,
                _queryable: true,
                connection: Connection {
                  _events: [Object: null prototype] {
                    newListener: [Function (anonymous)],
                    connect: [Function (anonymous)],
                    sslconnect: [Function (anonymous)],
                    authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
                    authenticationMD5Password: [Function: bound _handleAuthMD5Password],
                    authenticationSASL: [Function: bound _handleAuthSASL],
                    authenticationSASLContinue: [Function: bound _handleAuthSASLContinue],
                    authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
                    backendKeyData: [Function: bound _handleBackendKeyData],
                    error: [Function: bound _handleErrorEvent],
                    errorMessage: [Function: bound _handleErrorMessage],
                    readyForQuery: [Function: bound _handleReadyForQuery],
                    notice: [Function: bound _handleNotice],
                    rowDescription: [Function: bound _handleRowDescription],
                    dataRow: [Function: bound _handleDataRow],
                    portalSuspended: [Function: bound _handlePortalSuspended],
                    emptyQuery: [Function: bound _handleEmptyQuery],
                    commandComplete: [Function: bound _handleCommandComplete],
                    parseComplete: [Function: bound _handleParseComplete],
                    copyInResponse: [Function: bound _handleCopyInResponse],
                    copyData: [Function: bound _handleCopyData],
                    notification: [Function: bound _handleNotification],
                    end: [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  },
                  _eventsCount: 23,
                  _maxListeners: undefined,
                  stream: <ref *7> Socket {
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'dtgeo.iptime.org',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _events: [Object: null prototype] {
                      end: [
                        [Function: onReadableStreamEnd],
                        [Function (anonymous)],
                        [Function (anonymous)]
                      ],
                      error: [Function: reportStreamError],
                      close: [Function (anonymous)],
                      data: [Function (anonymous)]
                    },
                    _eventsCount: 4,
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: null,
                    _server: null,
                    [Symbol(async_id_symbol)]: 472,
                    [Symbol(kHandle)]: TCP {
                      reading: true,
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *7]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: true,
                    [Symbol(kSetKeepAlive)]: false,
                    [Symbol(kSetKeepAliveInitialDelay)]: 0,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0
                  },
                  _keepAlive: false,
                  _keepAliveInitialDelayMillis: 0,
                  lastBuffer: false,
                  parsedStatements: {},
                  ssl: false,
                  _ending: false,
                  _emitMessage: false,
                  _connecting: true,
                  [Symbol(kCapture)]: false
                },
                queryQueue: [],
                binary: false,
                processID: 7776,
                secretKey: 709313372,
                ssl: false,
                _connectionTimeoutMillis: 0,
                _connectionCallback: null,
                release: [Function (anonymous)],
                activeQuery: null,
                readyForQuery: true,
                hasExecuted: true,
                _poolUseCount: 1,
                [Symbol(kCapture)]: false
              },
              idleListener: [Function: idleListener],
              timeoutId: Timeout {
                _idleTimeout: 30000,
                _idlePrev: [Timeout],
                _idleNext: [Timeout],
                _idleStart: 595,
                _onTimeout: [Function (anonymous)],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: true,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 660,
                [Symbol(triggerId)]: 472
              }
            },
            IdleItem {
              client: Client {
                _events: [Object: null prototype] {
                  error: [Function: idleListener]
                },
                _eventsCount: 1,
                _maxListeners: undefined,
                connectionParameters: ConnectionParameters {
                  user: 'argos_webserver',
                  database: 'agros_net_db_dev',
                  port: 5424,
                  host: 'dtgeo.iptime.org',
                  binary: false,
                  options: undefined,
                  ssl: false,
                  client_encoding: '',
                  replication: undefined,
                  isDomainSocket: false,
                  application_name: undefined,
                  fallback_application_name: undefined,
                  statement_timeout: false,
                  idle_in_transaction_session_timeout: false,
                  query_timeout: false,
                  connect_timeout: 0
                },
                user: 'argos_webserver',
                database: 'agros_net_db_dev',
                port: 5424,
                host: 'dtgeo.iptime.org',
                replication: undefined,
                _Promise: [Function: Promise],
                _types: TypeOverrides {
                  _types: {
                    getTypeParser: [Function: getTypeParser],
                    setTypeParser: [Function: setTypeParser],
                    arrayParser: { create: [Function: create] },
                    builtins: {
                      BOOL: 16,
                      BYTEA: 17,
                      CHAR: 18,
                      INT8: 20,
                      INT2: 21,
                      INT4: 23,
                      REGPROC: 24,
                      TEXT: 25,
                      OID: 26,
                      TID: 27,
                      XID: 28,
                      CID: 29,
                      JSON: 114,
                      XML: 142,
                      PG_NODE_TREE: 194,
                      SMGR: 210,
                      PATH: 602,
                      POLYGON: 604,
                      CIDR: 650,
                      FLOAT4: 700,
                      FLOAT8: 701,
                      ABSTIME: 702,
                      RELTIME: 703,
                      TINTERVAL: 704,
                      CIRCLE: 718,
                      MACADDR8: 774,
                      MONEY: 790,
                      MACADDR: 829,
                      INET: 869,
                      ACLITEM: 1033,
                      BPCHAR: 1042,
                      VARCHAR: 1043,
                      DATE: 1082,
                      TIME: 1083,
                      TIMESTAMP: 1114,
                      TIMESTAMPTZ: 1184,
                      INTERVAL: 1186,
                      TIMETZ: 1266,
                      BIT: 1560,
                      VARBIT: 1562,
                      NUMERIC: 1700,
                      REFCURSOR: 1790,
                      REGPROCEDURE: 2202,
                      REGOPER: 2203,
                      REGOPERATOR: 2204,
                      REGCLASS: 2205,
                      REGTYPE: 2206,
                      UUID: 2950,
                      TXID_SNAPSHOT: 2970,
                      PG_LSN: 3220,
                      PG_NDISTINCT: 3361,
                      PG_DEPENDENCIES: 3402,
                      TSVECTOR: 3614,
                      TSQUERY: 3615,
                      GTSVECTOR: 3642,
                      REGCONFIG: 3734,
                      REGDICTIONARY: 3769,
                      JSONB: 3802,
                      REGNAMESPACE: 4089,
                      REGROLE: 4096
                    }
                  },
                  text: {},
                  binary: {}
                },
                _ending: false,
                _connecting: false,
                _connected: true,
                _connectionError: false,
                _queryable: true,
                connection: Connection {
                  _events: [Object: null prototype] {
                    newListener: [Function (anonymous)],
                    connect: [Function (anonymous)],
                    sslconnect: [Function (anonymous)],
                    authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
                    authenticationMD5Password: [Function: bound _handleAuthMD5Password],
                    authenticationSASL: [Function: bound _handleAuthSASL],
                    authenticationSASLContinue: [Function: bound _handleAuthSASLContinue],
                    authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
                    backendKeyData: [Function: bound _handleBackendKeyData],
                    error: [Function: bound _handleErrorEvent],
                    errorMessage: [Function: bound _handleErrorMessage],
                    readyForQuery: [Function: bound _handleReadyForQuery],
                    notice: [Function: bound _handleNotice],
                    rowDescription: [Function: bound _handleRowDescription],
                    dataRow: [Function: bound _handleDataRow],
                    portalSuspended: [Function: bound _handlePortalSuspended],
                    emptyQuery: [Function: bound _handleEmptyQuery],
                    commandComplete: [Function: bound _handleCommandComplete],
                    parseComplete: [Function: bound _handleParseComplete],
                    copyInResponse: [Function: bound _handleCopyInResponse],
                    copyData: [Function: bound _handleCopyData],
                    notification: [Function: bound _handleNotification],
                    end: [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  },
                  _eventsCount: 23,
                  _maxListeners: undefined,
                  stream: <ref *8> Socket {
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'dtgeo.iptime.org',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _events: [Object: null prototype] {
                      end: [
                        [Function: onReadableStreamEnd],
                        [Function (anonymous)],
                        [Function (anonymous)]
                      ],
                      error: [Function: reportStreamError],
                      close: [Function (anonymous)],
                      data: [Function (anonymous)]
                    },
                    _eventsCount: 4,
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: null,
                    _server: null,
                    [Symbol(async_id_symbol)]: 490,
                    [Symbol(kHandle)]: TCP {
                      reading: true,
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *8]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: true,
                    [Symbol(kSetKeepAlive)]: false,
                    [Symbol(kSetKeepAliveInitialDelay)]: 0,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0
                  },
                  _keepAlive: false,
                  _keepAliveInitialDelayMillis: 0,
                  lastBuffer: false,
                  parsedStatements: {},
                  ssl: false,
                  _ending: false,
                  _emitMessage: false,
                  _connecting: true,
                  [Symbol(kCapture)]: false
                },
                queryQueue: [],
                binary: false,
                processID: 7336,
                secretKey: -1689568873,
                ssl: false,
                _connectionTimeoutMillis: 0,
                _connectionCallback: null,
                release: [Function (anonymous)],
                activeQuery: null,
                readyForQuery: true,
                hasExecuted: true,
                _poolUseCount: 1,
                [Symbol(kCapture)]: false
              },
              idleListener: [Function: idleListener],
              timeoutId: Timeout {
                _idleTimeout: 30000,
                _idlePrev: [Timeout],
                _idleNext: [Timeout],
                _idleStart: 596,
                _onTimeout: [Function (anonymous)],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: true,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 662,
                [Symbol(triggerId)]: 490
              }
            },
            IdleItem {
              client: Client {
                _events: [Object: null prototype] {
                  error: [Function: idleListener]
                },
                _eventsCount: 1,
                _maxListeners: undefined,
                connectionParameters: ConnectionParameters {
                  user: 'argos_webserver',
                  database: 'agros_net_db_dev',
                  port: 5424,
                  host: 'dtgeo.iptime.org',
                  binary: false,
                  options: undefined,
                  ssl: false,
                  client_encoding: '',
                  replication: undefined,
                  isDomainSocket: false,
                  application_name: undefined,
                  fallback_application_name: undefined,
                  statement_timeout: false,
                  idle_in_transaction_session_timeout: false,
                  query_timeout: false,
                  connect_timeout: 0
                },
                user: 'argos_webserver',
                database: 'agros_net_db_dev',
                port: 5424,
                host: 'dtgeo.iptime.org',
                replication: undefined,
                _Promise: [Function: Promise],
                _types: TypeOverrides {
                  _types: {
                    getTypeParser: [Function: getTypeParser],
                    setTypeParser: [Function: setTypeParser],
                    arrayParser: { create: [Function: create] },
                    builtins: {
                      BOOL: 16,
                      BYTEA: 17,
                      CHAR: 18,
                      INT8: 20,
                      INT2: 21,
                      INT4: 23,
                      REGPROC: 24,
                      TEXT: 25,
                      OID: 26,
                      TID: 27,
                      XID: 28,
                      CID: 29,
                      JSON: 114,
                      XML: 142,
                      PG_NODE_TREE: 194,
                      SMGR: 210,
                      PATH: 602,
                      POLYGON: 604,
                      CIDR: 650,
                      FLOAT4: 700,
                      FLOAT8: 701,
                      ABSTIME: 702,
                      RELTIME: 703,
                      TINTERVAL: 704,
                      CIRCLE: 718,
                      MACADDR8: 774,
                      MONEY: 790,
                      MACADDR: 829,
                      INET: 869,
                      ACLITEM: 1033,
                      BPCHAR: 1042,
                      VARCHAR: 1043,
                      DATE: 1082,
                      TIME: 1083,
                      TIMESTAMP: 1114,
                      TIMESTAMPTZ: 1184,
                      INTERVAL: 1186,
                      TIMETZ: 1266,
                      BIT: 1560,
                      VARBIT: 1562,
                      NUMERIC: 1700,
                      REFCURSOR: 1790,
                      REGPROCEDURE: 2202,
                      REGOPER: 2203,
                      REGOPERATOR: 2204,
                      REGCLASS: 2205,
                      REGTYPE: 2206,
                      UUID: 2950,
                      TXID_SNAPSHOT: 2970,
                      PG_LSN: 3220,
                      PG_NDISTINCT: 3361,
                      PG_DEPENDENCIES: 3402,
                      TSVECTOR: 3614,
                      TSQUERY: 3615,
                      GTSVECTOR: 3642,
                      REGCONFIG: 3734,
                      REGDICTIONARY: 3769,
                      JSONB: 3802,
                      REGNAMESPACE: 4089,
                      REGROLE: 4096
                    }
                  },
                  text: {},
                  binary: {}
                },
                _ending: false,
                _connecting: false,
                _connected: true,
                _connectionError: false,
                _queryable: true,
                connection: Connection {
                  _events: [Object: null prototype] {
                    newListener: [Function (anonymous)],
                    connect: [Function (anonymous)],
                    sslconnect: [Function (anonymous)],
                    authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
                    authenticationMD5Password: [Function: bound _handleAuthMD5Password],
                    authenticationSASL: [Function: bound _handleAuthSASL],
                    authenticationSASLContinue: [Function: bound _handleAuthSASLContinue],
                    authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
                    backendKeyData: [Function: bound _handleBackendKeyData],
                    error: [Function: bound _handleErrorEvent],
                    errorMessage: [Function: bound _handleErrorMessage],
                    readyForQuery: [Function: bound _handleReadyForQuery],
                    notice: [Function: bound _handleNotice],
                    rowDescription: [Function: bound _handleRowDescription],
                    dataRow: [Function: bound _handleDataRow],
                    portalSuspended: [Function: bound _handlePortalSuspended],
                    emptyQuery: [Function: bound _handleEmptyQuery],
                    commandComplete: [Function: bound _handleCommandComplete],
                    parseComplete: [Function: bound _handleParseComplete],
                    copyInResponse: [Function: bound _handleCopyInResponse],
                    copyData: [Function: bound _handleCopyData],
                    notification: [Function: bound _handleNotification],
                    end: [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  },
                  _eventsCount: 23,
                  _maxListeners: undefined,
                  stream: <ref *10> Socket {
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'dtgeo.iptime.org',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _events: [Object: null prototype] {
                      end: [
                        [Function: onReadableStreamEnd],
                        [Function (anonymous)],
                        [Function (anonymous)]
                      ],
                      error: [Function: reportStreamError],
                      close: [Function (anonymous)],
                      data: [Function (anonymous)]
                    },
                    _eventsCount: 4,
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: null,
                    _server: null,
                    [Symbol(async_id_symbol)]: 526,
                    [Symbol(kHandle)]: TCP {
                      reading: true,
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *10]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: true,
                    [Symbol(kSetKeepAlive)]: false,
                    [Symbol(kSetKeepAliveInitialDelay)]: 0,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0
                  },
                  _keepAlive: false,
                  _keepAliveInitialDelayMillis: 0,
                  lastBuffer: false,
                  parsedStatements: {},
                  ssl: false,
                  _ending: false,
                  _emitMessage: false,
                  _connecting: true,
                  [Symbol(kCapture)]: false
                },
                queryQueue: [],
                binary: false,
                processID: 14108,
                secretKey: 2073291469,
                ssl: false,
                _connectionTimeoutMillis: 0,
                _connectionCallback: null,
                release: [Function (anonymous)],
                activeQuery: null,
                readyForQuery: true,
                hasExecuted: true,
                _poolUseCount: 1,
                [Symbol(kCapture)]: false
              },
              idleListener: [Function: idleListener],
              timeoutId: Timeout {
                _idleTimeout: 30000,
                _idlePrev: [Timeout],
                _idleNext: [Timeout],
                _idleStart: 596,
                _onTimeout: [Function (anonymous)],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: true,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 664,
                [Symbol(triggerId)]: 526
              }
            },
            IdleItem {
              client: Client {
                _events: [Object: null prototype] {
                  error: [Function: idleListener]
                },
                _eventsCount: 1,
                _maxListeners: undefined,
                connectionParameters: ConnectionParameters {
                  user: 'argos_webserver',
                  database: 'agros_net_db_dev',
                  port: 5424,
                  host: 'dtgeo.iptime.org',
                  binary: false,
                  options: undefined,
                  ssl: false,
                  client_encoding: '',
                  replication: undefined,
                  isDomainSocket: false,
                  application_name: undefined,
                  fallback_application_name: undefined,
                  statement_timeout: false,
                  idle_in_transaction_session_timeout: false,
                  query_timeout: false,
                  connect_timeout: 0
                },
                user: 'argos_webserver',
                database: 'agros_net_db_dev',
                port: 5424,
                host: 'dtgeo.iptime.org',
                replication: undefined,
                _Promise: [Function: Promise],
                _types: TypeOverrides {
                  _types: {
                    getTypeParser: [Function: getTypeParser],
                    setTypeParser: [Function: setTypeParser],
                    arrayParser: { create: [Function: create] },
                    builtins: {
                      BOOL: 16,
                      BYTEA: 17,
                      CHAR: 18,
                      INT8: 20,
                      INT2: 21,
                      INT4: 23,
                      REGPROC: 24,
                      TEXT: 25,
                      OID: 26,
                      TID: 27,
                      XID: 28,
                      CID: 29,
                      JSON: 114,
                      XML: 142,
                      PG_NODE_TREE: 194,
                      SMGR: 210,
                      PATH: 602,
                      POLYGON: 604,
                      CIDR: 650,
                      FLOAT4: 700,
                      FLOAT8: 701,
                      ABSTIME: 702,
                      RELTIME: 703,
                      TINTERVAL: 704,
                      CIRCLE: 718,
                      MACADDR8: 774,
                      MONEY: 790,
                      MACADDR: 829,
                      INET: 869,
                      ACLITEM: 1033,
                      BPCHAR: 1042,
                      VARCHAR: 1043,
                      DATE: 1082,
                      TIME: 1083,
                      TIMESTAMP: 1114,
                      TIMESTAMPTZ: 1184,
                      INTERVAL: 1186,
                      TIMETZ: 1266,
                      BIT: 1560,
                      VARBIT: 1562,
                      NUMERIC: 1700,
                      REFCURSOR: 1790,
                      REGPROCEDURE: 2202,
                      REGOPER: 2203,
                      REGOPERATOR: 2204,
                      REGCLASS: 2205,
                      REGTYPE: 2206,
                      UUID: 2950,
                      TXID_SNAPSHOT: 2970,
                      PG_LSN: 3220,
                      PG_NDISTINCT: 3361,
                      PG_DEPENDENCIES: 3402,
                      TSVECTOR: 3614,
                      TSQUERY: 3615,
                      GTSVECTOR: 3642,
                      REGCONFIG: 3734,
                      REGDICTIONARY: 3769,
                      JSONB: 3802,
                      REGNAMESPACE: 4089,
                      REGROLE: 4096
                    }
                  },
                  text: {},
                  binary: {}
                },
                _ending: false,
                _connecting: false,
                _connected: true,
                _connectionError: false,
                _queryable: true,
                connection: Connection {
                  _events: [Object: null prototype] {
                    newListener: [Function (anonymous)],
                    connect: [Function (anonymous)],
                    sslconnect: [Function (anonymous)],
                    authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
                    authenticationMD5Password: [Function: bound _handleAuthMD5Password],
                    authenticationSASL: [Function: bound _handleAuthSASL],
                    authenticationSASLContinue: [Function: bound _handleAuthSASLContinue],
                    authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
                    backendKeyData: [Function: bound _handleBackendKeyData],
                    error: [Function: bound _handleErrorEvent],
                    errorMessage: [Function: bound _handleErrorMessage],
                    readyForQuery: [Function: bound _handleReadyForQuery],
                    notice: [Function: bound _handleNotice],
                    rowDescription: [Function: bound _handleRowDescription],
                    dataRow: [Function: bound _handleDataRow],
                    portalSuspended: [Function: bound _handlePortalSuspended],
                    emptyQuery: [Function: bound _handleEmptyQuery],
                    commandComplete: [Function: bound _handleCommandComplete],
                    parseComplete: [Function: bound _handleParseComplete],
                    copyInResponse: [Function: bound _handleCopyInResponse],
                    copyData: [Function: bound _handleCopyData],
                    notification: [Function: bound _handleNotification],
                    end: [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  },
                  _eventsCount: 23,
                  _maxListeners: undefined,
                  stream: <ref *11> Socket {
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'dtgeo.iptime.org',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _events: [Object: null prototype] {
                      end: [
                        [Function: onReadableStreamEnd],
                        [Function (anonymous)],
                        [Function (anonymous)]
                      ],
                      error: [Function: reportStreamError],
                      close: [Function (anonymous)],
                      data: [Function (anonymous)]
                    },
                    _eventsCount: 4,
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: null,
                    _server: null,
                    [Symbol(async_id_symbol)]: 544,
                    [Symbol(kHandle)]: TCP {
                      reading: true,
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *11]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: true,
                    [Symbol(kSetKeepAlive)]: false,
                    [Symbol(kSetKeepAliveInitialDelay)]: 0,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0
                  },
                  _keepAlive: false,
                  _keepAliveInitialDelayMillis: 0,
                  lastBuffer: false,
                  parsedStatements: {},
                  ssl: false,
                  _ending: false,
                  _emitMessage: false,
                  _connecting: true,
                  [Symbol(kCapture)]: false
                },
                queryQueue: [],
                binary: false,
                processID: 12404,
                secretKey: -1205681715,
                ssl: false,
                _connectionTimeoutMillis: 0,
                _connectionCallback: null,
                release: [Function (anonymous)],
                activeQuery: null,
                readyForQuery: true,
                hasExecuted: true,
                _poolUseCount: 1,
                [Symbol(kCapture)]: false
              },
              idleListener: [Function: idleListener],
              timeoutId: Timeout {
                _idleTimeout: 30000,
                _idlePrev: [Timeout],
                _idleNext: [Timeout],
                _idleStart: 597,
                _onTimeout: [Function (anonymous)],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: true,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 666,
                [Symbol(triggerId)]: 544
              }
            },
            IdleItem {
              client: Client {
                _events: [Object: null prototype] {
                  error: [Function: idleListener]
                },
                _eventsCount: 1,
                _maxListeners: 100,
                connectionParameters: ConnectionParameters {
                  user: 'argos_webserver',
                  database: 'agros_net_db_dev',
                  port: 5424,
                  host: 'dtgeo.iptime.org',
                  binary: false,
                  options: undefined,
                  ssl: false,
                  client_encoding: '',
                  replication: undefined,
                  isDomainSocket: false,
                  application_name: undefined,
                  fallback_application_name: undefined,
                  statement_timeout: false,
                  idle_in_transaction_session_timeout: false,
                  query_timeout: false,
                  connect_timeout: 0
                },
                user: 'argos_webserver',
                database: 'agros_net_db_dev',
                port: 5424,
                host: 'dtgeo.iptime.org',
                replication: undefined,
                _Promise: [Function: Promise],
                _types: TypeOverrides {
                  _types: {
                    getTypeParser: [Function: getTypeParser],
                    setTypeParser: [Function: setTypeParser],
                    arrayParser: { create: [Function: create] },
                    builtins: {
                      BOOL: 16,
                      BYTEA: 17,
                      CHAR: 18,
                      INT8: 20,
                      INT2: 21,
                      INT4: 23,
                      REGPROC: 24,
                      TEXT: 25,
                      OID: 26,
                      TID: 27,
                      XID: 28,
                      CID: 29,
                      JSON: 114,
                      XML: 142,
                      PG_NODE_TREE: 194,
                      SMGR: 210,
                      PATH: 602,
                      POLYGON: 604,
                      CIDR: 650,
                      FLOAT4: 700,
                      FLOAT8: 701,
                      ABSTIME: 702,
                      RELTIME: 703,
                      TINTERVAL: 704,
                      CIRCLE: 718,
                      MACADDR8: 774,
                      MONEY: 790,
                      MACADDR: 829,
                      INET: 869,
                      ACLITEM: 1033,
                      BPCHAR: 1042,
                      VARCHAR: 1043,
                      DATE: 1082,
                      TIME: 1083,
                      TIMESTAMP: 1114,
                      TIMESTAMPTZ: 1184,
                      INTERVAL: 1186,
                      TIMETZ: 1266,
                      BIT: 1560,
                      VARBIT: 1562,
                      NUMERIC: 1700,
                      REFCURSOR: 1790,
                      REGPROCEDURE: 2202,
                      REGOPER: 2203,
                      REGOPERATOR: 2204,
                      REGCLASS: 2205,
                      REGTYPE: 2206,
                      UUID: 2950,
                      TXID_SNAPSHOT: 2970,
                      PG_LSN: 3220,
                      PG_NDISTINCT: 3361,
                      PG_DEPENDENCIES: 3402,
                      TSVECTOR: 3614,
                      TSQUERY: 3615,
                      GTSVECTOR: 3642,
                      REGCONFIG: 3734,
                      REGDICTIONARY: 3769,
                      JSONB: 3802,
                      REGNAMESPACE: 4089,
                      REGROLE: 4096
                    }
                  },
                  text: {},
                  binary: {}
                },
                _ending: false,
                _connecting: false,
                _connected: true,
                _connectionError: false,
                _queryable: true,
                connection: Connection {
                  _events: [Object: null prototype] {
                    newListener: [Function (anonymous)],
                    connect: [Function (anonymous)],
                    sslconnect: [Function (anonymous)],
                    authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
                    authenticationMD5Password: [Function: bound _handleAuthMD5Password],
                    authenticationSASL: [Function: bound _handleAuthSASL],
                    authenticationSASLContinue: [Function: bound _handleAuthSASLContinue],
                    authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
                    backendKeyData: [Function: bound _handleBackendKeyData],
                    error: [Function: bound _handleErrorEvent],
                    errorMessage: [Function: bound _handleErrorMessage],
                    readyForQuery: [Function: bound _handleReadyForQuery],
                    notice: [Function: bound _handleNotice],
                    rowDescription: [Function: bound _handleRowDescription],
                    dataRow: [Function: bound _handleDataRow],
                    portalSuspended: [Function: bound _handlePortalSuspended],
                    emptyQuery: [Function: bound _handleEmptyQuery],
                    commandComplete: [Function: bound _handleCommandComplete],
                    parseComplete: [Function: bound _handleParseComplete],
                    copyInResponse: [Function: bound _handleCopyInResponse],
                    copyData: [Function: bound _handleCopyData],
                    notification: [Function: bound _handleNotification],
                    end: [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  },
                  _eventsCount: 23,
                  _maxListeners: 100,
                  stream: <ref *13> Socket {
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'dtgeo.iptime.org',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _events: [Object: null prototype] {
                      end: [
                        [Function: onReadableStreamEnd],
                        [Function (anonymous)],
                        [Function (anonymous)]
                      ],
                      error: [Function: reportStreamError],
                      close: [Function (anonymous)],
                      data: [Function (anonymous)]
                    },
                    _eventsCount: 4,
                    _maxListeners: 100,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: null,
                    _server: null,
                    [Symbol(async_id_symbol)]: 594,
                    [Symbol(kHandle)]: TCP {
                      reading: true,
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *13]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: true,
                    [Symbol(kSetKeepAlive)]: false,
                    [Symbol(kSetKeepAliveInitialDelay)]: 0,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0
                  },
                  _keepAlive: false,
                  _keepAliveInitialDelayMillis: 0,
                  lastBuffer: false,
                  parsedStatements: {},
                  ssl: false,
                  _ending: true,
                  _emitMessage: false,
                  _connecting: true,
                  [Symbol(kCapture)]: false
                },
                queryQueue: [],
                binary: false,
                processID: 5992,
                secretKey: 1224109907,
                ssl: false,
                _connectionTimeoutMillis: 0,
                _connectionCallback: null,
                release: [Function (anonymous)],
                activeQuery: null,
                readyForQuery: true,
                hasExecuted: true,
                _poolUseCount: 1,
                [Symbol(kCapture)]: false
              },
              idleListener: [Function: idleListener],
              timeoutId: Timeout {
                _idleTimeout: 30000,
                _idlePrev: [Timeout],
                _idleNext: [Timeout],
                _idleStart: 600,
                _onTimeout: [Function (anonymous)],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: true,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 674,
                [Symbol(triggerId)]: 594
              }
            },
            IdleItem {
              client: Client {
                _events: [Object: null prototype] {
                  error: [Function: idleListener]
                },
                _eventsCount: 1,
                _maxListeners: undefined,
                connectionParameters: ConnectionParameters {
                  user: 'argos_webserver',
                  database: 'agros_net_db_dev',
                  port: 5424,
                  host: 'dtgeo.iptime.org',
                  binary: false,
                  options: undefined,
                  ssl: false,
                  client_encoding: '',
                  replication: undefined,
                  isDomainSocket: false,
                  application_name: undefined,
                  fallback_application_name: undefined,
                  statement_timeout: false,
                  idle_in_transaction_session_timeout: false,
                  query_timeout: false,
                  connect_timeout: 0
                },
                user: 'argos_webserver',
                database: 'agros_net_db_dev',
                port: 5424,
                host: 'dtgeo.iptime.org',
                replication: undefined,
                _Promise: [Function: Promise],
                _types: TypeOverrides {
                  _types: {
                    getTypeParser: [Function: getTypeParser],
                    setTypeParser: [Function: setTypeParser],
                    arrayParser: { create: [Function: create] },
                    builtins: {
                      BOOL: 16,
                      BYTEA: 17,
                      CHAR: 18,
                      INT8: 20,
                      INT2: 21,
                      INT4: 23,
                      REGPROC: 24,
                      TEXT: 25,
                      OID: 26,
                      TID: 27,
                      XID: 28,
                      CID: 29,
                      JSON: 114,
                      XML: 142,
                      PG_NODE_TREE: 194,
                      SMGR: 210,
                      PATH: 602,
                      POLYGON: 604,
                      CIDR: 650,
                      FLOAT4: 700,
                      FLOAT8: 701,
                      ABSTIME: 702,
                      RELTIME: 703,
                      TINTERVAL: 704,
                      CIRCLE: 718,
                      MACADDR8: 774,
                      MONEY: 790,
                      MACADDR: 829,
                      INET: 869,
                      ACLITEM: 1033,
                      BPCHAR: 1042,
                      VARCHAR: 1043,
                      DATE: 1082,
                      TIME: 1083,
                      TIMESTAMP: 1114,
                      TIMESTAMPTZ: 1184,
                      INTERVAL: 1186,
                      TIMETZ: 1266,
                      BIT: 1560,
                      VARBIT: 1562,
                      NUMERIC: 1700,
                      REFCURSOR: 1790,
                      REGPROCEDURE: 2202,
                      REGOPER: 2203,
                      REGOPERATOR: 2204,
                      REGCLASS: 2205,
                      REGTYPE: 2206,
                      UUID: 2950,
                      TXID_SNAPSHOT: 2970,
                      PG_LSN: 3220,
                      PG_NDISTINCT: 3361,
                      PG_DEPENDENCIES: 3402,
                      TSVECTOR: 3614,
                      TSQUERY: 3615,
                      GTSVECTOR: 3642,
                      REGCONFIG: 3734,
                      REGDICTIONARY: 3769,
                      JSONB: 3802,
                      REGNAMESPACE: 4089,
                      REGROLE: 4096
                    }
                  },
                  text: {},
                  binary: {}
                },
                _ending: false,
                _connecting: false,
                _connected: true,
                _connectionError: false,
                _queryable: true,
                connection: Connection {
                  _events: [Object: null prototype] {
                    newListener: [Function (anonymous)],
                    connect: [Function (anonymous)],
                    sslconnect: [Function (anonymous)],
                    authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
                    authenticationMD5Password: [Function: bound _handleAuthMD5Password],
                    authenticationSASL: [Function: bound _handleAuthSASL],
                    authenticationSASLContinue: [Function: bound _handleAuthSASLContinue],
                    authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
                    backendKeyData: [Function: bound _handleBackendKeyData],
                    error: [Function: bound _handleErrorEvent],
                    errorMessage: [Function: bound _handleErrorMessage],
                    readyForQuery: [Function: bound _handleReadyForQuery],
                    notice: [Function: bound _handleNotice],
                    rowDescription: [Function: bound _handleRowDescription],
                    dataRow: [Function: bound _handleDataRow],
                    portalSuspended: [Function: bound _handlePortalSuspended],
                    emptyQuery: [Function: bound _handleEmptyQuery],
                    commandComplete: [Function: bound _handleCommandComplete],
                    parseComplete: [Function: bound _handleParseComplete],
                    copyInResponse: [Function: bound _handleCopyInResponse],
                    copyData: [Function: bound _handleCopyData],
                    notification: [Function: bound _handleNotification],
                    end: [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  },
                  _eventsCount: 23,
                  _maxListeners: undefined,
                  stream: <ref *12> Socket {
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'dtgeo.iptime.org',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _events: [Object: null prototype] {
                      end: [
                        [Function: onReadableStreamEnd],
                        [Function (anonymous)],
                        [Function (anonymous)]
                      ],
                      error: [Function: reportStreamError],
                      close: [Function (anonymous)],
                      data: [Function (anonymous)]
                    },
                    _eventsCount: 4,
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: null,
                    _server: null,
                    [Symbol(async_id_symbol)]: 562,
                    [Symbol(kHandle)]: TCP {
                      reading: true,
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *12]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: true,
                    [Symbol(kSetKeepAlive)]: false,
                    [Symbol(kSetKeepAliveInitialDelay)]: 0,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0
                  },
                  _keepAlive: false,
                  _keepAliveInitialDelayMillis: 0,
                  lastBuffer: false,
                  parsedStatements: {},
                  ssl: false,
                  _ending: false,
                  _emitMessage: false,
                  _connecting: true,
                  [Symbol(kCapture)]: false
                },
                queryQueue: [],
                binary: false,
                processID: 5688,
                secretKey: 372702810,
                ssl: false,
                _connectionTimeoutMillis: 0,
                _connectionCallback: null,
                release: [Function (anonymous)],
                activeQuery: null,
                readyForQuery: true,
                hasExecuted: true,
                _poolUseCount: 1,
                [Symbol(kCapture)]: false
              },
              idleListener: [Function: idleListener],
              timeoutId: Timeout {
                _idleTimeout: 30000,
                _idlePrev: [Timeout],
                _idleNext: [Timeout],
                _idleStart: 600,
                _onTimeout: [Function (anonymous)],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: true,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 677,
                [Symbol(triggerId)]: 562
              }
            },
            IdleItem {
              client: Client {
                _events: [Object: null prototype] {
                  error: [Function: idleListener]
                },
                _eventsCount: 1,
                _maxListeners: undefined,
                connectionParameters: ConnectionParameters {
                  user: 'argos_webserver',
                  database: 'agros_net_db_dev',
                  port: 5424,
                  host: 'dtgeo.iptime.org',
                  binary: false,
                  options: undefined,
                  ssl: false,
                  client_encoding: '',
                  replication: undefined,
                  isDomainSocket: false,
                  application_name: undefined,
                  fallback_application_name: undefined,
                  statement_timeout: false,
                  idle_in_transaction_session_timeout: false,
                  query_timeout: false,
                  connect_timeout: 0
                },
                user: 'argos_webserver',
                database: 'agros_net_db_dev',
                port: 5424,
                host: 'dtgeo.iptime.org',
                replication: undefined,
                _Promise: [Function: Promise],
                _types: TypeOverrides {
                  _types: {
                    getTypeParser: [Function: getTypeParser],
                    setTypeParser: [Function: setTypeParser],
                    arrayParser: { create: [Function: create] },
                    builtins: {
                      BOOL: 16,
                      BYTEA: 17,
                      CHAR: 18,
                      INT8: 20,
                      INT2: 21,
                      INT4: 23,
                      REGPROC: 24,
                      TEXT: 25,
                      OID: 26,
                      TID: 27,
                      XID: 28,
                      CID: 29,
                      JSON: 114,
                      XML: 142,
                      PG_NODE_TREE: 194,
                      SMGR: 210,
                      PATH: 602,
                      POLYGON: 604,
                      CIDR: 650,
                      FLOAT4: 700,
                      FLOAT8: 701,
                      ABSTIME: 702,
                      RELTIME: 703,
                      TINTERVAL: 704,
                      CIRCLE: 718,
                      MACADDR8: 774,
                      MONEY: 790,
                      MACADDR: 829,
                      INET: 869,
                      ACLITEM: 1033,
                      BPCHAR: 1042,
                      VARCHAR: 1043,
                      DATE: 1082,
                      TIME: 1083,
                      TIMESTAMP: 1114,
                      TIMESTAMPTZ: 1184,
                      INTERVAL: 1186,
                      TIMETZ: 1266,
                      BIT: 1560,
                      VARBIT: 1562,
                      NUMERIC: 1700,
                      REFCURSOR: 1790,
                      REGPROCEDURE: 2202,
                      REGOPER: 2203,
                      REGOPERATOR: 2204,
                      REGCLASS: 2205,
                      REGTYPE: 2206,
                      UUID: 2950,
                      TXID_SNAPSHOT: 2970,
                      PG_LSN: 3220,
                      PG_NDISTINCT: 3361,
                      PG_DEPENDENCIES: 3402,
                      TSVECTOR: 3614,
                      TSQUERY: 3615,
                      GTSVECTOR: 3642,
                      REGCONFIG: 3734,
                      REGDICTIONARY: 3769,
                      JSONB: 3802,
                      REGNAMESPACE: 4089,
                      REGROLE: 4096
                    }
                  },
                  text: {},
                  binary: {}
                },
                _ending: false,
                _connecting: false,
                _connected: true,
                _connectionError: false,
                _queryable: true,
                connection: Connection {
                  _events: [Object: null prototype] {
                    newListener: [Function (anonymous)],
                    connect: [Function (anonymous)],
                    sslconnect: [Function (anonymous)],
                    authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
                    authenticationMD5Password: [Function: bound _handleAuthMD5Password],
                    authenticationSASL: [Function: bound _handleAuthSASL],
                    authenticationSASLContinue: [Function: bound _handleAuthSASLContinue],
                    authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
                    backendKeyData: [Function: bound _handleBackendKeyData],
                    error: [Function: bound _handleErrorEvent],
                    errorMessage: [Function: bound _handleErrorMessage],
                    readyForQuery: [Function: bound _handleReadyForQuery],
                    notice: [Function: bound _handleNotice],
                    rowDescription: [Function: bound _handleRowDescription],
                    dataRow: [Function: bound _handleDataRow],
                    portalSuspended: [Function: bound _handlePortalSuspended],
                    emptyQuery: [Function: bound _handleEmptyQuery],
                    commandComplete: [Function: bound _handleCommandComplete],
                    parseComplete: [Function: bound _handleParseComplete],
                    copyInResponse: [Function: bound _handleCopyInResponse],
                    copyData: [Function: bound _handleCopyData],
                    notification: [Function: bound _handleNotification],
                    end: [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  },
                  _eventsCount: 23,
                  _maxListeners: undefined,
                  stream: <ref *9> Socket {
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'dtgeo.iptime.org',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _events: [Object: null prototype] {
                      end: [
                        [Function: onReadableStreamEnd],
                        [Function (anonymous)],
                        [Function (anonymous)]
                      ],
                      error: [Function: reportStreamError],
                      close: [Function (anonymous)],
                      data: [Function (anonymous)]
                    },
                    _eventsCount: 4,
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: null,
                    _server: null,
                    [Symbol(async_id_symbol)]: 508,
                    [Symbol(kHandle)]: TCP {
                      reading: true,
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *9]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: true,
                    [Symbol(kSetKeepAlive)]: false,
                    [Symbol(kSetKeepAliveInitialDelay)]: 0,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0
                  },
                  _keepAlive: false,
                  _keepAliveInitialDelayMillis: 0,
                  lastBuffer: false,
                  parsedStatements: {},
                  ssl: false,
                  _ending: false,
                  _emitMessage: false,
                  _connecting: true,
                  [Symbol(kCapture)]: false
                },
                queryQueue: [],
                binary: false,
                processID: 17080,
                secretKey: -1513554452,
                ssl: false,
                _connectionTimeoutMillis: 0,
                _connectionCallback: null,
                release: [Function (anonymous)],
                activeQuery: null,
                readyForQuery: true,
                hasExecuted: true,
                _poolUseCount: 1,
                [Symbol(kCapture)]: false
              },
              idleListener: [Function: idleListener],
              timeoutId: Timeout {
                _idleTimeout: 30000,
                _idlePrev: [TimersList],
                _idleNext: [Timeout],
                _idleStart: 601,
                _onTimeout: [Function (anonymous)],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: true,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 680,
                [Symbol(triggerId)]: 508
              }
            }
          ],
          _expired: WeakSet { <items unknown> },
          _pendingQueue: [],
          _endCallback: undefined,
          ending: false,
          ended: false,
          [Symbol(kCapture)]: false
        },
        ownsPg: false,
        errorLog: [Function: bound error],
        pruneSessionInterval: 60000,
        generate: [Function (anonymous)],
        pruneTimer: Timeout {
          _idleTimeout: 60000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 600,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 675,
          [Symbol(triggerId)]: 594
        },
        [Symbol(kCapture)]: false
      },
      sessionID: 'zupMgUjQqtiuqUZZFVUaBShRCiUoogsT',
      session: Session {
        cookie: {
          path: '/',
          _expires: null,
          originalMaxAge: null,
          httpOnly: true
        }
      },
      _passport: {
        instance: Authenticator {
          _key: 'passport',
          _strategies: {
            session: SessionStrategy {
              name: 'session',
              _key: 'passport',
              _deserializeUser: [Function: bound ]
            },
            'local-login': Strategy {
              _usernameField: 'email',
              _passwordField: 'password',
              name: 'local',
              _verify: [Function (anonymous)],
              _passReqToCallback: true
            },
            'local-signup': Strategy {
              _usernameField: 'email',
              _passwordField: 'password',
              name: 'local',
              _verify: [Function (anonymous)],
              _passReqToCallback: true
            }
          },
          _serializers: [ [Function (anonymous)] ],
          _deserializers: [ [Function (anonymous)] ],
          _infoTransformers: [],
          _framework: {
            initialize: [Function: initialize],
            authenticate: [Function: authenticate]
          },
          _sm: SessionManager {
            _key: 'passport',
            _serializeUser: [Function: bound ]
          },
          Authenticator: [Function: Authenticator],
          Passport: [Function: Authenticator],
          Strategy: <ref *14> [Function: Strategy] { Strategy: [Circular *14] },
          strategies: { SessionStrategy: [Function: SessionStrategy] },
          _userProperty: 'user'
        }
      },
      logIn: [Function (anonymous)],
      login: [Function (anonymous)],
      logOut: [Function (anonymous)],
      logout: [Function (anonymous)],
      isAuthenticated: [Function (anonymous)],
      isUnauthenticated: [Function (anonymous)],
      _sessionManager: SessionManager {
        _key: 'passport',
        _serializeUser: [Function: bound ]
      },
      flash: [Function: _flash],
      route: Route {
        path: '/api/map/read/obj',
        stack: [
          Layer {
            handle: [Function: readObj],
            name: 'readObj',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'get'
          }
        ],
        methods: { get: true }
      },
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'user-agent': 'PostmanRuntime/7.32.3',
        accept: '*/*',
        'postman-token': '8a1da8f2-f49e-41be-bd99-45188017ebe4',
        host: 'localhost:3001',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive'
      },
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0,
      [Symbol(RequestTimeout)]: undefined
    }
  ]
}
2023-09-21 14:01:59 [ERROR] - TypeError: Converting circular structure to JSON
    --> starting at object with constructor 'Socket'
    |     property 'parser' -> object with constructor 'HTTPParser'
    --- property 'socket' closes the circle
    at JSON.stringify (<anonymous>)
    at prepareObject (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg\lib\utils.js:81:15)
    at prepareValue (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg\lib\utils.js:66:12)
    at prepareValueWrapper (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg\lib\utils.js:182:12)
    at writeValues (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg-protocol\dist\serializer.js:67:41)
    at Object.bind (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg-protocol\dist\serializer.js:98:5)
    at Connection.bind (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg\lib\connection.js:160:26)
    at Query.prepare (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg\lib\query.js:204:18)
    at Query.submit (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg\lib\query.js:155:12)
    at Client._pulseQueryQueue (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg\lib\client.js:481:45)
2023-09-21 14:01:59 [ERROR] - read err accoured!
2023-09-21 14:01:59 [DEBUG] - TypeError: Converting circular structure to JSON
    --> starting at object with constructor 'Socket'
    |     property 'parser' -> object with constructor 'HTTPParser'
    --- property 'socket' closes the circle
    at JSON.stringify (<anonymous>)
    at prepareObject (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg\lib\utils.js:81:15)
    at prepareValue (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg\lib\utils.js:66:12)
    at prepareValueWrapper (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg\lib\utils.js:182:12)
    at writeValues (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg-protocol\dist\serializer.js:67:41)
    at Object.bind (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg-protocol\dist\serializer.js:98:5)
    at Connection.bind (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg\lib\connection.js:160:26)
    at Query.prepare (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg\lib\query.js:204:18)
    at Query.submit (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg\lib\query.js:155:12)
    at Client._pulseQueryQueue (D:\Code\r-rfms\agros_net_server_node_git\node_modules\pg\lib\client.js:481:45)
2023-09-21 14:04:49 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 14:04:49 [DEBUG] - { text: "select current_setting('timezone'), now()", values: [] }
2023-09-21 14:04:49 [INFO] - Argos Platform : win32
2023-09-21 14:04:49 [INFO] - config.server_port : 3001
2023-09-21 14:04:49 [DEBUG] - route_loader.init called.
2023-09-21 14:04:49 [INFO] - Routing Moudle count : 72
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : / -- method : ./page/route_root:getRoot
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /login -- method : ./page/route_root:getLogin
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /signup -- method : ./page/route_account:getSignup
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /account/list -- method : ./page/route_account:getAccountList
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /account/my -- method : ./page/route_account:getAccountMy
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /account/view/:email -- method : ./page/route_account:getAccountView
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /equip/list/vehicle -- method : ./page/route_equip:getListVh
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /equip/list/sensor -- method : ./page/route_equip:getListSens
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /equip/add/vehicle -- method : ./page/route_equip:getAddVehicle
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /equip/add/sensor -- method : ./page/route_equip:getAddSensor
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /equip/vehicle/:vhid -- method : ./page/route_equip:getViewVh
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /equip/sens/:sensid -- method : ./page/route_equip:getViewSens
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /map/list/map -- method : ./page/route_map:getListMap
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /data/list/prj -- method : ./page/route_data:getListPrj
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /data/add/prj -- method : ./page/route_data:getAddPrj
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /data/list/cam -- method : ./page/route_data:getListDataCam
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /data/list/lidar -- method : ./page/route_data:getListDataLidar
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /data/list/obj -- method : ./page/route_data:getListObj
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /data/view/prj/:prjid -- method : ./page/route_data:getViewPrj
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /data/view/data/:dataid -- method : ./page/route_data:getViewData
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /stat/dashboard -- method : ./page/route_stat:getDashboard
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /doc/:docname -- method : ./page/route_docs:getDocuemnt
2023-09-21 14:04:49 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/account/read -- method : ./api/api_account:readUserList
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:uploadUserPhoto
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:postUpdateUser
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/account/changepw -- method : ./api/api_account:postChangePw
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/account/reset -- method : ./api/api_account:postUserReset
2023-09-21 14:04:49 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 14:04:49 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object] , targetPath : , originalName : false
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:postAddVehicle
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:postUpdateVehicle
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/equip/read/vh -- method : ./api/api_equip:readVhList
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:postAddSens
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/equip/read/sens -- method : ./api/api_equip:readSensList
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:postUpdateSens
2023-09-21 14:04:49 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object],[object Object] , targetPath : , originalName : true
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/data/add/prj -- method : ./api/api_data:postAddPrj
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/data/delete/prj -- method : ./api/api_data:postDelPrj
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/data/update/prj -- method : ./api/api_data:postUpdatePrj
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:uploadPrjData
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:postUploadPrjDataProc
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/data/read/prj -- method : ./api/api_data:readPrjList
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/data/read/cam -- method : ./api/api_data:readDataCamList
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/data/read/lidar -- method : ./api/api_data:readDataLidarList
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/data/read/obj -- method : ./api/api_obj:readObjList
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/data/package/:prjid/:dataty -- method : ./api/api_data:getDataPackage
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/data/down/:dataty/:dataid -- method : ./api/api_data:getDataDownload
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/data/path/:prjid -- method : ./api/api_data:getDataPath
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/data/lidar/img -- method : ./api/api_data:getLidarImg
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/data/proc/start -- method : ./api/api_data:startDataProc
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/map/sig -- method : ./api/api_map:postSigBySido
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapPrj -- method : ./api/api_map:postSearchMapByPrj
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapRegion -- method : ./api/api_map:postSearchMapByRegion
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/map/read/obj/:objRsId -- method : ./api/api_obj:readObj
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/stat/data-total -- method : ./api/api_stat:getTotalData
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/stat/prj-status -- method : ./api/api_stat:getProjectStauts
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/stat/data-period -- method : ./api/api_stat:getDataPeriod
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/stat/equip -- method : ./api/api_stat:getDataEquipStatus
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/stat/object -- method : ./api/api_stat:getObjStatus
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/auth/token -- method : ./api/api_rest:postAuthTokken
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/equip/list -- method : ./api/api_rest:getEquipList
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/project/add -- method : ./api/api_rest:postPrjAdd
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/data/meta -- method : ./api/api_rest:postMetaData
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/project/scan/:prjid -- method : ./api/api_rest:getPrjScan
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/project/data/:prjid -- method : ./api/api_rest:getPrjData
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/project/sync -- method : ./api/api_rest:postPrjSync
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/project/clone -- method : ./api/api_rest:postClonePrj
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/data/finish -- method : ./api/api_rest:postFinishData
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/data/prc-finish -- method : ./api/api_rest:postFinishPrcData
2023-09-21 14:04:49 [DEBUG] - Router setted - type : get -- path : /api/debug/token -- method : ./api/api_debug:getDebugToken
2023-09-21 14:04:49 [DEBUG] - Router setted - type : post -- path : /api/debug/update-pnu -- method : ./api/api_debug:postUpdatePnu
2023-09-21 14:04:49 [DEBUG] - config/passport called.
2023-09-21 14:04:49 [DEBUG] - local passport setted.
2023-09-21 14:04:49 [DEBUG] - init user_passport
2023-09-21 14:04:49 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 14:04:49 [DEBUG] - [func]codeUtil.init()
2023-09-21 14:04:49 [DEBUG] - [msg] loadUserType...
2023-09-21 14:04:49 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 14:04:49 [DEBUG] - { text: 'SELECT *  FROM tc_user_ty ORDER BY user_ty_id' }
2023-09-21 14:04:49 [DEBUG] - [msg] loadUserStatus...
2023-09-21 14:04:49 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 14:04:49 [DEBUG] - { text: 'SELECT *  FROM tc_user_cond ORDER BY user_cond_id' }
2023-09-21 14:04:49 [DEBUG] - [msg] loadPnuCode...
2023-09-21 14:04:49 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 14:04:49 [DEBUG] - { text: 'SELECT *  FROM tc_pnu_sigungu ORDER BY sido_cd, sigungu_cd' }
2023-09-21 14:04:49 [DEBUG] - [msg] loadCondCode...
2023-09-21 14:04:49 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 14:04:49 [DEBUG] - { text: 'SELECT *  FROM tc_vh_cond' }
2023-09-21 14:04:49 [DEBUG] - [msg] loadSensCode...
2023-09-21 14:04:49 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 14:04:49 [DEBUG] - { text: 'SELECT *  FROM tc_sens_ty' }
2023-09-21 14:04:49 [DEBUG] - [msg] loadWeatherCode...
2023-09-21 14:04:49 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 14:04:49 [DEBUG] - { text: 'SELECT *  FROM tc_weather order by weather_cd' }
2023-09-21 14:04:49 [DEBUG] - updateUtil.checkUpdate
2023-09-21 14:04:49 [INFO] - Express SSL server listening on port 443
2023-09-21 14:04:49 [INFO] - Express server listening on port 3001
2023-09-21 14:04:49 [DEBUG] - [ { current_setting: 'Asia/Seoul', now: 2023-09-21T05:04:50.868Z } ]
2023-09-21 14:04:51 [DEBUG] - GET : /api/map/read/obj/18552
2023-09-21 14:04:51 [DEBUG] - [func]objDB.getReadObj()
2023-09-21 14:04:51 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 14:04:51 [DEBUG] - {
  text: 'SELECT o.*, s.sign_nm, o.updt_yn, ph.org_file_nm, ph.data_file_path,\n' +
    '            ph.longtitude, ph.latitude, s.sign_img_file_path, pm.prj_nm, \n' +
    '            ST_AsText(ST_transform(ST_SetSRID(point, 32652), 4326)) point, count(*) OVER() total \n' +
    '            FROM obj_rs o\n' +
    '            LEFT JOIN tc_trffc_sign s ON o.cd = s.sign_id \n' +
    '            left join photo_mng ph on o.photo_id = ph.photo_id \n' +
    '            left join project_mng pm on o.prj_id = pm.prj_id\n' +
    '            where o.obj_rs_id = $1',
  values: [ '18552' ]
}
2023-09-21 15:54:09 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 15:54:09 [DEBUG] - GET : /data/list/obj
2023-09-21 15:54:09 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 15:54:09 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 15:54:09 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 15:54:09 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 15:54:09 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 15:54:09 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 15:54:09 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 15:54:09 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 15:54:09 [DEBUG] - GET : /api/data/read/obj?page=1&perPage=14&curItemId=34520&_=1695279249412
2023-09-21 15:54:09 [DEBUG] - [func]gridUtil.getDefaultInfo()
2023-09-21 15:54:09 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: undefined,
  filter_value: undefined
}
2023-09-21 15:54:09 [DEBUG] - [func]prjDB.getReadDataList()
2023-09-21 15:54:09 [DEBUG] - {
  page: 1,
  perPage: 14,
  sortColumn: 'o.obj_rs_id',
  sortAscending: undefined,
  filter_type: undefined,
  filter_value: undefined
}
2023-09-21 15:54:09 [DEBUG] - 'obj_rs_id'
2023-09-21 15:54:09 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 15:54:09 [DEBUG] - {
  text: 'SELECT o.*, s.sign_nm, o.updt_yn, ph.org_file_nm, ph.data_file_path,\n' +
    '              ph.longtitude, ph.latitude, s.sign_img_file_path, pm.prj_nm, \n' +
    '              ST_AsText(ST_transform(ST_SetSRID(point, 32652), 4326)) point, count(*) OVER() total \n' +
    '            FROM obj_rs o\n' +
    '            LEFT JOIN tc_trffc_sign s ON o.cd = s.sign_id \n' +
    '            left join photo_mng ph on o.photo_id = ph.photo_id \n' +
    '            left join project_mng pm on o.prj_id = pm.prj_id  ORDER BY o.obj_rs_id DESC , obj_rs_id  LIMIT $1 OFFSET $2',
  values: [ 14, 0 ]
}
2023-09-21 15:54:09 [DEBUG] - [func]gridUtil.convertGridData()
2023-09-21 16:37:09 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:37:09 [DEBUG] - { text: "select current_setting('timezone'), now()", values: [] }
2023-09-21 16:37:09 [INFO] - Argos Platform : win32
2023-09-21 16:37:09 [INFO] - config.server_port : 3001
2023-09-21 16:37:09 [DEBUG] - route_loader.init called.
2023-09-21 16:37:09 [INFO] - Routing Moudle count : 72
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : / -- method : ./page/route_root:getRoot
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /login -- method : ./page/route_root:getLogin
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /signup -- method : ./page/route_account:getSignup
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /account/list -- method : ./page/route_account:getAccountList
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /account/my -- method : ./page/route_account:getAccountMy
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /account/view/:email -- method : ./page/route_account:getAccountView
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /equip/list/vehicle -- method : ./page/route_equip:getListVh
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /equip/list/sensor -- method : ./page/route_equip:getListSens
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /equip/add/vehicle -- method : ./page/route_equip:getAddVehicle
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /equip/add/sensor -- method : ./page/route_equip:getAddSensor
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /equip/vehicle/:vhid -- method : ./page/route_equip:getViewVh
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /equip/sens/:sensid -- method : ./page/route_equip:getViewSens
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /map/list/map -- method : ./page/route_map:getListMap
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /data/list/prj -- method : ./page/route_data:getListPrj
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /data/add/prj -- method : ./page/route_data:getAddPrj
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /data/list/cam -- method : ./page/route_data:getListDataCam
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /data/list/lidar -- method : ./page/route_data:getListDataLidar
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /data/list/obj -- method : ./page/route_data:getListObj
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /data/view/prj/:prjid -- method : ./page/route_data:getViewPrj
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /data/view/data/:dataid -- method : ./page/route_data:getViewData
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /stat/dashboard -- method : ./page/route_stat:getDashboard
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /doc/:docname -- method : ./page/route_docs:getDocuemnt
2023-09-21 16:37:09 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/account/read -- method : ./api/api_account:readUserList
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:uploadUserPhoto
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:postUpdateUser
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/account/changepw -- method : ./api/api_account:postChangePw
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/account/reset -- method : ./api/api_account:postUserReset
2023-09-21 16:37:09 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 16:37:09 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object] , targetPath : , originalName : false
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:postAddVehicle
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:postUpdateVehicle
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/equip/read/vh -- method : ./api/api_equip:readVhList
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:postAddSens
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/equip/read/sens -- method : ./api/api_equip:readSensList
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:postUpdateSens
2023-09-21 16:37:09 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object],[object Object] , targetPath : , originalName : true
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/data/add/prj -- method : ./api/api_data:postAddPrj
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/data/delete/prj -- method : ./api/api_data:postDelPrj
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/data/update/prj -- method : ./api/api_data:postUpdatePrj
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:uploadPrjData
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:postUploadPrjDataProc
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/data/read/prj -- method : ./api/api_data:readPrjList
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/data/read/cam -- method : ./api/api_data:readDataCamList
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/data/read/lidar -- method : ./api/api_data:readDataLidarList
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/data/read/obj -- method : ./api/api_obj:readObjList
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/data/package/:prjid/:dataty -- method : ./api/api_data:getDataPackage
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/data/down/:dataty/:dataid -- method : ./api/api_data:getDataDownload
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/data/path/:prjid -- method : ./api/api_data:getDataPath
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/data/lidar/img -- method : ./api/api_data:getLidarImg
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/data/proc/start -- method : ./api/api_data:startDataProc
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/map/sig -- method : ./api/api_map:postSigBySido
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapPrj -- method : ./api/api_map:postSearchMapByPrj
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapRegion -- method : ./api/api_map:postSearchMapByRegion
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/map/read/obj/:objRsId -- method : ./api/api_obj:readObj
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/stat/data-total -- method : ./api/api_stat:getTotalData
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/stat/prj-status -- method : ./api/api_stat:getProjectStauts
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/stat/data-period -- method : ./api/api_stat:getDataPeriod
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/stat/equip -- method : ./api/api_stat:getDataEquipStatus
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/stat/object -- method : ./api/api_stat:getObjStatus
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/auth/token -- method : ./api/api_rest:postAuthTokken
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/equip/list -- method : ./api/api_rest:getEquipList
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/project/add -- method : ./api/api_rest:postPrjAdd
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/data/meta -- method : ./api/api_rest:postMetaData
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/project/scan/:prjid -- method : ./api/api_rest:getPrjScan
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/project/data/:prjid -- method : ./api/api_rest:getPrjData
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/project/sync -- method : ./api/api_rest:postPrjSync
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/project/clone -- method : ./api/api_rest:postClonePrj
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/data/finish -- method : ./api/api_rest:postFinishData
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/data/prc-finish -- method : ./api/api_rest:postFinishPrcData
2023-09-21 16:37:09 [DEBUG] - Router setted - type : get -- path : /api/debug/token -- method : ./api/api_debug:getDebugToken
2023-09-21 16:37:09 [DEBUG] - Router setted - type : post -- path : /api/debug/update-pnu -- method : ./api/api_debug:postUpdatePnu
2023-09-21 16:37:09 [DEBUG] - config/passport called.
2023-09-21 16:37:09 [DEBUG] - local passport setted.
2023-09-21 16:37:09 [DEBUG] - init user_passport
2023-09-21 16:37:09 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 16:37:09 [DEBUG] - [func]codeUtil.init()
2023-09-21 16:37:09 [DEBUG] - [msg] loadUserType...
2023-09-21 16:37:09 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:37:09 [DEBUG] - { text: 'SELECT *  FROM tc_user_ty ORDER BY user_ty_id' }
2023-09-21 16:37:09 [DEBUG] - [msg] loadUserStatus...
2023-09-21 16:37:09 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:37:09 [DEBUG] - { text: 'SELECT *  FROM tc_user_cond ORDER BY user_cond_id' }
2023-09-21 16:37:09 [DEBUG] - [msg] loadPnuCode...
2023-09-21 16:37:09 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:37:09 [DEBUG] - { text: 'SELECT *  FROM tc_pnu_sigungu ORDER BY sido_cd, sigungu_cd' }
2023-09-21 16:37:09 [DEBUG] - [msg] loadCondCode...
2023-09-21 16:37:09 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:37:09 [DEBUG] - { text: 'SELECT *  FROM tc_vh_cond' }
2023-09-21 16:37:09 [DEBUG] - [msg] loadSensCode...
2023-09-21 16:37:09 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:37:09 [DEBUG] - { text: 'SELECT *  FROM tc_sens_ty' }
2023-09-21 16:37:09 [DEBUG] - [msg] loadWeatherCode...
2023-09-21 16:37:09 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:37:09 [DEBUG] - { text: 'SELECT *  FROM tc_weather order by weather_cd' }
2023-09-21 16:37:09 [DEBUG] - updateUtil.checkUpdate
2023-09-21 16:37:09 [INFO] - Express SSL server listening on port 443
2023-09-21 16:37:09 [INFO] - Express server listening on port 3001
2023-09-21 16:37:09 [DEBUG] - [ { current_setting: 'Asia/Seoul', now: 2023-09-21T07:37:10.705Z } ]
2023-09-21 16:37:13 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:37:13 [DEBUG] - { text: "select current_setting('timezone'), now()", values: [] }
2023-09-21 16:37:13 [INFO] - Argos Platform : win32
2023-09-21 16:37:13 [INFO] - config.server_port : 3001
2023-09-21 16:37:13 [DEBUG] - route_loader.init called.
2023-09-21 16:37:13 [INFO] - Routing Moudle count : 72
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : / -- method : ./page/route_root:getRoot
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /login -- method : ./page/route_root:getLogin
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /signup -- method : ./page/route_account:getSignup
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /account/list -- method : ./page/route_account:getAccountList
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /account/my -- method : ./page/route_account:getAccountMy
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /account/view/:email -- method : ./page/route_account:getAccountView
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /equip/list/vehicle -- method : ./page/route_equip:getListVh
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /equip/list/sensor -- method : ./page/route_equip:getListSens
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /equip/add/vehicle -- method : ./page/route_equip:getAddVehicle
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /equip/add/sensor -- method : ./page/route_equip:getAddSensor
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /equip/vehicle/:vhid -- method : ./page/route_equip:getViewVh
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /equip/sens/:sensid -- method : ./page/route_equip:getViewSens
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /map/list/map -- method : ./page/route_map:getListMap
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /data/list/prj -- method : ./page/route_data:getListPrj
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /data/add/prj -- method : ./page/route_data:getAddPrj
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /data/list/cam -- method : ./page/route_data:getListDataCam
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /data/list/lidar -- method : ./page/route_data:getListDataLidar
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /data/list/obj -- method : ./page/route_data:getListObj
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /data/view/prj/:prjid -- method : ./page/route_data:getViewPrj
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /data/view/data/:dataid -- method : ./page/route_data:getViewData
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /stat/dashboard -- method : ./page/route_stat:getDashboard
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /doc/:docname -- method : ./page/route_docs:getDocuemnt
2023-09-21 16:37:13 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/account/read -- method : ./api/api_account:readUserList
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:uploadUserPhoto
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:postUpdateUser
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/account/changepw -- method : ./api/api_account:postChangePw
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/account/reset -- method : ./api/api_account:postUserReset
2023-09-21 16:37:13 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 16:37:13 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object] , targetPath : , originalName : false
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:postAddVehicle
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:postUpdateVehicle
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/equip/read/vh -- method : ./api/api_equip:readVhList
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:postAddSens
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/equip/read/sens -- method : ./api/api_equip:readSensList
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:postUpdateSens
2023-09-21 16:37:13 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object],[object Object] , targetPath : , originalName : true
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/data/add/prj -- method : ./api/api_data:postAddPrj
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/data/delete/prj -- method : ./api/api_data:postDelPrj
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/data/update/prj -- method : ./api/api_data:postUpdatePrj
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:uploadPrjData
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:postUploadPrjDataProc
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/data/read/prj -- method : ./api/api_data:readPrjList
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/data/read/cam -- method : ./api/api_data:readDataCamList
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/data/read/lidar -- method : ./api/api_data:readDataLidarList
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/data/read/obj -- method : ./api/api_obj:readObjList
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/data/package/:prjid/:dataty -- method : ./api/api_data:getDataPackage
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/data/down/:dataty/:dataid -- method : ./api/api_data:getDataDownload
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/data/path/:prjid -- method : ./api/api_data:getDataPath
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/data/lidar/img -- method : ./api/api_data:getLidarImg
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/data/proc/start -- method : ./api/api_data:startDataProc
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/map/sig -- method : ./api/api_map:postSigBySido
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapPrj -- method : ./api/api_map:postSearchMapByPrj
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapRegion -- method : ./api/api_map:postSearchMapByRegion
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/map/read/obj/:objRsId -- method : ./api/api_obj:readObj
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/stat/data-total -- method : ./api/api_stat:getTotalData
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/stat/prj-status -- method : ./api/api_stat:getProjectStauts
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/stat/data-period -- method : ./api/api_stat:getDataPeriod
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/stat/equip -- method : ./api/api_stat:getDataEquipStatus
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/stat/object -- method : ./api/api_stat:getObjStatus
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/auth/token -- method : ./api/api_rest:postAuthTokken
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/equip/list -- method : ./api/api_rest:getEquipList
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/project/add -- method : ./api/api_rest:postPrjAdd
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/data/meta -- method : ./api/api_rest:postMetaData
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/project/scan/:prjid -- method : ./api/api_rest:getPrjScan
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/project/data/:prjid -- method : ./api/api_rest:getPrjData
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/project/sync -- method : ./api/api_rest:postPrjSync
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/project/clone -- method : ./api/api_rest:postClonePrj
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/data/finish -- method : ./api/api_rest:postFinishData
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/data/prc-finish -- method : ./api/api_rest:postFinishPrcData
2023-09-21 16:37:13 [DEBUG] - Router setted - type : get -- path : /api/debug/token -- method : ./api/api_debug:getDebugToken
2023-09-21 16:37:13 [DEBUG] - Router setted - type : post -- path : /api/debug/update-pnu -- method : ./api/api_debug:postUpdatePnu
2023-09-21 16:37:13 [DEBUG] - config/passport called.
2023-09-21 16:37:13 [DEBUG] - local passport setted.
2023-09-21 16:37:13 [DEBUG] - init user_passport
2023-09-21 16:37:13 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 16:37:13 [DEBUG] - [func]codeUtil.init()
2023-09-21 16:37:13 [DEBUG] - [msg] loadUserType...
2023-09-21 16:37:13 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:37:13 [DEBUG] - { text: 'SELECT *  FROM tc_user_ty ORDER BY user_ty_id' }
2023-09-21 16:37:13 [DEBUG] - [msg] loadUserStatus...
2023-09-21 16:37:13 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:37:13 [DEBUG] - { text: 'SELECT *  FROM tc_user_cond ORDER BY user_cond_id' }
2023-09-21 16:37:13 [DEBUG] - [msg] loadPnuCode...
2023-09-21 16:37:13 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:37:13 [DEBUG] - { text: 'SELECT *  FROM tc_pnu_sigungu ORDER BY sido_cd, sigungu_cd' }
2023-09-21 16:37:13 [DEBUG] - [msg] loadCondCode...
2023-09-21 16:37:13 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:37:13 [DEBUG] - { text: 'SELECT *  FROM tc_vh_cond' }
2023-09-21 16:37:13 [DEBUG] - [msg] loadSensCode...
2023-09-21 16:37:13 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:37:13 [DEBUG] - { text: 'SELECT *  FROM tc_sens_ty' }
2023-09-21 16:37:13 [DEBUG] - [msg] loadWeatherCode...
2023-09-21 16:37:13 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:37:13 [DEBUG] - { text: 'SELECT *  FROM tc_weather order by weather_cd' }
2023-09-21 16:37:13 [DEBUG] - updateUtil.checkUpdate
2023-09-21 16:37:13 [INFO] - Express SSL server listening on port 443
2023-09-21 16:37:13 [INFO] - Express server listening on port 3001
2023-09-21 16:37:13 [DEBUG] - [ { current_setting: 'Asia/Seoul', now: 2023-09-21T07:37:15.076Z } ]
2023-09-21 16:38:44 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:38:44 [DEBUG] - { text: "select current_setting('timezone'), now()", values: [] }
2023-09-21 16:38:44 [INFO] - Argos Platform : win32
2023-09-21 16:38:44 [INFO] - config.server_port : 3001
2023-09-21 16:38:44 [DEBUG] - route_loader.init called.
2023-09-21 16:38:44 [INFO] - Routing Moudle count : 72
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : / -- method : ./page/route_root:getRoot
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /login -- method : ./page/route_root:getLogin
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /signup -- method : ./page/route_account:getSignup
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /account/list -- method : ./page/route_account:getAccountList
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /account/my -- method : ./page/route_account:getAccountMy
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /account/view/:email -- method : ./page/route_account:getAccountView
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /equip/list/vehicle -- method : ./page/route_equip:getListVh
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /equip/list/sensor -- method : ./page/route_equip:getListSens
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /equip/add/vehicle -- method : ./page/route_equip:getAddVehicle
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /equip/add/sensor -- method : ./page/route_equip:getAddSensor
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /equip/vehicle/:vhid -- method : ./page/route_equip:getViewVh
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /equip/sens/:sensid -- method : ./page/route_equip:getViewSens
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /map/list/map -- method : ./page/route_map:getListMap
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /data/list/prj -- method : ./page/route_data:getListPrj
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /data/add/prj -- method : ./page/route_data:getAddPrj
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /data/list/cam -- method : ./page/route_data:getListDataCam
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /data/list/lidar -- method : ./page/route_data:getListDataLidar
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /data/list/obj -- method : ./page/route_data:getListObj
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /data/view/prj/:prjid -- method : ./page/route_data:getViewPrj
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /data/view/data/:dataid -- method : ./page/route_data:getViewData
2023-09-21 16:38:44 [DEBUG] - Router setted - type : get -- path : /stat/dashboard -- method : ./page/route_stat:getDashboard
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /doc/:docname -- method : ./page/route_docs:getDocuemnt
2023-09-21 16:38:45 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/account/read -- method : ./api/api_account:readUserList
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:uploadUserPhoto
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:postUpdateUser
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/account/changepw -- method : ./api/api_account:postChangePw
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/account/reset -- method : ./api/api_account:postUserReset
2023-09-21 16:38:45 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 16:38:45 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object] , targetPath : , originalName : false
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:postAddVehicle
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:postUpdateVehicle
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/equip/read/vh -- method : ./api/api_equip:readVhList
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:postAddSens
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/equip/read/sens -- method : ./api/api_equip:readSensList
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:postUpdateSens
2023-09-21 16:38:45 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object],[object Object] , targetPath : , originalName : true
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/data/add/prj -- method : ./api/api_data:postAddPrj
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/data/delete/prj -- method : ./api/api_data:postDelPrj
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/data/update/prj -- method : ./api/api_data:postUpdatePrj
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:uploadPrjData
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:postUploadPrjDataProc
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/data/read/prj -- method : ./api/api_data:readPrjList
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/data/read/cam -- method : ./api/api_data:readDataCamList
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/data/read/lidar -- method : ./api/api_data:readDataLidarList
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/data/read/obj -- method : ./api/api_obj:readObjList
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/data/package/:prjid/:dataty -- method : ./api/api_data:getDataPackage
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/data/down/:dataty/:dataid -- method : ./api/api_data:getDataDownload
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/data/path/:prjid -- method : ./api/api_data:getDataPath
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/data/lidar/img -- method : ./api/api_data:getLidarImg
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/data/proc/start -- method : ./api/api_data:startDataProc
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/map/sig -- method : ./api/api_map:postSigBySido
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapPrj -- method : ./api/api_map:postSearchMapByPrj
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapRegion -- method : ./api/api_map:postSearchMapByRegion
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/map/read/obj/:objRsId -- method : ./api/api_obj:readObj
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/stat/data-total -- method : ./api/api_stat:getTotalData
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/stat/prj-status -- method : ./api/api_stat:getProjectStauts
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/stat/data-period -- method : ./api/api_stat:getDataPeriod
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/stat/equip -- method : ./api/api_stat:getDataEquipStatus
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/stat/object -- method : ./api/api_stat:getObjStatus
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/auth/token -- method : ./api/api_rest:postAuthTokken
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/equip/list -- method : ./api/api_rest:getEquipList
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/project/add -- method : ./api/api_rest:postPrjAdd
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/data/meta -- method : ./api/api_rest:postMetaData
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/project/scan/:prjid -- method : ./api/api_rest:getPrjScan
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/project/data/:prjid -- method : ./api/api_rest:getPrjData
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/project/sync -- method : ./api/api_rest:postPrjSync
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/project/clone -- method : ./api/api_rest:postClonePrj
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/data/finish -- method : ./api/api_rest:postFinishData
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/data/prc-finish -- method : ./api/api_rest:postFinishPrcData
2023-09-21 16:38:45 [DEBUG] - Router setted - type : get -- path : /api/debug/token -- method : ./api/api_debug:getDebugToken
2023-09-21 16:38:45 [DEBUG] - Router setted - type : post -- path : /api/debug/update-pnu -- method : ./api/api_debug:postUpdatePnu
2023-09-21 16:38:45 [DEBUG] - config/passport called.
2023-09-21 16:38:45 [DEBUG] - local passport setted.
2023-09-21 16:38:45 [DEBUG] - init user_passport
2023-09-21 16:38:45 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 16:38:45 [DEBUG] - [func]codeUtil.init()
2023-09-21 16:38:45 [DEBUG] - [msg] loadUserType...
2023-09-21 16:38:45 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:38:45 [DEBUG] - { text: 'SELECT *  FROM tc_user_ty ORDER BY user_ty_id' }
2023-09-21 16:38:45 [DEBUG] - [msg] loadUserStatus...
2023-09-21 16:38:45 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:38:45 [DEBUG] - { text: 'SELECT *  FROM tc_user_cond ORDER BY user_cond_id' }
2023-09-21 16:38:45 [DEBUG] - [msg] loadPnuCode...
2023-09-21 16:38:45 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:38:45 [DEBUG] - { text: 'SELECT *  FROM tc_pnu_sigungu ORDER BY sido_cd, sigungu_cd' }
2023-09-21 16:38:45 [DEBUG] - [msg] loadCondCode...
2023-09-21 16:38:45 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:38:45 [DEBUG] - { text: 'SELECT *  FROM tc_vh_cond' }
2023-09-21 16:38:45 [DEBUG] - [msg] loadSensCode...
2023-09-21 16:38:45 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:38:45 [DEBUG] - { text: 'SELECT *  FROM tc_sens_ty' }
2023-09-21 16:38:45 [DEBUG] - [msg] loadWeatherCode...
2023-09-21 16:38:45 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:38:45 [DEBUG] - { text: 'SELECT *  FROM tc_weather order by weather_cd' }
2023-09-21 16:38:45 [DEBUG] - updateUtil.checkUpdate
2023-09-21 16:38:45 [INFO] - Express SSL server listening on port 443
2023-09-21 16:38:45 [INFO] - Express server listening on port 3001
2023-09-21 16:38:45 [DEBUG] - [ { current_setting: 'Asia/Seoul', now: 2023-09-21T07:38:46.581Z } ]
2023-09-21 16:38:48 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:38:48 [DEBUG] - GET : /map/list/map
2023-09-21 16:38:48 [DEBUG] - [func]prjDB.getPrjList()
2023-09-21 16:38:48 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:38:48 [DEBUG] - { text: 'SELECT * FROM project_mng p ORDER BY p.prj_id', values: [] }
2023-09-21 16:38:48 [DEBUG] - [func]sidoDB.getSidoList()
2023-09-21 16:38:48 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:38:48 [DEBUG] - {
  text: 'SELECT id, ctprvn_cd, ctp_eng_nm, ctp_kor_nm FROM korea_map_sido sido ORDER BY sido.id',
  values: []
}
2023-09-21 16:38:48 [DEBUG] - [func]sigDB.getSigList()
2023-09-21 16:38:48 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:38:48 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig ORDER BY sig.id',
  values: []
}
2023-09-21 16:38:48 [DEBUG] - [func]trffcSignTyDB.getTrffcSignTyList()
2023-09-21 16:38:48 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:38:48 [DEBUG] - {
  text: 'SELECT * FROM tc_trffc_sign_ty ttst WHERE ttst.trffc_sign_ty_id not in ($1, $2, $3) ORDER BY ttst.trffc_sign_ty_id',
  values: [ '4', '5', '6' ]
}
2023-09-21 16:38:48 [DEBUG] - [func]trffcSignDB.getTrffcSignList()
2023-09-21 16:38:48 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:38:48 [DEBUG] - {
  text: 'SELECT * FROM tc_trffc_sign tts ORDER BY tts.sign_ty_id',
  values: []
}
2023-09-21 16:38:48 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:38:48 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:38:48 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:38:48 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 16:38:48 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 16:38:48 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:38:48 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 16:38:48 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 16:38:51 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:38:51 [DEBUG] - POST : /api/map/searchMapPrj : - postSearchMapByPrj()
2023-09-21 16:38:51 [DEBUG] - [func]objDB.getObjListByPrj()
2023-09-21 16:38:51 [DEBUG] - [
  '1',   '2',  '3',  '4',  '5',  '6',  '7',   '8',   '9',
  '10',  '11', '12', '13', '14', '15', '16',  '17',  '18',
  '19',  '20', '21', '22', '24', '25', '26',  '27',  '28',
  '29',  '30', '31', '32', '33', '34', '35',  '36',  '37',
  '38',  '39', '40', '41', '42', '43', '44',  '45',  '46',
  '47',  '48', '49', '50', '51', '52', '53',  '54',  '55',
  '56',  '57', '58', '59', '60', '61', '62',  '63',  '64',
  '65',  '66', '67', '68', '69', '70', '71',  '73',  '74',
  '75',  '76', '77', '78', '79', '80', '81',  '82',  '83',
  '84',  '85', '87', '88', '89', '90', '91',  '92',  '93',
  '94',  '95', '96', '97', '98', '99', '100', '101', '102',
  '103',
  ... 2 more items
]
2023-09-21 16:38:51 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:38:51 [DEBUG] - {
  text: "SELECT obj.obj_rs_id, obj.photo_id, obj.cd, obj.point, obj.prj_id, obj.check_yn, obj.updt_yn, st_x(st_transform(point, 4326)) naverX, st_y(st_transform(point, 4326)) naverY, tts.sign_ty_id, prj.prj_nm, tts.sign_nm, ttst.trffc_sign_ty_nm FROM obj_rs obj  LEFT jOIN tc_trffc_sign tts ON obj.cd = tts.sign_id LEFT JOIN project_mng prj ON obj.prj_id = prj.prj_id LEFT JOIN tc_trffc_sign_ty ttst ON tts.sign_ty_id = ttst.trffc_sign_ty_id  WHERE obj.updt_yn in (1,2,3,4) and obj.prj_id in (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105) and obj.cd in ('119', '101', '102', '104', '105', '139', '138', '135', '133', '129', '126', '123', '117', '114', '111', '108', '109', '120', '118', '116', '113', '110', '107', '103', '106', '141', '140', '136', '134', '1382', '137', '132', '115', '130', '112', '128', '127', '125', '124', '122', '121');",
  values: []
}
2023-09-21 16:38:53 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:38:53 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:39:26 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:39:26 [DEBUG] - { text: "select current_setting('timezone'), now()", values: [] }
2023-09-21 16:39:26 [INFO] - Argos Platform : win32
2023-09-21 16:39:26 [INFO] - config.server_port : 3001
2023-09-21 16:39:26 [DEBUG] - route_loader.init called.
2023-09-21 16:39:26 [INFO] - Routing Moudle count : 72
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : / -- method : ./page/route_root:getRoot
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /login -- method : ./page/route_root:getLogin
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /signup -- method : ./page/route_account:getSignup
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /account/list -- method : ./page/route_account:getAccountList
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /account/my -- method : ./page/route_account:getAccountMy
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /account/view/:email -- method : ./page/route_account:getAccountView
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /equip/list/vehicle -- method : ./page/route_equip:getListVh
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /equip/list/sensor -- method : ./page/route_equip:getListSens
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /equip/add/vehicle -- method : ./page/route_equip:getAddVehicle
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /equip/add/sensor -- method : ./page/route_equip:getAddSensor
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /equip/vehicle/:vhid -- method : ./page/route_equip:getViewVh
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /equip/sens/:sensid -- method : ./page/route_equip:getViewSens
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /map/list/map -- method : ./page/route_map:getListMap
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /data/list/prj -- method : ./page/route_data:getListPrj
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /data/add/prj -- method : ./page/route_data:getAddPrj
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /data/list/cam -- method : ./page/route_data:getListDataCam
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /data/list/lidar -- method : ./page/route_data:getListDataLidar
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /data/list/obj -- method : ./page/route_data:getListObj
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /data/view/prj/:prjid -- method : ./page/route_data:getViewPrj
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /data/view/data/:dataid -- method : ./page/route_data:getViewData
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /stat/dashboard -- method : ./page/route_stat:getDashboard
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /doc/:docname -- method : ./page/route_docs:getDocuemnt
2023-09-21 16:39:26 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/account/read -- method : ./api/api_account:readUserList
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:uploadUserPhoto
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:postUpdateUser
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/account/changepw -- method : ./api/api_account:postChangePw
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/account/reset -- method : ./api/api_account:postUserReset
2023-09-21 16:39:26 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 16:39:26 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object] , targetPath : , originalName : false
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:postAddVehicle
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:postUpdateVehicle
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/equip/read/vh -- method : ./api/api_equip:readVhList
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:postAddSens
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/equip/read/sens -- method : ./api/api_equip:readSensList
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:postUpdateSens
2023-09-21 16:39:26 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object],[object Object] , targetPath : , originalName : true
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/data/add/prj -- method : ./api/api_data:postAddPrj
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/data/delete/prj -- method : ./api/api_data:postDelPrj
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/data/update/prj -- method : ./api/api_data:postUpdatePrj
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:uploadPrjData
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:postUploadPrjDataProc
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/data/read/prj -- method : ./api/api_data:readPrjList
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/data/read/cam -- method : ./api/api_data:readDataCamList
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/data/read/lidar -- method : ./api/api_data:readDataLidarList
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/data/read/obj -- method : ./api/api_obj:readObjList
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/data/package/:prjid/:dataty -- method : ./api/api_data:getDataPackage
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/data/down/:dataty/:dataid -- method : ./api/api_data:getDataDownload
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/data/path/:prjid -- method : ./api/api_data:getDataPath
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/data/lidar/img -- method : ./api/api_data:getLidarImg
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/data/proc/start -- method : ./api/api_data:startDataProc
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/map/sig -- method : ./api/api_map:postSigBySido
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapPrj -- method : ./api/api_map:postSearchMapByPrj
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapRegion -- method : ./api/api_map:postSearchMapByRegion
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/map/read/obj/:objRsId -- method : ./api/api_obj:readObj
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/stat/data-total -- method : ./api/api_stat:getTotalData
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/stat/prj-status -- method : ./api/api_stat:getProjectStauts
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/stat/data-period -- method : ./api/api_stat:getDataPeriod
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/stat/equip -- method : ./api/api_stat:getDataEquipStatus
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/stat/object -- method : ./api/api_stat:getObjStatus
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/auth/token -- method : ./api/api_rest:postAuthTokken
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/equip/list -- method : ./api/api_rest:getEquipList
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/project/add -- method : ./api/api_rest:postPrjAdd
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/data/meta -- method : ./api/api_rest:postMetaData
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/project/scan/:prjid -- method : ./api/api_rest:getPrjScan
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/project/data/:prjid -- method : ./api/api_rest:getPrjData
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/project/sync -- method : ./api/api_rest:postPrjSync
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/project/clone -- method : ./api/api_rest:postClonePrj
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/data/finish -- method : ./api/api_rest:postFinishData
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/data/prc-finish -- method : ./api/api_rest:postFinishPrcData
2023-09-21 16:39:26 [DEBUG] - Router setted - type : get -- path : /api/debug/token -- method : ./api/api_debug:getDebugToken
2023-09-21 16:39:26 [DEBUG] - Router setted - type : post -- path : /api/debug/update-pnu -- method : ./api/api_debug:postUpdatePnu
2023-09-21 16:39:26 [DEBUG] - config/passport called.
2023-09-21 16:39:26 [DEBUG] - local passport setted.
2023-09-21 16:39:26 [DEBUG] - init user_passport
2023-09-21 16:39:26 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 16:39:26 [DEBUG] - [func]codeUtil.init()
2023-09-21 16:39:26 [DEBUG] - [msg] loadUserType...
2023-09-21 16:39:26 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:39:26 [DEBUG] - { text: 'SELECT *  FROM tc_user_ty ORDER BY user_ty_id' }
2023-09-21 16:39:26 [DEBUG] - [msg] loadUserStatus...
2023-09-21 16:39:26 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:39:26 [DEBUG] - { text: 'SELECT *  FROM tc_user_cond ORDER BY user_cond_id' }
2023-09-21 16:39:26 [DEBUG] - [msg] loadPnuCode...
2023-09-21 16:39:26 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:39:26 [DEBUG] - { text: 'SELECT *  FROM tc_pnu_sigungu ORDER BY sido_cd, sigungu_cd' }
2023-09-21 16:39:26 [DEBUG] - [msg] loadCondCode...
2023-09-21 16:39:26 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:39:26 [DEBUG] - { text: 'SELECT *  FROM tc_vh_cond' }
2023-09-21 16:39:26 [DEBUG] - [msg] loadSensCode...
2023-09-21 16:39:26 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:39:26 [DEBUG] - { text: 'SELECT *  FROM tc_sens_ty' }
2023-09-21 16:39:26 [DEBUG] - [msg] loadWeatherCode...
2023-09-21 16:39:26 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:39:26 [DEBUG] - { text: 'SELECT *  FROM tc_weather order by weather_cd' }
2023-09-21 16:39:26 [DEBUG] - updateUtil.checkUpdate
2023-09-21 16:39:26 [INFO] - Express SSL server listening on port 443
2023-09-21 16:39:26 [INFO] - Express server listening on port 3001
2023-09-21 16:39:26 [DEBUG] - [ { current_setting: 'Asia/Seoul', now: 2023-09-21T07:39:27.780Z } ]
2023-09-21 16:39:27 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:39:27 [DEBUG] - GET : /map/list/map
2023-09-21 16:39:27 [DEBUG] - [func]prjDB.getPrjList()
2023-09-21 16:39:27 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:39:27 [DEBUG] - { text: 'SELECT * FROM project_mng p ORDER BY p.prj_id', values: [] }
2023-09-21 16:39:27 [DEBUG] - [func]sidoDB.getSidoList()
2023-09-21 16:39:27 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:39:27 [DEBUG] - {
  text: 'SELECT id, ctprvn_cd, ctp_eng_nm, ctp_kor_nm FROM korea_map_sido sido ORDER BY sido.id',
  values: []
}
2023-09-21 16:39:27 [DEBUG] - [func]sigDB.getSigList()
2023-09-21 16:39:27 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:39:27 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig ORDER BY sig.id',
  values: []
}
2023-09-21 16:39:27 [DEBUG] - [func]trffcSignTyDB.getTrffcSignTyList()
2023-09-21 16:39:27 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:39:27 [DEBUG] - {
  text: 'SELECT * FROM tc_trffc_sign_ty ttst WHERE ttst.trffc_sign_ty_id not in ($1, $2, $3) ORDER BY ttst.trffc_sign_ty_id',
  values: [ '4', '5', '6' ]
}
2023-09-21 16:39:27 [DEBUG] - [func]trffcSignDB.getTrffcSignList()
2023-09-21 16:39:27 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:39:27 [DEBUG] - {
  text: 'SELECT * FROM tc_trffc_sign tts ORDER BY tts.sign_ty_id',
  values: []
}
2023-09-21 16:39:27 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:39:27 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:39:27 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:39:27 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:39:27 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 16:39:27 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 16:39:27 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:39:27 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 16:39:27 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 16:39:30 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:39:30 [DEBUG] - POST : /api/map/searchMapPrj : - postSearchMapByPrj()
2023-09-21 16:39:30 [DEBUG] - [func]objDB.getObjListByPrj()
2023-09-21 16:39:30 [DEBUG] - [
  '1',   '2',  '3',  '4',  '5',  '6',  '7',   '8',   '9',
  '10',  '11', '12', '13', '14', '15', '16',  '17',  '18',
  '19',  '20', '21', '22', '24', '25', '26',  '27',  '28',
  '29',  '30', '31', '32', '33', '34', '35',  '36',  '37',
  '38',  '39', '40', '41', '42', '43', '44',  '45',  '46',
  '47',  '48', '49', '50', '51', '52', '53',  '54',  '55',
  '56',  '57', '58', '59', '60', '61', '62',  '63',  '64',
  '65',  '66', '67', '68', '69', '70', '71',  '73',  '74',
  '75',  '76', '77', '78', '79', '80', '81',  '82',  '83',
  '84',  '85', '87', '88', '89', '90', '91',  '92',  '93',
  '94',  '95', '96', '97', '98', '99', '100', '101', '102',
  '103',
  ... 2 more items
]
2023-09-21 16:39:30 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:39:30 [DEBUG] - {
  text: "SELECT obj.obj_rs_id, obj.photo_id, obj.cd, obj.point, obj.prj_id, obj.check_yn, obj.updt_yn, st_x(st_transform(point, 4326)) naverX, st_y(st_transform(point, 4326)) naverY, tts.sign_ty_id, prj.prj_nm, tts.sign_nm, ttst.trffc_sign_ty_nm FROM obj_rs obj  LEFT jOIN tc_trffc_sign tts ON obj.cd = tts.sign_id LEFT JOIN project_mng prj ON obj.prj_id = prj.prj_id LEFT JOIN tc_trffc_sign_ty ttst ON tts.sign_ty_id = ttst.trffc_sign_ty_id  WHERE obj.updt_yn in (1,2,3,4) and obj.prj_id in (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105) and obj.cd in ('119', '101', '102', '104', '105', '139', '138', '135', '133', '129', '126', '123', '117', '114', '111', '108', '109', '120', '118', '116', '113', '110', '107', '103', '106', '141', '140', '136', '134', '1382', '137', '132', '115', '130', '112', '128', '127', '125', '124', '122', '121');",
  values: []
}
2023-09-21 16:44:10 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:44:10 [DEBUG] - { text: "select current_setting('timezone'), now()", values: [] }
2023-09-21 16:44:10 [INFO] - Argos Platform : win32
2023-09-21 16:44:10 [INFO] - config.server_port : 3001
2023-09-21 16:44:10 [DEBUG] - route_loader.init called.
2023-09-21 16:44:10 [INFO] - Routing Moudle count : 72
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : / -- method : ./page/route_root:getRoot
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /login -- method : ./page/route_root:getLogin
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /signup -- method : ./page/route_account:getSignup
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /account/list -- method : ./page/route_account:getAccountList
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /account/my -- method : ./page/route_account:getAccountMy
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /account/view/:email -- method : ./page/route_account:getAccountView
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /equip/list/vehicle -- method : ./page/route_equip:getListVh
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /equip/list/sensor -- method : ./page/route_equip:getListSens
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /equip/add/vehicle -- method : ./page/route_equip:getAddVehicle
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /equip/add/sensor -- method : ./page/route_equip:getAddSensor
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /equip/vehicle/:vhid -- method : ./page/route_equip:getViewVh
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /equip/sens/:sensid -- method : ./page/route_equip:getViewSens
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /map/list/map -- method : ./page/route_map:getListMap
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /data/list/prj -- method : ./page/route_data:getListPrj
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /data/add/prj -- method : ./page/route_data:getAddPrj
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /data/list/cam -- method : ./page/route_data:getListDataCam
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /data/list/lidar -- method : ./page/route_data:getListDataLidar
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /data/list/obj -- method : ./page/route_data:getListObj
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /data/view/prj/:prjid -- method : ./page/route_data:getViewPrj
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /data/view/data/:dataid -- method : ./page/route_data:getViewData
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /stat/dashboard -- method : ./page/route_stat:getDashboard
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /doc/:docname -- method : ./page/route_docs:getDocuemnt
2023-09-21 16:44:10 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/account/read -- method : ./api/api_account:readUserList
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:uploadUserPhoto
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/account/update -- method : ./api/api_account:postUpdateUser
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/account/changepw -- method : ./api/api_account:postChangePw
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/account/reset -- method : ./api/api_account:postUserReset
2023-09-21 16:44:10 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 16:44:10 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object] , targetPath : , originalName : false
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/equip/add/vehicle -- method : ./api/api_equip:postAddVehicle
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:uploadEquipPhoto
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/equip/update/vehicle -- method : ./api/api_equip:postUpdateVehicle
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/equip/read/vh -- method : ./api/api_equip:readVhList
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/equip/add/sens -- method : ./api/api_equip:postAddSens
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/equip/read/sens -- method : ./api/api_equip:readSensList
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:uploadSensFiles
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/equip/update/sens -- method : ./api/api_equip:postUpdateSens
2023-09-21 16:44:10 [DEBUG] - localStorage.multerFileds() - fieldName : [object Object],[object Object],[object Object] , targetPath : , originalName : true
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/data/add/prj -- method : ./api/api_data:postAddPrj
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/data/delete/prj -- method : ./api/api_data:postDelPrj
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/data/update/prj -- method : ./api/api_data:postUpdatePrj
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:uploadPrjData
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/data/upload/prjdata/:prjid -- method : ./api/api_data:postUploadPrjDataProc
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/data/read/prj -- method : ./api/api_data:readPrjList
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/data/read/cam -- method : ./api/api_data:readDataCamList
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/data/read/lidar -- method : ./api/api_data:readDataLidarList
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/data/read/obj -- method : ./api/api_obj:readObjList
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/data/package/:prjid/:dataty -- method : ./api/api_data:getDataPackage
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/data/down/:dataty/:dataid -- method : ./api/api_data:getDataDownload
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/data/path/:prjid -- method : ./api/api_data:getDataPath
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/data/lidar/img -- method : ./api/api_data:getLidarImg
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/data/proc/start -- method : ./api/api_data:startDataProc
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/map/sig -- method : ./api/api_map:postSigBySido
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapPrj -- method : ./api/api_map:postSearchMapByPrj
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/map/searchMapRegion -- method : ./api/api_map:postSearchMapByRegion
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/map/read/obj/:objRsId -- method : ./api/api_obj:readObj
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/stat/data-total -- method : ./api/api_stat:getTotalData
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/stat/prj-status -- method : ./api/api_stat:getProjectStauts
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/stat/data-period -- method : ./api/api_stat:getDataPeriod
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/stat/equip -- method : ./api/api_stat:getDataEquipStatus
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/stat/object -- method : ./api/api_stat:getObjStatus
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/auth/token -- method : ./api/api_rest:postAuthTokken
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/equip/list -- method : ./api/api_rest:getEquipList
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/project/add -- method : ./api/api_rest:postPrjAdd
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/data/meta -- method : ./api/api_rest:postMetaData
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/project/scan/:prjid -- method : ./api/api_rest:getPrjScan
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/project/data/:prjid -- method : ./api/api_rest:getPrjData
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/project/sync -- method : ./api/api_rest:postPrjSync
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/project/clone -- method : ./api/api_rest:postClonePrj
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/data/finish -- method : ./api/api_rest:postFinishData
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/data/prc-finish -- method : ./api/api_rest:postFinishPrcData
2023-09-21 16:44:10 [DEBUG] - Router setted - type : get -- path : /api/debug/token -- method : ./api/api_debug:getDebugToken
2023-09-21 16:44:10 [DEBUG] - Router setted - type : post -- path : /api/debug/update-pnu -- method : ./api/api_debug:postUpdatePnu
2023-09-21 16:44:10 [DEBUG] - config/passport called.
2023-09-21 16:44:10 [DEBUG] - local passport setted.
2023-09-21 16:44:10 [DEBUG] - init user_passport
2023-09-21 16:44:10 [DEBUG] - localStorage.multer() - fieldName : photo , targetPath : , originalName : undefined
2023-09-21 16:44:10 [DEBUG] - [func]codeUtil.init()
2023-09-21 16:44:10 [DEBUG] - [msg] loadUserType...
2023-09-21 16:44:10 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:44:10 [DEBUG] - { text: 'SELECT *  FROM tc_user_ty ORDER BY user_ty_id' }
2023-09-21 16:44:10 [DEBUG] - [msg] loadUserStatus...
2023-09-21 16:44:10 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:44:10 [DEBUG] - { text: 'SELECT *  FROM tc_user_cond ORDER BY user_cond_id' }
2023-09-21 16:44:10 [DEBUG] - [msg] loadPnuCode...
2023-09-21 16:44:10 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:44:10 [DEBUG] - { text: 'SELECT *  FROM tc_pnu_sigungu ORDER BY sido_cd, sigungu_cd' }
2023-09-21 16:44:10 [DEBUG] - [msg] loadCondCode...
2023-09-21 16:44:10 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:44:10 [DEBUG] - { text: 'SELECT *  FROM tc_vh_cond' }
2023-09-21 16:44:10 [DEBUG] - [msg] loadSensCode...
2023-09-21 16:44:10 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:44:10 [DEBUG] - { text: 'SELECT *  FROM tc_sens_ty' }
2023-09-21 16:44:10 [DEBUG] - [msg] loadWeatherCode...
2023-09-21 16:44:10 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:44:10 [DEBUG] - { text: 'SELECT *  FROM tc_weather order by weather_cd' }
2023-09-21 16:44:10 [DEBUG] - updateUtil.checkUpdate
2023-09-21 16:44:10 [INFO] - Express SSL server listening on port 443
2023-09-21 16:44:10 [INFO] - Express server listening on port 3001
2023-09-21 16:44:10 [DEBUG] - [ { current_setting: 'Asia/Seoul', now: 2023-09-21T07:44:12.075Z } ]
2023-09-21 16:44:13 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:44:13 [DEBUG] - GET : /map/list/map
2023-09-21 16:44:13 [DEBUG] - [func]prjDB.getPrjList()
2023-09-21 16:44:13 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:44:13 [DEBUG] - { text: 'SELECT * FROM project_mng p ORDER BY p.prj_id', values: [] }
2023-09-21 16:44:13 [DEBUG] - [func]sidoDB.getSidoList()
2023-09-21 16:44:13 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:44:13 [DEBUG] - {
  text: 'SELECT id, ctprvn_cd, ctp_eng_nm, ctp_kor_nm FROM korea_map_sido sido ORDER BY sido.id',
  values: []
}
2023-09-21 16:44:13 [DEBUG] - [func]sigDB.getSigList()
2023-09-21 16:44:13 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:44:13 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig ORDER BY sig.id',
  values: []
}
2023-09-21 16:44:13 [DEBUG] - [func]trffcSignTyDB.getTrffcSignTyList()
2023-09-21 16:44:13 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:44:13 [DEBUG] - {
  text: 'SELECT * FROM tc_trffc_sign_ty ttst WHERE ttst.trffc_sign_ty_id not in ($1, $2, $3) ORDER BY ttst.trffc_sign_ty_id',
  values: [ '4', '5', '6' ]
}
2023-09-21 16:44:13 [DEBUG] - [func]trffcSignDB.getTrffcSignList()
2023-09-21 16:44:13 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:44:13 [DEBUG] - {
  text: 'SELECT * FROM tc_trffc_sign tts ORDER BY tts.sign_ty_id',
  values: []
}
2023-09-21 16:44:13 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:44:13 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:44:13 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:44:13 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:44:13 [DEBUG] - POST : /api/map/sig :  - postSigBySido()
2023-09-21 16:44:13 [DEBUG] - [func]sigDB.SigListBySido - sidoCd : 11
2023-09-21 16:44:13 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:44:13 [DEBUG] - {
  text: 'SELECT id, sig_cd, sig_eng_nm, sig_kor_nm FROM korea_map_sig sig WHERE sig.sig_cd LIKE $1 ORDER BY sig.id',
  values: [ '11%' ]
}
2023-09-21 16:44:13 [DEBUG] - select sigListBySido succeed : 11
2023-09-21 16:44:16 [DEBUG] - deserializeUser() 호출됨.
2023-09-21 16:44:16 [DEBUG] - POST : /api/map/searchMapPrj : - postSearchMapByPrj()
2023-09-21 16:44:16 [DEBUG] - [func]objDB.getObjListByPrj()
2023-09-21 16:44:16 [DEBUG] - [
  '1',   '2',  '3',  '4',  '5',  '6',  '7',   '8',   '9',
  '10',  '11', '12', '13', '14', '15', '16',  '17',  '18',
  '19',  '20', '21', '22', '24', '25', '26',  '27',  '28',
  '29',  '30', '31', '32', '33', '34', '35',  '36',  '37',
  '38',  '39', '40', '41', '42', '43', '44',  '45',  '46',
  '47',  '48', '49', '50', '51', '52', '53',  '54',  '55',
  '56',  '57', '58', '59', '60', '61', '62',  '63',  '64',
  '65',  '66', '67', '68', '69', '70', '71',  '73',  '74',
  '75',  '76', '77', '78', '79', '80', '81',  '82',  '83',
  '84',  '85', '87', '88', '89', '90', '91',  '92',  '93',
  '94',  '95', '96', '97', '98', '99', '100', '101', '102',
  '103',
  ... 2 more items
]
2023-09-21 16:44:16 [DEBUG] - [func] postgresUtil.query() : 
2023-09-21 16:44:16 [DEBUG] - {
  text: "SELECT obj.obj_rs_id, obj.photo_id, obj.cd, obj.point, obj.prj_id, obj.check_yn, obj.updt_yn, st_x(st_transform(point, 4326)) naverX, st_y(st_transform(point, 4326)) naverY, tts.sign_ty_id, prj.prj_nm, tts.sign_nm, ttst.trffc_sign_ty_nm FROM obj_rs obj  LEFT jOIN tc_trffc_sign tts ON obj.cd = tts.sign_id LEFT JOIN project_mng prj ON obj.prj_id = prj.prj_id LEFT JOIN tc_trffc_sign_ty ttst ON tts.sign_ty_id = ttst.trffc_sign_ty_id  WHERE obj.updt_yn in (1,2,3,4) and obj.prj_id in (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105) and obj.cd in ('119', '101', '102', '104', '105', '139', '138', '135', '133', '129', '126', '123', '117', '114', '111', '108', '109', '120', '118', '116', '113', '110', '107', '103', '106', '141', '140', '136', '134', '1382', '137', '132', '115', '130', '112', '128', '127', '125', '124', '122', '121');",
  values: []
}
